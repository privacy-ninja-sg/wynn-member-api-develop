// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/predicate"
	"wynn-member-api/ent/prettygameaccount"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PrettyGameAccountUpdate is the builder for updating PrettyGameAccount entities.
type PrettyGameAccountUpdate struct {
	config
	hooks    []Hook
	mutation *PrettyGameAccountMutation
}

// Where appends a list predicates to the PrettyGameAccountUpdate builder.
func (pgau *PrettyGameAccountUpdate) Where(ps ...predicate.PrettyGameAccount) *PrettyGameAccountUpdate {
	pgau.mutation.Where(ps...)
	return pgau
}

// SetUUID sets the "uuid" field.
func (pgau *PrettyGameAccountUpdate) SetUUID(u uuid.UUID) *PrettyGameAccountUpdate {
	pgau.mutation.SetUUID(u)
	return pgau
}

// SetUsername sets the "username" field.
func (pgau *PrettyGameAccountUpdate) SetUsername(s string) *PrettyGameAccountUpdate {
	pgau.mutation.SetUsername(s)
	return pgau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillableUsername(s *string) *PrettyGameAccountUpdate {
	if s != nil {
		pgau.SetUsername(*s)
	}
	return pgau
}

// ClearUsername clears the value of the "username" field.
func (pgau *PrettyGameAccountUpdate) ClearUsername() *PrettyGameAccountUpdate {
	pgau.mutation.ClearUsername()
	return pgau
}

// SetPassword sets the "password" field.
func (pgau *PrettyGameAccountUpdate) SetPassword(s string) *PrettyGameAccountUpdate {
	pgau.mutation.SetPassword(s)
	return pgau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillablePassword(s *string) *PrettyGameAccountUpdate {
	if s != nil {
		pgau.SetPassword(*s)
	}
	return pgau
}

// ClearPassword clears the value of the "password" field.
func (pgau *PrettyGameAccountUpdate) ClearPassword() *PrettyGameAccountUpdate {
	pgau.mutation.ClearPassword()
	return pgau
}

// SetDesktopURI sets the "desktop_uri" field.
func (pgau *PrettyGameAccountUpdate) SetDesktopURI(s string) *PrettyGameAccountUpdate {
	pgau.mutation.SetDesktopURI(s)
	return pgau
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillableDesktopURI(s *string) *PrettyGameAccountUpdate {
	if s != nil {
		pgau.SetDesktopURI(*s)
	}
	return pgau
}

// ClearDesktopURI clears the value of the "desktop_uri" field.
func (pgau *PrettyGameAccountUpdate) ClearDesktopURI() *PrettyGameAccountUpdate {
	pgau.mutation.ClearDesktopURI()
	return pgau
}

// SetMobileURI sets the "mobile_uri" field.
func (pgau *PrettyGameAccountUpdate) SetMobileURI(s string) *PrettyGameAccountUpdate {
	pgau.mutation.SetMobileURI(s)
	return pgau
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillableMobileURI(s *string) *PrettyGameAccountUpdate {
	if s != nil {
		pgau.SetMobileURI(*s)
	}
	return pgau
}

// ClearMobileURI clears the value of the "mobile_uri" field.
func (pgau *PrettyGameAccountUpdate) ClearMobileURI() *PrettyGameAccountUpdate {
	pgau.mutation.ClearMobileURI()
	return pgau
}

// SetCreatedAt sets the "created_at" field.
func (pgau *PrettyGameAccountUpdate) SetCreatedAt(t time.Time) *PrettyGameAccountUpdate {
	pgau.mutation.SetCreatedAt(t)
	return pgau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillableCreatedAt(t *time.Time) *PrettyGameAccountUpdate {
	if t != nil {
		pgau.SetCreatedAt(*t)
	}
	return pgau
}

// SetUpdatedAt sets the "updated_at" field.
func (pgau *PrettyGameAccountUpdate) SetUpdatedAt(t time.Time) *PrettyGameAccountUpdate {
	pgau.mutation.SetUpdatedAt(t)
	return pgau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillableUpdatedAt(t *time.Time) *PrettyGameAccountUpdate {
	if t != nil {
		pgau.SetUpdatedAt(*t)
	}
	return pgau
}

// SetRawData sets the "raw_data" field.
func (pgau *PrettyGameAccountUpdate) SetRawData(s string) *PrettyGameAccountUpdate {
	pgau.mutation.SetRawData(s)
	return pgau
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillableRawData(s *string) *PrettyGameAccountUpdate {
	if s != nil {
		pgau.SetRawData(*s)
	}
	return pgau
}

// ClearRawData clears the value of the "raw_data" field.
func (pgau *PrettyGameAccountUpdate) ClearRawData() *PrettyGameAccountUpdate {
	pgau.mutation.ClearRawData()
	return pgau
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (pgau *PrettyGameAccountUpdate) SetOwnerID(id int) *PrettyGameAccountUpdate {
	pgau.mutation.SetOwnerID(id)
	return pgau
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (pgau *PrettyGameAccountUpdate) SetNillableOwnerID(id *int) *PrettyGameAccountUpdate {
	if id != nil {
		pgau = pgau.SetOwnerID(*id)
	}
	return pgau
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (pgau *PrettyGameAccountUpdate) SetOwner(g *GameAccount) *PrettyGameAccountUpdate {
	return pgau.SetOwnerID(g.ID)
}

// Mutation returns the PrettyGameAccountMutation object of the builder.
func (pgau *PrettyGameAccountUpdate) Mutation() *PrettyGameAccountMutation {
	return pgau.mutation
}

// ClearOwner clears the "owner" edge to the GameAccount entity.
func (pgau *PrettyGameAccountUpdate) ClearOwner() *PrettyGameAccountUpdate {
	pgau.mutation.ClearOwner()
	return pgau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pgau *PrettyGameAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pgau.hooks) == 0 {
		if err = pgau.check(); err != nil {
			return 0, err
		}
		affected, err = pgau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrettyGameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pgau.check(); err != nil {
				return 0, err
			}
			pgau.mutation = mutation
			affected, err = pgau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pgau.hooks) - 1; i >= 0; i-- {
			if pgau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pgau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pgau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pgau *PrettyGameAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := pgau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pgau *PrettyGameAccountUpdate) Exec(ctx context.Context) error {
	_, err := pgau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgau *PrettyGameAccountUpdate) ExecX(ctx context.Context) {
	if err := pgau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgau *PrettyGameAccountUpdate) check() error {
	if v, ok := pgau.mutation.DesktopURI(); ok {
		if err := prettygameaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf("ent: validator failed for field \"desktop_uri\": %w", err)}
		}
	}
	if v, ok := pgau.mutation.MobileURI(); ok {
		if err := prettygameaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf("ent: validator failed for field \"mobile_uri\": %w", err)}
		}
	}
	return nil
}

func (pgau *PrettyGameAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prettygameaccount.Table,
			Columns: prettygameaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prettygameaccount.FieldID,
			},
		},
	}
	if ps := pgau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pgau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: prettygameaccount.FieldUUID,
		})
	}
	if value, ok := pgau.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldUsername,
		})
	}
	if pgau.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldUsername,
		})
	}
	if value, ok := pgau.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldPassword,
		})
	}
	if pgau.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldPassword,
		})
	}
	if value, ok := pgau.mutation.DesktopURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldDesktopURI,
		})
	}
	if pgau.mutation.DesktopURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldDesktopURI,
		})
	}
	if value, ok := pgau.mutation.MobileURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldMobileURI,
		})
	}
	if pgau.mutation.MobileURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldMobileURI,
		})
	}
	if value, ok := pgau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prettygameaccount.FieldCreatedAt,
		})
	}
	if value, ok := pgau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prettygameaccount.FieldUpdatedAt,
		})
	}
	if value, ok := pgau.mutation.RawData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldRawData,
		})
	}
	if pgau.mutation.RawDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldRawData,
		})
	}
	if pgau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prettygameaccount.OwnerTable,
			Columns: []string{prettygameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prettygameaccount.OwnerTable,
			Columns: []string{prettygameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pgau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prettygameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PrettyGameAccountUpdateOne is the builder for updating a single PrettyGameAccount entity.
type PrettyGameAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrettyGameAccountMutation
}

// SetUUID sets the "uuid" field.
func (pgauo *PrettyGameAccountUpdateOne) SetUUID(u uuid.UUID) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetUUID(u)
	return pgauo
}

// SetUsername sets the "username" field.
func (pgauo *PrettyGameAccountUpdateOne) SetUsername(s string) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetUsername(s)
	return pgauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillableUsername(s *string) *PrettyGameAccountUpdateOne {
	if s != nil {
		pgauo.SetUsername(*s)
	}
	return pgauo
}

// ClearUsername clears the value of the "username" field.
func (pgauo *PrettyGameAccountUpdateOne) ClearUsername() *PrettyGameAccountUpdateOne {
	pgauo.mutation.ClearUsername()
	return pgauo
}

// SetPassword sets the "password" field.
func (pgauo *PrettyGameAccountUpdateOne) SetPassword(s string) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetPassword(s)
	return pgauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillablePassword(s *string) *PrettyGameAccountUpdateOne {
	if s != nil {
		pgauo.SetPassword(*s)
	}
	return pgauo
}

// ClearPassword clears the value of the "password" field.
func (pgauo *PrettyGameAccountUpdateOne) ClearPassword() *PrettyGameAccountUpdateOne {
	pgauo.mutation.ClearPassword()
	return pgauo
}

// SetDesktopURI sets the "desktop_uri" field.
func (pgauo *PrettyGameAccountUpdateOne) SetDesktopURI(s string) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetDesktopURI(s)
	return pgauo
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillableDesktopURI(s *string) *PrettyGameAccountUpdateOne {
	if s != nil {
		pgauo.SetDesktopURI(*s)
	}
	return pgauo
}

// ClearDesktopURI clears the value of the "desktop_uri" field.
func (pgauo *PrettyGameAccountUpdateOne) ClearDesktopURI() *PrettyGameAccountUpdateOne {
	pgauo.mutation.ClearDesktopURI()
	return pgauo
}

// SetMobileURI sets the "mobile_uri" field.
func (pgauo *PrettyGameAccountUpdateOne) SetMobileURI(s string) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetMobileURI(s)
	return pgauo
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillableMobileURI(s *string) *PrettyGameAccountUpdateOne {
	if s != nil {
		pgauo.SetMobileURI(*s)
	}
	return pgauo
}

// ClearMobileURI clears the value of the "mobile_uri" field.
func (pgauo *PrettyGameAccountUpdateOne) ClearMobileURI() *PrettyGameAccountUpdateOne {
	pgauo.mutation.ClearMobileURI()
	return pgauo
}

// SetCreatedAt sets the "created_at" field.
func (pgauo *PrettyGameAccountUpdateOne) SetCreatedAt(t time.Time) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetCreatedAt(t)
	return pgauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *PrettyGameAccountUpdateOne {
	if t != nil {
		pgauo.SetCreatedAt(*t)
	}
	return pgauo
}

// SetUpdatedAt sets the "updated_at" field.
func (pgauo *PrettyGameAccountUpdateOne) SetUpdatedAt(t time.Time) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetUpdatedAt(t)
	return pgauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *PrettyGameAccountUpdateOne {
	if t != nil {
		pgauo.SetUpdatedAt(*t)
	}
	return pgauo
}

// SetRawData sets the "raw_data" field.
func (pgauo *PrettyGameAccountUpdateOne) SetRawData(s string) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetRawData(s)
	return pgauo
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillableRawData(s *string) *PrettyGameAccountUpdateOne {
	if s != nil {
		pgauo.SetRawData(*s)
	}
	return pgauo
}

// ClearRawData clears the value of the "raw_data" field.
func (pgauo *PrettyGameAccountUpdateOne) ClearRawData() *PrettyGameAccountUpdateOne {
	pgauo.mutation.ClearRawData()
	return pgauo
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (pgauo *PrettyGameAccountUpdateOne) SetOwnerID(id int) *PrettyGameAccountUpdateOne {
	pgauo.mutation.SetOwnerID(id)
	return pgauo
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (pgauo *PrettyGameAccountUpdateOne) SetNillableOwnerID(id *int) *PrettyGameAccountUpdateOne {
	if id != nil {
		pgauo = pgauo.SetOwnerID(*id)
	}
	return pgauo
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (pgauo *PrettyGameAccountUpdateOne) SetOwner(g *GameAccount) *PrettyGameAccountUpdateOne {
	return pgauo.SetOwnerID(g.ID)
}

// Mutation returns the PrettyGameAccountMutation object of the builder.
func (pgauo *PrettyGameAccountUpdateOne) Mutation() *PrettyGameAccountMutation {
	return pgauo.mutation
}

// ClearOwner clears the "owner" edge to the GameAccount entity.
func (pgauo *PrettyGameAccountUpdateOne) ClearOwner() *PrettyGameAccountUpdateOne {
	pgauo.mutation.ClearOwner()
	return pgauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pgauo *PrettyGameAccountUpdateOne) Select(field string, fields ...string) *PrettyGameAccountUpdateOne {
	pgauo.fields = append([]string{field}, fields...)
	return pgauo
}

// Save executes the query and returns the updated PrettyGameAccount entity.
func (pgauo *PrettyGameAccountUpdateOne) Save(ctx context.Context) (*PrettyGameAccount, error) {
	var (
		err  error
		node *PrettyGameAccount
	)
	if len(pgauo.hooks) == 0 {
		if err = pgauo.check(); err != nil {
			return nil, err
		}
		node, err = pgauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrettyGameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pgauo.check(); err != nil {
				return nil, err
			}
			pgauo.mutation = mutation
			node, err = pgauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pgauo.hooks) - 1; i >= 0; i-- {
			if pgauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pgauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pgauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pgauo *PrettyGameAccountUpdateOne) SaveX(ctx context.Context) *PrettyGameAccount {
	node, err := pgauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pgauo *PrettyGameAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := pgauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgauo *PrettyGameAccountUpdateOne) ExecX(ctx context.Context) {
	if err := pgauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgauo *PrettyGameAccountUpdateOne) check() error {
	if v, ok := pgauo.mutation.DesktopURI(); ok {
		if err := prettygameaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf("ent: validator failed for field \"desktop_uri\": %w", err)}
		}
	}
	if v, ok := pgauo.mutation.MobileURI(); ok {
		if err := prettygameaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf("ent: validator failed for field \"mobile_uri\": %w", err)}
		}
	}
	return nil
}

func (pgauo *PrettyGameAccountUpdateOne) sqlSave(ctx context.Context) (_node *PrettyGameAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prettygameaccount.Table,
			Columns: prettygameaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prettygameaccount.FieldID,
			},
		},
	}
	id, ok := pgauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PrettyGameAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pgauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prettygameaccount.FieldID)
		for _, f := range fields {
			if !prettygameaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prettygameaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pgauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pgauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: prettygameaccount.FieldUUID,
		})
	}
	if value, ok := pgauo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldUsername,
		})
	}
	if pgauo.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldUsername,
		})
	}
	if value, ok := pgauo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldPassword,
		})
	}
	if pgauo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldPassword,
		})
	}
	if value, ok := pgauo.mutation.DesktopURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldDesktopURI,
		})
	}
	if pgauo.mutation.DesktopURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldDesktopURI,
		})
	}
	if value, ok := pgauo.mutation.MobileURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldMobileURI,
		})
	}
	if pgauo.mutation.MobileURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldMobileURI,
		})
	}
	if value, ok := pgauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prettygameaccount.FieldCreatedAt,
		})
	}
	if value, ok := pgauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prettygameaccount.FieldUpdatedAt,
		})
	}
	if value, ok := pgauo.mutation.RawData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldRawData,
		})
	}
	if pgauo.mutation.RawDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prettygameaccount.FieldRawData,
		})
	}
	if pgauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prettygameaccount.OwnerTable,
			Columns: []string{prettygameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prettygameaccount.OwnerTable,
			Columns: []string{prettygameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrettyGameAccount{config: pgauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pgauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prettygameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
