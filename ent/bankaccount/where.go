// Code generated by entc, DO NOT EDIT.

package bankaccount

import (
	"time"
	"wynn-member-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// BankAccountID applies equality check predicate on the "bank_account_id" field. It's identical to BankAccountIDEQ.
func BankAccountID(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDLast applies equality check predicate on the "bank_account_id_last" field. It's identical to BankAccountIDLastEQ.
func BankAccountIDLast(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountName applies equality check predicate on the "bank_account_name" field. It's identical to BankAccountNameEQ.
func BankAccountName(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountName), v))
	})
}

// BankCode applies equality check predicate on the "bank_code" field. It's identical to BankCodeEQ.
func BankCode(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankCode), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// BankAccountIDEQ applies the EQ predicate on the "bank_account_id" field.
func BankAccountIDEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDNEQ applies the NEQ predicate on the "bank_account_id" field.
func BankAccountIDNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDIn applies the In predicate on the "bank_account_id" field.
func BankAccountIDIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankAccountID), v...))
	})
}

// BankAccountIDNotIn applies the NotIn predicate on the "bank_account_id" field.
func BankAccountIDNotIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankAccountID), v...))
	})
}

// BankAccountIDGT applies the GT predicate on the "bank_account_id" field.
func BankAccountIDGT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDGTE applies the GTE predicate on the "bank_account_id" field.
func BankAccountIDGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDLT applies the LT predicate on the "bank_account_id" field.
func BankAccountIDLT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDLTE applies the LTE predicate on the "bank_account_id" field.
func BankAccountIDLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDContains applies the Contains predicate on the "bank_account_id" field.
func BankAccountIDContains(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDHasPrefix applies the HasPrefix predicate on the "bank_account_id" field.
func BankAccountIDHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDHasSuffix applies the HasSuffix predicate on the "bank_account_id" field.
func BankAccountIDHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDEqualFold applies the EqualFold predicate on the "bank_account_id" field.
func BankAccountIDEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDContainsFold applies the ContainsFold predicate on the "bank_account_id" field.
func BankAccountIDContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankAccountID), v))
	})
}

// BankAccountIDLastEQ applies the EQ predicate on the "bank_account_id_last" field.
func BankAccountIDLastEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastNEQ applies the NEQ predicate on the "bank_account_id_last" field.
func BankAccountIDLastNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastIn applies the In predicate on the "bank_account_id_last" field.
func BankAccountIDLastIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankAccountIDLast), v...))
	})
}

// BankAccountIDLastNotIn applies the NotIn predicate on the "bank_account_id_last" field.
func BankAccountIDLastNotIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankAccountIDLast), v...))
	})
}

// BankAccountIDLastGT applies the GT predicate on the "bank_account_id_last" field.
func BankAccountIDLastGT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastGTE applies the GTE predicate on the "bank_account_id_last" field.
func BankAccountIDLastGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastLT applies the LT predicate on the "bank_account_id_last" field.
func BankAccountIDLastLT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastLTE applies the LTE predicate on the "bank_account_id_last" field.
func BankAccountIDLastLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastContains applies the Contains predicate on the "bank_account_id_last" field.
func BankAccountIDLastContains(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastHasPrefix applies the HasPrefix predicate on the "bank_account_id_last" field.
func BankAccountIDLastHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastHasSuffix applies the HasSuffix predicate on the "bank_account_id_last" field.
func BankAccountIDLastHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastEqualFold applies the EqualFold predicate on the "bank_account_id_last" field.
func BankAccountIDLastEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountIDLastContainsFold applies the ContainsFold predicate on the "bank_account_id_last" field.
func BankAccountIDLastContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankAccountIDLast), v))
	})
}

// BankAccountNameEQ applies the EQ predicate on the "bank_account_name" field.
func BankAccountNameEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameNEQ applies the NEQ predicate on the "bank_account_name" field.
func BankAccountNameNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameIn applies the In predicate on the "bank_account_name" field.
func BankAccountNameIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankAccountName), v...))
	})
}

// BankAccountNameNotIn applies the NotIn predicate on the "bank_account_name" field.
func BankAccountNameNotIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankAccountName), v...))
	})
}

// BankAccountNameGT applies the GT predicate on the "bank_account_name" field.
func BankAccountNameGT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameGTE applies the GTE predicate on the "bank_account_name" field.
func BankAccountNameGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameLT applies the LT predicate on the "bank_account_name" field.
func BankAccountNameLT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameLTE applies the LTE predicate on the "bank_account_name" field.
func BankAccountNameLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameContains applies the Contains predicate on the "bank_account_name" field.
func BankAccountNameContains(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameHasPrefix applies the HasPrefix predicate on the "bank_account_name" field.
func BankAccountNameHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameHasSuffix applies the HasSuffix predicate on the "bank_account_name" field.
func BankAccountNameHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameEqualFold applies the EqualFold predicate on the "bank_account_name" field.
func BankAccountNameEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameContainsFold applies the ContainsFold predicate on the "bank_account_name" field.
func BankAccountNameContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankAccountName), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// BankCodeEQ applies the EQ predicate on the "bank_code" field.
func BankCodeEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankCode), v))
	})
}

// BankCodeNEQ applies the NEQ predicate on the "bank_code" field.
func BankCodeNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankCode), v))
	})
}

// BankCodeIn applies the In predicate on the "bank_code" field.
func BankCodeIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankCode), v...))
	})
}

// BankCodeNotIn applies the NotIn predicate on the "bank_code" field.
func BankCodeNotIn(vs ...string) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankCode), v...))
	})
}

// BankCodeGT applies the GT predicate on the "bank_code" field.
func BankCodeGT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankCode), v))
	})
}

// BankCodeGTE applies the GTE predicate on the "bank_code" field.
func BankCodeGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankCode), v))
	})
}

// BankCodeLT applies the LT predicate on the "bank_code" field.
func BankCodeLT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankCode), v))
	})
}

// BankCodeLTE applies the LTE predicate on the "bank_code" field.
func BankCodeLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankCode), v))
	})
}

// BankCodeContains applies the Contains predicate on the "bank_code" field.
func BankCodeContains(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankCode), v))
	})
}

// BankCodeHasPrefix applies the HasPrefix predicate on the "bank_code" field.
func BankCodeHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankCode), v))
	})
}

// BankCodeHasSuffix applies the HasSuffix predicate on the "bank_code" field.
func BankCodeHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankCode), v))
	})
}

// BankCodeIsNil applies the IsNil predicate on the "bank_code" field.
func BankCodeIsNil() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankCode)))
	})
}

// BankCodeNotNil applies the NotNil predicate on the "bank_code" field.
func BankCodeNotNil() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankCode)))
	})
}

// BankCodeEqualFold applies the EqualFold predicate on the "bank_code" field.
func BankCodeEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankCode), v))
	})
}

// BankCodeContainsFold applies the ContainsFold predicate on the "bank_code" field.
func BankCodeContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankCode), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BankAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BankAccount {
	vc := time.Time(v)
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), vc))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBank applies the HasEdge predicate on the "bank" edge.
func HasBank() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBankWith applies the HasEdge predicate on the "bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.Bank) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
