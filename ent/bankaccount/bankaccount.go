// Code generated by entc, DO NOT EDIT.

package bankaccount

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the bankaccount type in the database.
	Label = "bank_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldBankAccountID holds the string denoting the bank_account_id field in the database.
	FieldBankAccountID = "bank_account_id"
	// FieldBankAccountIDLast holds the string denoting the bank_account_id_last field in the database.
	FieldBankAccountIDLast = "bank_account_id_last"
	// FieldBankAccountName holds the string denoting the bank_account_name field in the database.
	FieldBankAccountName = "bank_account_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldBankCode holds the string denoting the bank_code field in the database.
	FieldBankCode = "bank_code"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeBank holds the string denoting the bank edge name in mutations.
	EdgeBank = "bank"
	// Table holds the table name of the bankaccount in the database.
	Table = "bank_accounts"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "bank_accounts"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_banks"
	// BankTable is the table that holds the bank relation/edge.
	BankTable = "bank_accounts"
	// BankInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	BankInverseTable = "banks"
	// BankColumn is the table column denoting the bank relation/edge.
	BankColumn = "bank_accounts"
)

// Columns holds all SQL columns for bankaccount fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldBankAccountID,
	FieldBankAccountIDLast,
	FieldBankAccountName,
	FieldStatus,
	FieldBankCode,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bank_accounts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bank_accounts",
	"user_banks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// BankAccountIDLastValidator is a validator for the "bank_account_id_last" field. It is called by the builders before save.
	BankAccountIDLastValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusRejected Status = "rejected"
	StatusApproved Status = "approved"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRejected, StatusApproved:
		return nil
	default:
		return fmt.Errorf("bankaccount: invalid enum value for status field: %q", s)
	}
}
