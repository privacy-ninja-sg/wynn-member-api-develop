// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wynn-member-api/ent/accesstoken"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
)

// AccessToken is the model entity for the AccessToken schema.
type AccessToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LineToken holds the value of the "line_token" field.
	LineToken string `json:"line_token,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// TokenExpire holds the value of the "token_expire" field.
	TokenExpire time.Time `json:"token_expire,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessTokenQuery when eager-loading is set.
	Edges             AccessTokenEdges `json:"edges"`
	user_access_token *int
}

// AccessTokenEdges holds the relations/edges for other nodes in the graph.
type AccessTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccessTokenEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessToken) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesstoken.FieldID:
			values[i] = new(sql.NullInt64)
		case accesstoken.FieldLineToken, accesstoken.FieldAccessToken, accesstoken.FieldIP:
			values[i] = new(sql.NullString)
		case accesstoken.FieldTokenExpire, accesstoken.FieldCreatedAt, accesstoken.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case accesstoken.ForeignKeys[0]: // user_access_token
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccessToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessToken fields.
func (at *AccessToken) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesstoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int(value.Int64)
		case accesstoken.FieldLineToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_token", values[i])
			} else if value.Valid {
				at.LineToken = value.String
			}
		case accesstoken.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				at.AccessToken = value.String
			}
		case accesstoken.FieldTokenExpire:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field token_expire", values[i])
			} else if value.Valid {
				at.TokenExpire = value.Time
			}
		case accesstoken.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				at.IP = value.String
			}
		case accesstoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case accesstoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case accesstoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_access_token", value)
			} else if value.Valid {
				at.user_access_token = new(int)
				*at.user_access_token = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the AccessToken entity.
func (at *AccessToken) QueryOwner() *UserQuery {
	return (&AccessTokenClient{config: at.config}).QueryOwner(at)
}

// Update returns a builder for updating this AccessToken.
// Note that you need to call AccessToken.Unwrap() before calling this method if this AccessToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AccessToken) Update() *AccessTokenUpdateOne {
	return (&AccessTokenClient{config: at.config}).UpdateOne(at)
}

// Unwrap unwraps the AccessToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AccessToken) Unwrap() *AccessToken {
	tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessToken is not a transactional entity")
	}
	at.config.driver = tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AccessToken) String() string {
	var builder strings.Builder
	builder.WriteString("AccessToken(")
	builder.WriteString(fmt.Sprintf("id=%v", at.ID))
	builder.WriteString(", line_token=")
	builder.WriteString(at.LineToken)
	builder.WriteString(", access_token=")
	builder.WriteString(at.AccessToken)
	builder.WriteString(", token_expire=")
	builder.WriteString(fmt.Sprintf("%v", at.TokenExpire))
	builder.WriteString(", ip=")
	builder.WriteString(at.IP)
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", at.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", at.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// AccessTokens is a parsable slice of AccessToken.
type AccessTokens []*AccessToken

func (at AccessTokens) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
