// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/game"
	"wynn-member-api/ent/predicate"
	"wynn-member-api/ent/transfertransaction"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TransferTransactionUpdate is the builder for updating TransferTransaction entities.
type TransferTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransferTransactionMutation
}

// Where appends a list predicates to the TransferTransactionUpdate builder.
func (ttu *TransferTransactionUpdate) Where(ps ...predicate.TransferTransaction) *TransferTransactionUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetUUID sets the "uuid" field.
func (ttu *TransferTransactionUpdate) SetUUID(u uuid.UUID) *TransferTransactionUpdate {
	ttu.mutation.SetUUID(u)
	return ttu
}

// SetAmount sets the "amount" field.
func (ttu *TransferTransactionUpdate) SetAmount(f float32) *TransferTransactionUpdate {
	ttu.mutation.ResetAmount()
	ttu.mutation.SetAmount(f)
	return ttu
}

// AddAmount adds f to the "amount" field.
func (ttu *TransferTransactionUpdate) AddAmount(f float32) *TransferTransactionUpdate {
	ttu.mutation.AddAmount(f)
	return ttu
}

// SetStatus sets the "status" field.
func (ttu *TransferTransactionUpdate) SetStatus(t transfertransaction.Status) *TransferTransactionUpdate {
	ttu.mutation.SetStatus(t)
	return ttu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttu *TransferTransactionUpdate) SetNillableStatus(t *transfertransaction.Status) *TransferTransactionUpdate {
	if t != nil {
		ttu.SetStatus(*t)
	}
	return ttu
}

// SetTxnType sets the "txn_type" field.
func (ttu *TransferTransactionUpdate) SetTxnType(tt transfertransaction.TxnType) *TransferTransactionUpdate {
	ttu.mutation.SetTxnType(tt)
	return ttu
}

// SetNillableTxnType sets the "txn_type" field if the given value is not nil.
func (ttu *TransferTransactionUpdate) SetNillableTxnType(tt *transfertransaction.TxnType) *TransferTransactionUpdate {
	if tt != nil {
		ttu.SetTxnType(*tt)
	}
	return ttu
}

// SetCreatedAt sets the "created_at" field.
func (ttu *TransferTransactionUpdate) SetCreatedAt(t time.Time) *TransferTransactionUpdate {
	ttu.mutation.SetCreatedAt(t)
	return ttu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttu *TransferTransactionUpdate) SetNillableCreatedAt(t *time.Time) *TransferTransactionUpdate {
	if t != nil {
		ttu.SetCreatedAt(*t)
	}
	return ttu
}

// SetUpdatedAt sets the "updated_at" field.
func (ttu *TransferTransactionUpdate) SetUpdatedAt(t time.Time) *TransferTransactionUpdate {
	ttu.mutation.SetUpdatedAt(t)
	return ttu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttu *TransferTransactionUpdate) SetNillableUpdatedAt(t *time.Time) *TransferTransactionUpdate {
	if t != nil {
		ttu.SetUpdatedAt(*t)
	}
	return ttu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ttu *TransferTransactionUpdate) SetOwnerID(id int) *TransferTransactionUpdate {
	ttu.mutation.SetOwnerID(id)
	return ttu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ttu *TransferTransactionUpdate) SetNillableOwnerID(id *int) *TransferTransactionUpdate {
	if id != nil {
		ttu = ttu.SetOwnerID(*id)
	}
	return ttu
}

// SetOwner sets the "owner" edge to the User entity.
func (ttu *TransferTransactionUpdate) SetOwner(u *User) *TransferTransactionUpdate {
	return ttu.SetOwnerID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (ttu *TransferTransactionUpdate) SetGameID(id int) *TransferTransactionUpdate {
	ttu.mutation.SetGameID(id)
	return ttu
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (ttu *TransferTransactionUpdate) SetNillableGameID(id *int) *TransferTransactionUpdate {
	if id != nil {
		ttu = ttu.SetGameID(*id)
	}
	return ttu
}

// SetGame sets the "game" edge to the Game entity.
func (ttu *TransferTransactionUpdate) SetGame(g *Game) *TransferTransactionUpdate {
	return ttu.SetGameID(g.ID)
}

// Mutation returns the TransferTransactionMutation object of the builder.
func (ttu *TransferTransactionUpdate) Mutation() *TransferTransactionMutation {
	return ttu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ttu *TransferTransactionUpdate) ClearOwner() *TransferTransactionUpdate {
	ttu.mutation.ClearOwner()
	return ttu
}

// ClearGame clears the "game" edge to the Game entity.
func (ttu *TransferTransactionUpdate) ClearGame() *TransferTransactionUpdate {
	ttu.mutation.ClearGame()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TransferTransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransferTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			if ttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TransferTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TransferTransactionUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TransferTransactionUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TransferTransactionUpdate) check() error {
	if v, ok := ttu.mutation.Status(); ok {
		if err := transfertransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := ttu.mutation.TxnType(); ok {
		if err := transfertransaction.TxnTypeValidator(v); err != nil {
			return &ValidationError{Name: "txn_type", err: fmt.Errorf("ent: validator failed for field \"txn_type\": %w", err)}
		}
	}
	return nil
}

func (ttu *TransferTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfertransaction.Table,
			Columns: transfertransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transfertransaction.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfertransaction.FieldUUID,
		})
	}
	if value, ok := ttu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: transfertransaction.FieldAmount,
		})
	}
	if value, ok := ttu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: transfertransaction.FieldAmount,
		})
	}
	if value, ok := ttu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: transfertransaction.FieldStatus,
		})
	}
	if value, ok := ttu.mutation.TxnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: transfertransaction.FieldTxnType,
		})
	}
	if value, ok := ttu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transfertransaction.FieldCreatedAt,
		})
	}
	if value, ok := ttu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transfertransaction.FieldUpdatedAt,
		})
	}
	if ttu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.OwnerTable,
			Columns: []string{transfertransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.OwnerTable,
			Columns: []string{transfertransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.GameTable,
			Columns: []string{transfertransaction.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.GameTable,
			Columns: []string{transfertransaction.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfertransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TransferTransactionUpdateOne is the builder for updating a single TransferTransaction entity.
type TransferTransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransferTransactionMutation
}

// SetUUID sets the "uuid" field.
func (ttuo *TransferTransactionUpdateOne) SetUUID(u uuid.UUID) *TransferTransactionUpdateOne {
	ttuo.mutation.SetUUID(u)
	return ttuo
}

// SetAmount sets the "amount" field.
func (ttuo *TransferTransactionUpdateOne) SetAmount(f float32) *TransferTransactionUpdateOne {
	ttuo.mutation.ResetAmount()
	ttuo.mutation.SetAmount(f)
	return ttuo
}

// AddAmount adds f to the "amount" field.
func (ttuo *TransferTransactionUpdateOne) AddAmount(f float32) *TransferTransactionUpdateOne {
	ttuo.mutation.AddAmount(f)
	return ttuo
}

// SetStatus sets the "status" field.
func (ttuo *TransferTransactionUpdateOne) SetStatus(t transfertransaction.Status) *TransferTransactionUpdateOne {
	ttuo.mutation.SetStatus(t)
	return ttuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttuo *TransferTransactionUpdateOne) SetNillableStatus(t *transfertransaction.Status) *TransferTransactionUpdateOne {
	if t != nil {
		ttuo.SetStatus(*t)
	}
	return ttuo
}

// SetTxnType sets the "txn_type" field.
func (ttuo *TransferTransactionUpdateOne) SetTxnType(tt transfertransaction.TxnType) *TransferTransactionUpdateOne {
	ttuo.mutation.SetTxnType(tt)
	return ttuo
}

// SetNillableTxnType sets the "txn_type" field if the given value is not nil.
func (ttuo *TransferTransactionUpdateOne) SetNillableTxnType(tt *transfertransaction.TxnType) *TransferTransactionUpdateOne {
	if tt != nil {
		ttuo.SetTxnType(*tt)
	}
	return ttuo
}

// SetCreatedAt sets the "created_at" field.
func (ttuo *TransferTransactionUpdateOne) SetCreatedAt(t time.Time) *TransferTransactionUpdateOne {
	ttuo.mutation.SetCreatedAt(t)
	return ttuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttuo *TransferTransactionUpdateOne) SetNillableCreatedAt(t *time.Time) *TransferTransactionUpdateOne {
	if t != nil {
		ttuo.SetCreatedAt(*t)
	}
	return ttuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ttuo *TransferTransactionUpdateOne) SetUpdatedAt(t time.Time) *TransferTransactionUpdateOne {
	ttuo.mutation.SetUpdatedAt(t)
	return ttuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttuo *TransferTransactionUpdateOne) SetNillableUpdatedAt(t *time.Time) *TransferTransactionUpdateOne {
	if t != nil {
		ttuo.SetUpdatedAt(*t)
	}
	return ttuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ttuo *TransferTransactionUpdateOne) SetOwnerID(id int) *TransferTransactionUpdateOne {
	ttuo.mutation.SetOwnerID(id)
	return ttuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ttuo *TransferTransactionUpdateOne) SetNillableOwnerID(id *int) *TransferTransactionUpdateOne {
	if id != nil {
		ttuo = ttuo.SetOwnerID(*id)
	}
	return ttuo
}

// SetOwner sets the "owner" edge to the User entity.
func (ttuo *TransferTransactionUpdateOne) SetOwner(u *User) *TransferTransactionUpdateOne {
	return ttuo.SetOwnerID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (ttuo *TransferTransactionUpdateOne) SetGameID(id int) *TransferTransactionUpdateOne {
	ttuo.mutation.SetGameID(id)
	return ttuo
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (ttuo *TransferTransactionUpdateOne) SetNillableGameID(id *int) *TransferTransactionUpdateOne {
	if id != nil {
		ttuo = ttuo.SetGameID(*id)
	}
	return ttuo
}

// SetGame sets the "game" edge to the Game entity.
func (ttuo *TransferTransactionUpdateOne) SetGame(g *Game) *TransferTransactionUpdateOne {
	return ttuo.SetGameID(g.ID)
}

// Mutation returns the TransferTransactionMutation object of the builder.
func (ttuo *TransferTransactionUpdateOne) Mutation() *TransferTransactionMutation {
	return ttuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ttuo *TransferTransactionUpdateOne) ClearOwner() *TransferTransactionUpdateOne {
	ttuo.mutation.ClearOwner()
	return ttuo
}

// ClearGame clears the "game" edge to the Game entity.
func (ttuo *TransferTransactionUpdateOne) ClearGame() *TransferTransactionUpdateOne {
	ttuo.mutation.ClearGame()
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TransferTransactionUpdateOne) Select(field string, fields ...string) *TransferTransactionUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TransferTransaction entity.
func (ttuo *TransferTransactionUpdateOne) Save(ctx context.Context) (*TransferTransaction, error) {
	var (
		err  error
		node *TransferTransaction
	)
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransferTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			if ttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TransferTransactionUpdateOne) SaveX(ctx context.Context) *TransferTransaction {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TransferTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TransferTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TransferTransactionUpdateOne) check() error {
	if v, ok := ttuo.mutation.Status(); ok {
		if err := transfertransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := ttuo.mutation.TxnType(); ok {
		if err := transfertransaction.TxnTypeValidator(v); err != nil {
			return &ValidationError{Name: "txn_type", err: fmt.Errorf("ent: validator failed for field \"txn_type\": %w", err)}
		}
	}
	return nil
}

func (ttuo *TransferTransactionUpdateOne) sqlSave(ctx context.Context) (_node *TransferTransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfertransaction.Table,
			Columns: transfertransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transfertransaction.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TransferTransaction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfertransaction.FieldID)
		for _, f := range fields {
			if !transfertransaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfertransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfertransaction.FieldUUID,
		})
	}
	if value, ok := ttuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: transfertransaction.FieldAmount,
		})
	}
	if value, ok := ttuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: transfertransaction.FieldAmount,
		})
	}
	if value, ok := ttuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: transfertransaction.FieldStatus,
		})
	}
	if value, ok := ttuo.mutation.TxnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: transfertransaction.FieldTxnType,
		})
	}
	if value, ok := ttuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transfertransaction.FieldCreatedAt,
		})
	}
	if value, ok := ttuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transfertransaction.FieldUpdatedAt,
		})
	}
	if ttuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.OwnerTable,
			Columns: []string{transfertransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.OwnerTable,
			Columns: []string{transfertransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.GameTable,
			Columns: []string{transfertransaction.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transfertransaction.GameTable,
			Columns: []string{transfertransaction.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TransferTransaction{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfertransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
