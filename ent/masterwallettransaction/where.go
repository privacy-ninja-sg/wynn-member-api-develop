// Code generated by entc, DO NOT EDIT.

package masterwallettransaction

import (
	"time"
	"wynn-member-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// Debit applies equality check predicate on the "debit" field. It's identical to DebitEQ.
func Debit(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDebit), v))
	})
}

// Credit applies equality check predicate on the "credit" field. It's identical to CreditEQ.
func Credit(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// DebitEQ applies the EQ predicate on the "debit" field.
func DebitEQ(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDebit), v))
	})
}

// DebitNEQ applies the NEQ predicate on the "debit" field.
func DebitNEQ(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDebit), v))
	})
}

// DebitIn applies the In predicate on the "debit" field.
func DebitIn(vs ...float32) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDebit), v...))
	})
}

// DebitNotIn applies the NotIn predicate on the "debit" field.
func DebitNotIn(vs ...float32) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDebit), v...))
	})
}

// DebitGT applies the GT predicate on the "debit" field.
func DebitGT(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDebit), v))
	})
}

// DebitGTE applies the GTE predicate on the "debit" field.
func DebitGTE(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDebit), v))
	})
}

// DebitLT applies the LT predicate on the "debit" field.
func DebitLT(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDebit), v))
	})
}

// DebitLTE applies the LTE predicate on the "debit" field.
func DebitLTE(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDebit), v))
	})
}

// CreditEQ applies the EQ predicate on the "credit" field.
func CreditEQ(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// CreditNEQ applies the NEQ predicate on the "credit" field.
func CreditNEQ(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCredit), v))
	})
}

// CreditIn applies the In predicate on the "credit" field.
func CreditIn(vs ...float32) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCredit), v...))
	})
}

// CreditNotIn applies the NotIn predicate on the "credit" field.
func CreditNotIn(vs ...float32) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCredit), v...))
	})
}

// CreditGT applies the GT predicate on the "credit" field.
func CreditGT(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCredit), v))
	})
}

// CreditGTE applies the GTE predicate on the "credit" field.
func CreditGTE(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCredit), v))
	})
}

// CreditLT applies the LT predicate on the "credit" field.
func CreditLT(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCredit), v))
	})
}

// CreditLTE applies the LTE predicate on the "credit" field.
func CreditLTE(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCredit), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float32) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float32) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float32) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// TxnTypeEQ applies the EQ predicate on the "txn_type" field.
func TxnTypeEQ(v TxnType) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxnType), v))
	})
}

// TxnTypeNEQ applies the NEQ predicate on the "txn_type" field.
func TxnTypeNEQ(v TxnType) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxnType), v))
	})
}

// TxnTypeIn applies the In predicate on the "txn_type" field.
func TxnTypeIn(vs ...TxnType) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTxnType), v...))
	})
}

// TxnTypeNotIn applies the NotIn predicate on the "txn_type" field.
func TxnTypeNotIn(vs ...TxnType) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTxnType), v...))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MasterWalletTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MasterWalletTransaction {
	vc := time.Time(v)
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), vc))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MasterWalletTransaction) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MasterWalletTransaction) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MasterWalletTransaction) predicate.MasterWalletTransaction {
	return predicate.MasterWalletTransaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
