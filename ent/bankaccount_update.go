// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/bank"
	"wynn-member-api/ent/bankaccount"
	"wynn-member-api/ent/predicate"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BankAccountUpdate is the builder for updating BankAccount entities.
type BankAccountUpdate struct {
	config
	hooks    []Hook
	mutation *BankAccountMutation
}

// Where appends a list predicates to the BankAccountUpdate builder.
func (bau *BankAccountUpdate) Where(ps ...predicate.BankAccount) *BankAccountUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetUUID sets the "uuid" field.
func (bau *BankAccountUpdate) SetUUID(u uuid.UUID) *BankAccountUpdate {
	bau.mutation.SetUUID(u)
	return bau
}

// SetBankAccountID sets the "bank_account_id" field.
func (bau *BankAccountUpdate) SetBankAccountID(s string) *BankAccountUpdate {
	bau.mutation.SetBankAccountID(s)
	return bau
}

// SetBankAccountIDLast sets the "bank_account_id_last" field.
func (bau *BankAccountUpdate) SetBankAccountIDLast(s string) *BankAccountUpdate {
	bau.mutation.SetBankAccountIDLast(s)
	return bau
}

// SetBankAccountName sets the "bank_account_name" field.
func (bau *BankAccountUpdate) SetBankAccountName(s string) *BankAccountUpdate {
	bau.mutation.SetBankAccountName(s)
	return bau
}

// SetStatus sets the "status" field.
func (bau *BankAccountUpdate) SetStatus(b bankaccount.Status) *BankAccountUpdate {
	bau.mutation.SetStatus(b)
	return bau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableStatus(b *bankaccount.Status) *BankAccountUpdate {
	if b != nil {
		bau.SetStatus(*b)
	}
	return bau
}

// SetBankCode sets the "bank_code" field.
func (bau *BankAccountUpdate) SetBankCode(s string) *BankAccountUpdate {
	bau.mutation.SetBankCode(s)
	return bau
}

// SetNillableBankCode sets the "bank_code" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableBankCode(s *string) *BankAccountUpdate {
	if s != nil {
		bau.SetBankCode(*s)
	}
	return bau
}

// ClearBankCode clears the value of the "bank_code" field.
func (bau *BankAccountUpdate) ClearBankCode() *BankAccountUpdate {
	bau.mutation.ClearBankCode()
	return bau
}

// SetCreatedAt sets the "created_at" field.
func (bau *BankAccountUpdate) SetCreatedAt(t time.Time) *BankAccountUpdate {
	bau.mutation.SetCreatedAt(t)
	return bau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableCreatedAt(t *time.Time) *BankAccountUpdate {
	if t != nil {
		bau.SetCreatedAt(*t)
	}
	return bau
}

// SetUpdatedAt sets the "updated_at" field.
func (bau *BankAccountUpdate) SetUpdatedAt(t time.Time) *BankAccountUpdate {
	bau.mutation.SetUpdatedAt(t)
	return bau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableUpdatedAt(t *time.Time) *BankAccountUpdate {
	if t != nil {
		bau.SetUpdatedAt(*t)
	}
	return bau
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bau *BankAccountUpdate) SetOwnerID(id int) *BankAccountUpdate {
	bau.mutation.SetOwnerID(id)
	return bau
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableOwnerID(id *int) *BankAccountUpdate {
	if id != nil {
		bau = bau.SetOwnerID(*id)
	}
	return bau
}

// SetOwner sets the "owner" edge to the User entity.
func (bau *BankAccountUpdate) SetOwner(u *User) *BankAccountUpdate {
	return bau.SetOwnerID(u.ID)
}

// SetBankID sets the "bank" edge to the Bank entity by ID.
func (bau *BankAccountUpdate) SetBankID(id int) *BankAccountUpdate {
	bau.mutation.SetBankID(id)
	return bau
}

// SetNillableBankID sets the "bank" edge to the Bank entity by ID if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableBankID(id *int) *BankAccountUpdate {
	if id != nil {
		bau = bau.SetBankID(*id)
	}
	return bau
}

// SetBank sets the "bank" edge to the Bank entity.
func (bau *BankAccountUpdate) SetBank(b *Bank) *BankAccountUpdate {
	return bau.SetBankID(b.ID)
}

// Mutation returns the BankAccountMutation object of the builder.
func (bau *BankAccountUpdate) Mutation() *BankAccountMutation {
	return bau.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (bau *BankAccountUpdate) ClearOwner() *BankAccountUpdate {
	bau.mutation.ClearOwner()
	return bau
}

// ClearBank clears the "bank" edge to the Bank entity.
func (bau *BankAccountUpdate) ClearBank() *BankAccountUpdate {
	bau.mutation.ClearBank()
	return bau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BankAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bau.hooks) == 0 {
		if err = bau.check(); err != nil {
			return 0, err
		}
		affected, err = bau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bau.check(); err != nil {
				return 0, err
			}
			bau.mutation = mutation
			affected, err = bau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bau.hooks) - 1; i >= 0; i-- {
			if bau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BankAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BankAccountUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BankAccountUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bau *BankAccountUpdate) check() error {
	if v, ok := bau.mutation.BankAccountIDLast(); ok {
		if err := bankaccount.BankAccountIDLastValidator(v); err != nil {
			return &ValidationError{Name: "bank_account_id_last", err: fmt.Errorf("ent: validator failed for field \"bank_account_id_last\": %w", err)}
		}
	}
	if v, ok := bau.mutation.Status(); ok {
		if err := bankaccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (bau *BankAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankaccount.Table,
			Columns: bankaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bankaccount.FieldID,
			},
		},
	}
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bankaccount.FieldUUID,
		})
	}
	if value, ok := bau.mutation.BankAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountID,
		})
	}
	if value, ok := bau.mutation.BankAccountIDLast(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountIDLast,
		})
	}
	if value, ok := bau.mutation.BankAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountName,
		})
	}
	if value, ok := bau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: bankaccount.FieldStatus,
		})
	}
	if value, ok := bau.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankCode,
		})
	}
	if bau.mutation.BankCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankaccount.FieldBankCode,
		})
	}
	if value, ok := bau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bankaccount.FieldCreatedAt,
		})
	}
	if value, ok := bau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bankaccount.FieldUpdatedAt,
		})
	}
	if bau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.OwnerTable,
			Columns: []string{bankaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.OwnerTable,
			Columns: []string{bankaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.BankTable,
			Columns: []string{bankaccount.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.BankTable,
			Columns: []string{bankaccount.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BankAccountUpdateOne is the builder for updating a single BankAccount entity.
type BankAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankAccountMutation
}

// SetUUID sets the "uuid" field.
func (bauo *BankAccountUpdateOne) SetUUID(u uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.SetUUID(u)
	return bauo
}

// SetBankAccountID sets the "bank_account_id" field.
func (bauo *BankAccountUpdateOne) SetBankAccountID(s string) *BankAccountUpdateOne {
	bauo.mutation.SetBankAccountID(s)
	return bauo
}

// SetBankAccountIDLast sets the "bank_account_id_last" field.
func (bauo *BankAccountUpdateOne) SetBankAccountIDLast(s string) *BankAccountUpdateOne {
	bauo.mutation.SetBankAccountIDLast(s)
	return bauo
}

// SetBankAccountName sets the "bank_account_name" field.
func (bauo *BankAccountUpdateOne) SetBankAccountName(s string) *BankAccountUpdateOne {
	bauo.mutation.SetBankAccountName(s)
	return bauo
}

// SetStatus sets the "status" field.
func (bauo *BankAccountUpdateOne) SetStatus(b bankaccount.Status) *BankAccountUpdateOne {
	bauo.mutation.SetStatus(b)
	return bauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableStatus(b *bankaccount.Status) *BankAccountUpdateOne {
	if b != nil {
		bauo.SetStatus(*b)
	}
	return bauo
}

// SetBankCode sets the "bank_code" field.
func (bauo *BankAccountUpdateOne) SetBankCode(s string) *BankAccountUpdateOne {
	bauo.mutation.SetBankCode(s)
	return bauo
}

// SetNillableBankCode sets the "bank_code" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableBankCode(s *string) *BankAccountUpdateOne {
	if s != nil {
		bauo.SetBankCode(*s)
	}
	return bauo
}

// ClearBankCode clears the value of the "bank_code" field.
func (bauo *BankAccountUpdateOne) ClearBankCode() *BankAccountUpdateOne {
	bauo.mutation.ClearBankCode()
	return bauo
}

// SetCreatedAt sets the "created_at" field.
func (bauo *BankAccountUpdateOne) SetCreatedAt(t time.Time) *BankAccountUpdateOne {
	bauo.mutation.SetCreatedAt(t)
	return bauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *BankAccountUpdateOne {
	if t != nil {
		bauo.SetCreatedAt(*t)
	}
	return bauo
}

// SetUpdatedAt sets the "updated_at" field.
func (bauo *BankAccountUpdateOne) SetUpdatedAt(t time.Time) *BankAccountUpdateOne {
	bauo.mutation.SetUpdatedAt(t)
	return bauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *BankAccountUpdateOne {
	if t != nil {
		bauo.SetUpdatedAt(*t)
	}
	return bauo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bauo *BankAccountUpdateOne) SetOwnerID(id int) *BankAccountUpdateOne {
	bauo.mutation.SetOwnerID(id)
	return bauo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableOwnerID(id *int) *BankAccountUpdateOne {
	if id != nil {
		bauo = bauo.SetOwnerID(*id)
	}
	return bauo
}

// SetOwner sets the "owner" edge to the User entity.
func (bauo *BankAccountUpdateOne) SetOwner(u *User) *BankAccountUpdateOne {
	return bauo.SetOwnerID(u.ID)
}

// SetBankID sets the "bank" edge to the Bank entity by ID.
func (bauo *BankAccountUpdateOne) SetBankID(id int) *BankAccountUpdateOne {
	bauo.mutation.SetBankID(id)
	return bauo
}

// SetNillableBankID sets the "bank" edge to the Bank entity by ID if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableBankID(id *int) *BankAccountUpdateOne {
	if id != nil {
		bauo = bauo.SetBankID(*id)
	}
	return bauo
}

// SetBank sets the "bank" edge to the Bank entity.
func (bauo *BankAccountUpdateOne) SetBank(b *Bank) *BankAccountUpdateOne {
	return bauo.SetBankID(b.ID)
}

// Mutation returns the BankAccountMutation object of the builder.
func (bauo *BankAccountUpdateOne) Mutation() *BankAccountMutation {
	return bauo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (bauo *BankAccountUpdateOne) ClearOwner() *BankAccountUpdateOne {
	bauo.mutation.ClearOwner()
	return bauo
}

// ClearBank clears the "bank" edge to the Bank entity.
func (bauo *BankAccountUpdateOne) ClearBank() *BankAccountUpdateOne {
	bauo.mutation.ClearBank()
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BankAccountUpdateOne) Select(field string, fields ...string) *BankAccountUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BankAccount entity.
func (bauo *BankAccountUpdateOne) Save(ctx context.Context) (*BankAccount, error) {
	var (
		err  error
		node *BankAccount
	)
	if len(bauo.hooks) == 0 {
		if err = bauo.check(); err != nil {
			return nil, err
		}
		node, err = bauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bauo.check(); err != nil {
				return nil, err
			}
			bauo.mutation = mutation
			node, err = bauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bauo.hooks) - 1; i >= 0; i-- {
			if bauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) SaveX(ctx context.Context) *BankAccount {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BankAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bauo *BankAccountUpdateOne) check() error {
	if v, ok := bauo.mutation.BankAccountIDLast(); ok {
		if err := bankaccount.BankAccountIDLastValidator(v); err != nil {
			return &ValidationError{Name: "bank_account_id_last", err: fmt.Errorf("ent: validator failed for field \"bank_account_id_last\": %w", err)}
		}
	}
	if v, ok := bauo.mutation.Status(); ok {
		if err := bankaccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (bauo *BankAccountUpdateOne) sqlSave(ctx context.Context) (_node *BankAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankaccount.Table,
			Columns: bankaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bankaccount.FieldID,
			},
		},
	}
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BankAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bankaccount.FieldID)
		for _, f := range fields {
			if !bankaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bankaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bankaccount.FieldUUID,
		})
	}
	if value, ok := bauo.mutation.BankAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountID,
		})
	}
	if value, ok := bauo.mutation.BankAccountIDLast(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountIDLast,
		})
	}
	if value, ok := bauo.mutation.BankAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountName,
		})
	}
	if value, ok := bauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: bankaccount.FieldStatus,
		})
	}
	if value, ok := bauo.mutation.BankCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankCode,
		})
	}
	if bauo.mutation.BankCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bankaccount.FieldBankCode,
		})
	}
	if value, ok := bauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bankaccount.FieldCreatedAt,
		})
	}
	if value, ok := bauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bankaccount.FieldUpdatedAt,
		})
	}
	if bauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.OwnerTable,
			Columns: []string{bankaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.OwnerTable,
			Columns: []string{bankaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.BankTable,
			Columns: []string{bankaccount.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.BankTable,
			Columns: []string{bankaccount.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BankAccount{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
