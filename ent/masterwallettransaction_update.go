// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/masterwallettransaction"
	"wynn-member-api/ent/predicate"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MasterWalletTransactionUpdate is the builder for updating MasterWalletTransaction entities.
type MasterWalletTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *MasterWalletTransactionMutation
}

// Where appends a list predicates to the MasterWalletTransactionUpdate builder.
func (mwtu *MasterWalletTransactionUpdate) Where(ps ...predicate.MasterWalletTransaction) *MasterWalletTransactionUpdate {
	mwtu.mutation.Where(ps...)
	return mwtu
}

// SetUUID sets the "uuid" field.
func (mwtu *MasterWalletTransactionUpdate) SetUUID(u uuid.UUID) *MasterWalletTransactionUpdate {
	mwtu.mutation.SetUUID(u)
	return mwtu
}

// SetDebit sets the "debit" field.
func (mwtu *MasterWalletTransactionUpdate) SetDebit(f float32) *MasterWalletTransactionUpdate {
	mwtu.mutation.ResetDebit()
	mwtu.mutation.SetDebit(f)
	return mwtu
}

// SetNillableDebit sets the "debit" field if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableDebit(f *float32) *MasterWalletTransactionUpdate {
	if f != nil {
		mwtu.SetDebit(*f)
	}
	return mwtu
}

// AddDebit adds f to the "debit" field.
func (mwtu *MasterWalletTransactionUpdate) AddDebit(f float32) *MasterWalletTransactionUpdate {
	mwtu.mutation.AddDebit(f)
	return mwtu
}

// SetCredit sets the "credit" field.
func (mwtu *MasterWalletTransactionUpdate) SetCredit(f float32) *MasterWalletTransactionUpdate {
	mwtu.mutation.ResetCredit()
	mwtu.mutation.SetCredit(f)
	return mwtu
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableCredit(f *float32) *MasterWalletTransactionUpdate {
	if f != nil {
		mwtu.SetCredit(*f)
	}
	return mwtu
}

// AddCredit adds f to the "credit" field.
func (mwtu *MasterWalletTransactionUpdate) AddCredit(f float32) *MasterWalletTransactionUpdate {
	mwtu.mutation.AddCredit(f)
	return mwtu
}

// SetBalance sets the "balance" field.
func (mwtu *MasterWalletTransactionUpdate) SetBalance(f float32) *MasterWalletTransactionUpdate {
	mwtu.mutation.ResetBalance()
	mwtu.mutation.SetBalance(f)
	return mwtu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableBalance(f *float32) *MasterWalletTransactionUpdate {
	if f != nil {
		mwtu.SetBalance(*f)
	}
	return mwtu
}

// AddBalance adds f to the "balance" field.
func (mwtu *MasterWalletTransactionUpdate) AddBalance(f float32) *MasterWalletTransactionUpdate {
	mwtu.mutation.AddBalance(f)
	return mwtu
}

// SetRemark sets the "remark" field.
func (mwtu *MasterWalletTransactionUpdate) SetRemark(s string) *MasterWalletTransactionUpdate {
	mwtu.mutation.SetRemark(s)
	return mwtu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableRemark(s *string) *MasterWalletTransactionUpdate {
	if s != nil {
		mwtu.SetRemark(*s)
	}
	return mwtu
}

// ClearRemark clears the value of the "remark" field.
func (mwtu *MasterWalletTransactionUpdate) ClearRemark() *MasterWalletTransactionUpdate {
	mwtu.mutation.ClearRemark()
	return mwtu
}

// SetTxnType sets the "txn_type" field.
func (mwtu *MasterWalletTransactionUpdate) SetTxnType(mt masterwallettransaction.TxnType) *MasterWalletTransactionUpdate {
	mwtu.mutation.SetTxnType(mt)
	return mwtu
}

// SetStatus sets the "status" field.
func (mwtu *MasterWalletTransactionUpdate) SetStatus(m masterwallettransaction.Status) *MasterWalletTransactionUpdate {
	mwtu.mutation.SetStatus(m)
	return mwtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableStatus(m *masterwallettransaction.Status) *MasterWalletTransactionUpdate {
	if m != nil {
		mwtu.SetStatus(*m)
	}
	return mwtu
}

// SetCreatedAt sets the "created_at" field.
func (mwtu *MasterWalletTransactionUpdate) SetCreatedAt(t time.Time) *MasterWalletTransactionUpdate {
	mwtu.mutation.SetCreatedAt(t)
	return mwtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableCreatedAt(t *time.Time) *MasterWalletTransactionUpdate {
	if t != nil {
		mwtu.SetCreatedAt(*t)
	}
	return mwtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mwtu *MasterWalletTransactionUpdate) SetUpdatedAt(t time.Time) *MasterWalletTransactionUpdate {
	mwtu.mutation.SetUpdatedAt(t)
	return mwtu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableUpdatedAt(t *time.Time) *MasterWalletTransactionUpdate {
	if t != nil {
		mwtu.SetUpdatedAt(*t)
	}
	return mwtu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (mwtu *MasterWalletTransactionUpdate) SetOwnerID(id int) *MasterWalletTransactionUpdate {
	mwtu.mutation.SetOwnerID(id)
	return mwtu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (mwtu *MasterWalletTransactionUpdate) SetNillableOwnerID(id *int) *MasterWalletTransactionUpdate {
	if id != nil {
		mwtu = mwtu.SetOwnerID(*id)
	}
	return mwtu
}

// SetOwner sets the "owner" edge to the User entity.
func (mwtu *MasterWalletTransactionUpdate) SetOwner(u *User) *MasterWalletTransactionUpdate {
	return mwtu.SetOwnerID(u.ID)
}

// Mutation returns the MasterWalletTransactionMutation object of the builder.
func (mwtu *MasterWalletTransactionUpdate) Mutation() *MasterWalletTransactionMutation {
	return mwtu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (mwtu *MasterWalletTransactionUpdate) ClearOwner() *MasterWalletTransactionUpdate {
	mwtu.mutation.ClearOwner()
	return mwtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mwtu *MasterWalletTransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mwtu.hooks) == 0 {
		if err = mwtu.check(); err != nil {
			return 0, err
		}
		affected, err = mwtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MasterWalletTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mwtu.check(); err != nil {
				return 0, err
			}
			mwtu.mutation = mutation
			affected, err = mwtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mwtu.hooks) - 1; i >= 0; i-- {
			if mwtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mwtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mwtu *MasterWalletTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := mwtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mwtu *MasterWalletTransactionUpdate) Exec(ctx context.Context) error {
	_, err := mwtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwtu *MasterWalletTransactionUpdate) ExecX(ctx context.Context) {
	if err := mwtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mwtu *MasterWalletTransactionUpdate) check() error {
	if v, ok := mwtu.mutation.TxnType(); ok {
		if err := masterwallettransaction.TxnTypeValidator(v); err != nil {
			return &ValidationError{Name: "txn_type", err: fmt.Errorf("ent: validator failed for field \"txn_type\": %w", err)}
		}
	}
	if v, ok := mwtu.mutation.Status(); ok {
		if err := masterwallettransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (mwtu *MasterWalletTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   masterwallettransaction.Table,
			Columns: masterwallettransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: masterwallettransaction.FieldID,
			},
		},
	}
	if ps := mwtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mwtu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: masterwallettransaction.FieldUUID,
		})
	}
	if value, ok := mwtu.mutation.Debit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldDebit,
		})
	}
	if value, ok := mwtu.mutation.AddedDebit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldDebit,
		})
	}
	if value, ok := mwtu.mutation.Credit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldCredit,
		})
	}
	if value, ok := mwtu.mutation.AddedCredit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldCredit,
		})
	}
	if value, ok := mwtu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldBalance,
		})
	}
	if value, ok := mwtu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldBalance,
		})
	}
	if value, ok := mwtu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: masterwallettransaction.FieldRemark,
		})
	}
	if mwtu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: masterwallettransaction.FieldRemark,
		})
	}
	if value, ok := mwtu.mutation.TxnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: masterwallettransaction.FieldTxnType,
		})
	}
	if value, ok := mwtu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: masterwallettransaction.FieldStatus,
		})
	}
	if value, ok := mwtu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: masterwallettransaction.FieldCreatedAt,
		})
	}
	if value, ok := mwtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: masterwallettransaction.FieldUpdatedAt,
		})
	}
	if mwtu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masterwallettransaction.OwnerTable,
			Columns: []string{masterwallettransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mwtu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masterwallettransaction.OwnerTable,
			Columns: []string{masterwallettransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mwtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masterwallettransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MasterWalletTransactionUpdateOne is the builder for updating a single MasterWalletTransaction entity.
type MasterWalletTransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MasterWalletTransactionMutation
}

// SetUUID sets the "uuid" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetUUID(u uuid.UUID) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.SetUUID(u)
	return mwtuo
}

// SetDebit sets the "debit" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetDebit(f float32) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.ResetDebit()
	mwtuo.mutation.SetDebit(f)
	return mwtuo
}

// SetNillableDebit sets the "debit" field if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableDebit(f *float32) *MasterWalletTransactionUpdateOne {
	if f != nil {
		mwtuo.SetDebit(*f)
	}
	return mwtuo
}

// AddDebit adds f to the "debit" field.
func (mwtuo *MasterWalletTransactionUpdateOne) AddDebit(f float32) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.AddDebit(f)
	return mwtuo
}

// SetCredit sets the "credit" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetCredit(f float32) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.ResetCredit()
	mwtuo.mutation.SetCredit(f)
	return mwtuo
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableCredit(f *float32) *MasterWalletTransactionUpdateOne {
	if f != nil {
		mwtuo.SetCredit(*f)
	}
	return mwtuo
}

// AddCredit adds f to the "credit" field.
func (mwtuo *MasterWalletTransactionUpdateOne) AddCredit(f float32) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.AddCredit(f)
	return mwtuo
}

// SetBalance sets the "balance" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetBalance(f float32) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.ResetBalance()
	mwtuo.mutation.SetBalance(f)
	return mwtuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableBalance(f *float32) *MasterWalletTransactionUpdateOne {
	if f != nil {
		mwtuo.SetBalance(*f)
	}
	return mwtuo
}

// AddBalance adds f to the "balance" field.
func (mwtuo *MasterWalletTransactionUpdateOne) AddBalance(f float32) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.AddBalance(f)
	return mwtuo
}

// SetRemark sets the "remark" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetRemark(s string) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.SetRemark(s)
	return mwtuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableRemark(s *string) *MasterWalletTransactionUpdateOne {
	if s != nil {
		mwtuo.SetRemark(*s)
	}
	return mwtuo
}

// ClearRemark clears the value of the "remark" field.
func (mwtuo *MasterWalletTransactionUpdateOne) ClearRemark() *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.ClearRemark()
	return mwtuo
}

// SetTxnType sets the "txn_type" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetTxnType(mt masterwallettransaction.TxnType) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.SetTxnType(mt)
	return mwtuo
}

// SetStatus sets the "status" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetStatus(m masterwallettransaction.Status) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.SetStatus(m)
	return mwtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableStatus(m *masterwallettransaction.Status) *MasterWalletTransactionUpdateOne {
	if m != nil {
		mwtuo.SetStatus(*m)
	}
	return mwtuo
}

// SetCreatedAt sets the "created_at" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetCreatedAt(t time.Time) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.SetCreatedAt(t)
	return mwtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableCreatedAt(t *time.Time) *MasterWalletTransactionUpdateOne {
	if t != nil {
		mwtuo.SetCreatedAt(*t)
	}
	return mwtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mwtuo *MasterWalletTransactionUpdateOne) SetUpdatedAt(t time.Time) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.SetUpdatedAt(t)
	return mwtuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableUpdatedAt(t *time.Time) *MasterWalletTransactionUpdateOne {
	if t != nil {
		mwtuo.SetUpdatedAt(*t)
	}
	return mwtuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (mwtuo *MasterWalletTransactionUpdateOne) SetOwnerID(id int) *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.SetOwnerID(id)
	return mwtuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (mwtuo *MasterWalletTransactionUpdateOne) SetNillableOwnerID(id *int) *MasterWalletTransactionUpdateOne {
	if id != nil {
		mwtuo = mwtuo.SetOwnerID(*id)
	}
	return mwtuo
}

// SetOwner sets the "owner" edge to the User entity.
func (mwtuo *MasterWalletTransactionUpdateOne) SetOwner(u *User) *MasterWalletTransactionUpdateOne {
	return mwtuo.SetOwnerID(u.ID)
}

// Mutation returns the MasterWalletTransactionMutation object of the builder.
func (mwtuo *MasterWalletTransactionUpdateOne) Mutation() *MasterWalletTransactionMutation {
	return mwtuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (mwtuo *MasterWalletTransactionUpdateOne) ClearOwner() *MasterWalletTransactionUpdateOne {
	mwtuo.mutation.ClearOwner()
	return mwtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mwtuo *MasterWalletTransactionUpdateOne) Select(field string, fields ...string) *MasterWalletTransactionUpdateOne {
	mwtuo.fields = append([]string{field}, fields...)
	return mwtuo
}

// Save executes the query and returns the updated MasterWalletTransaction entity.
func (mwtuo *MasterWalletTransactionUpdateOne) Save(ctx context.Context) (*MasterWalletTransaction, error) {
	var (
		err  error
		node *MasterWalletTransaction
	)
	if len(mwtuo.hooks) == 0 {
		if err = mwtuo.check(); err != nil {
			return nil, err
		}
		node, err = mwtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MasterWalletTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mwtuo.check(); err != nil {
				return nil, err
			}
			mwtuo.mutation = mutation
			node, err = mwtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mwtuo.hooks) - 1; i >= 0; i-- {
			if mwtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mwtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mwtuo *MasterWalletTransactionUpdateOne) SaveX(ctx context.Context) *MasterWalletTransaction {
	node, err := mwtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mwtuo *MasterWalletTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := mwtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwtuo *MasterWalletTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := mwtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mwtuo *MasterWalletTransactionUpdateOne) check() error {
	if v, ok := mwtuo.mutation.TxnType(); ok {
		if err := masterwallettransaction.TxnTypeValidator(v); err != nil {
			return &ValidationError{Name: "txn_type", err: fmt.Errorf("ent: validator failed for field \"txn_type\": %w", err)}
		}
	}
	if v, ok := mwtuo.mutation.Status(); ok {
		if err := masterwallettransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (mwtuo *MasterWalletTransactionUpdateOne) sqlSave(ctx context.Context) (_node *MasterWalletTransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   masterwallettransaction.Table,
			Columns: masterwallettransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: masterwallettransaction.FieldID,
			},
		},
	}
	id, ok := mwtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MasterWalletTransaction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mwtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, masterwallettransaction.FieldID)
		for _, f := range fields {
			if !masterwallettransaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != masterwallettransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mwtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mwtuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: masterwallettransaction.FieldUUID,
		})
	}
	if value, ok := mwtuo.mutation.Debit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldDebit,
		})
	}
	if value, ok := mwtuo.mutation.AddedDebit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldDebit,
		})
	}
	if value, ok := mwtuo.mutation.Credit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldCredit,
		})
	}
	if value, ok := mwtuo.mutation.AddedCredit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldCredit,
		})
	}
	if value, ok := mwtuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldBalance,
		})
	}
	if value, ok := mwtuo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldBalance,
		})
	}
	if value, ok := mwtuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: masterwallettransaction.FieldRemark,
		})
	}
	if mwtuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: masterwallettransaction.FieldRemark,
		})
	}
	if value, ok := mwtuo.mutation.TxnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: masterwallettransaction.FieldTxnType,
		})
	}
	if value, ok := mwtuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: masterwallettransaction.FieldStatus,
		})
	}
	if value, ok := mwtuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: masterwallettransaction.FieldCreatedAt,
		})
	}
	if value, ok := mwtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: masterwallettransaction.FieldUpdatedAt,
		})
	}
	if mwtuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masterwallettransaction.OwnerTable,
			Columns: []string{masterwallettransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mwtuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masterwallettransaction.OwnerTable,
			Columns: []string{masterwallettransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MasterWalletTransaction{config: mwtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mwtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{masterwallettransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
