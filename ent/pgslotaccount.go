// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/pgslotaccount"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PgSlotAccount is the model entity for the PgSlotAccount schema.
type PgSlotAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// DesktopURI holds the value of the "desktop_uri" field.
	DesktopURI string `json:"desktop_uri,omitempty"`
	// MobileURI holds the value of the "mobile_uri" field.
	MobileURI string `json:"mobile_uri,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RawData holds the value of the "raw_data" field.
	RawData string `json:"raw_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PgSlotAccountQuery when eager-loading is set.
	Edges               PgSlotAccountEdges `json:"edges"`
	game_account_pgslot *int
}

// PgSlotAccountEdges holds the relations/edges for other nodes in the graph.
type PgSlotAccountEdges struct {
	// Owner holds the value of the owner edge.
	Owner *GameAccount `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PgSlotAccountEdges) OwnerOrErr() (*GameAccount, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gameaccount.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PgSlotAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pgslotaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case pgslotaccount.FieldUsername, pgslotaccount.FieldPassword, pgslotaccount.FieldDesktopURI, pgslotaccount.FieldMobileURI, pgslotaccount.FieldRawData:
			values[i] = new(sql.NullString)
		case pgslotaccount.FieldCreatedAt, pgslotaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case pgslotaccount.FieldUUID:
			values[i] = new(uuid.UUID)
		case pgslotaccount.ForeignKeys[0]: // game_account_pgslot
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PgSlotAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PgSlotAccount fields.
func (psa *PgSlotAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pgslotaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			psa.ID = int(value.Int64)
		case pgslotaccount.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				psa.UUID = *value
			}
		case pgslotaccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				psa.Username = value.String
			}
		case pgslotaccount.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				psa.Password = value.String
			}
		case pgslotaccount.FieldDesktopURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desktop_uri", values[i])
			} else if value.Valid {
				psa.DesktopURI = value.String
			}
		case pgslotaccount.FieldMobileURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile_uri", values[i])
			} else if value.Valid {
				psa.MobileURI = value.String
			}
		case pgslotaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				psa.CreatedAt = value.Time
			}
		case pgslotaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				psa.UpdatedAt = value.Time
			}
		case pgslotaccount.FieldRawData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw_data", values[i])
			} else if value.Valid {
				psa.RawData = value.String
			}
		case pgslotaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_account_pgslot", value)
			} else if value.Valid {
				psa.game_account_pgslot = new(int)
				*psa.game_account_pgslot = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the PgSlotAccount entity.
func (psa *PgSlotAccount) QueryOwner() *GameAccountQuery {
	return (&PgSlotAccountClient{config: psa.config}).QueryOwner(psa)
}

// Update returns a builder for updating this PgSlotAccount.
// Note that you need to call PgSlotAccount.Unwrap() before calling this method if this PgSlotAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (psa *PgSlotAccount) Update() *PgSlotAccountUpdateOne {
	return (&PgSlotAccountClient{config: psa.config}).UpdateOne(psa)
}

// Unwrap unwraps the PgSlotAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psa *PgSlotAccount) Unwrap() *PgSlotAccount {
	tx, ok := psa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PgSlotAccount is not a transactional entity")
	}
	psa.config.driver = tx.drv
	return psa
}

// String implements the fmt.Stringer.
func (psa *PgSlotAccount) String() string {
	var builder strings.Builder
	builder.WriteString("PgSlotAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", psa.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", psa.UUID))
	builder.WriteString(", username=")
	builder.WriteString(psa.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", desktop_uri=")
	builder.WriteString(psa.DesktopURI)
	builder.WriteString(", mobile_uri=")
	builder.WriteString(psa.MobileURI)
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", psa.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", psa.UpdatedAt))
	builder.WriteString(", raw_data=")
	builder.WriteString(psa.RawData)
	builder.WriteByte(')')
	return builder.String()
}

// PgSlotAccounts is a parsable slice of PgSlotAccount.
type PgSlotAccounts []*PgSlotAccount

func (psa PgSlotAccounts) config(cfg config) {
	for _i := range psa {
		psa[_i].config = cfg
	}
}
