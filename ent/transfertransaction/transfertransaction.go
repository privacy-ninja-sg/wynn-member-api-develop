// Code generated by entc, DO NOT EDIT.

package transfertransaction

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the transfertransaction type in the database.
	Label = "transfer_transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTxnType holds the string denoting the txn_type field in the database.
	FieldTxnType = "txn_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// Table holds the table name of the transfertransaction in the database.
	Table = "transfer_transactions"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "transfer_transactions"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_transfers"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "transfer_transactions"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_transfers"
)

// Columns holds all SQL columns for transfertransaction fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldAmount,
	FieldStatus,
	FieldTxnType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transfer_transactions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_transfers",
	"user_transfers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusWaiting is the default value of the Status enum.
const DefaultStatus = StatusWaiting

// Status values.
const (
	StatusWaiting      Status = "waiting"
	StatusProcessing   Status = "processing"
	StatusSuccessfully Status = "successfully"
	StatusRejected     Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusWaiting, StatusProcessing, StatusSuccessfully, StatusRejected:
		return nil
	default:
		return fmt.Errorf("transfertransaction: invalid enum value for status field: %q", s)
	}
}

// TxnType defines the type for the "txn_type" enum field.
type TxnType string

// TxnTypeDeposit is the default value of the TxnType enum.
const DefaultTxnType = TxnTypeDeposit

// TxnType values.
const (
	TxnTypeDeposit  TxnType = "deposit"
	TxnTypeWithdraw TxnType = "withdraw"
)

func (tt TxnType) String() string {
	return string(tt)
}

// TxnTypeValidator is a validator for the "txn_type" field enum values. It is called by the builders before save.
func TxnTypeValidator(tt TxnType) error {
	switch tt {
	case TxnTypeDeposit, TxnTypeWithdraw:
		return nil
	default:
		return fmt.Errorf("transfertransaction: invalid enum value for txn_type field: %q", tt)
	}
}
