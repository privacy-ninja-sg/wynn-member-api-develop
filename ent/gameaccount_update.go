// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/game"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/pgslotaccount"
	"wynn-member-api/ent/predicate"
	"wynn-member-api/ent/prettygameaccount"
	"wynn-member-api/ent/sagameaccount"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GameAccountUpdate is the builder for updating GameAccount entities.
type GameAccountUpdate struct {
	config
	hooks    []Hook
	mutation *GameAccountMutation
}

// Where appends a list predicates to the GameAccountUpdate builder.
func (gau *GameAccountUpdate) Where(ps ...predicate.GameAccount) *GameAccountUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetUUID sets the "uuid" field.
func (gau *GameAccountUpdate) SetUUID(u uuid.UUID) *GameAccountUpdate {
	gau.mutation.SetUUID(u)
	return gau
}

// SetCreatedAt sets the "created_at" field.
func (gau *GameAccountUpdate) SetCreatedAt(t time.Time) *GameAccountUpdate {
	gau.mutation.SetCreatedAt(t)
	return gau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableCreatedAt(t *time.Time) *GameAccountUpdate {
	if t != nil {
		gau.SetCreatedAt(*t)
	}
	return gau
}

// SetUpdatedAt sets the "updated_at" field.
func (gau *GameAccountUpdate) SetUpdatedAt(t time.Time) *GameAccountUpdate {
	gau.mutation.SetUpdatedAt(t)
	return gau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableUpdatedAt(t *time.Time) *GameAccountUpdate {
	if t != nil {
		gau.SetUpdatedAt(*t)
	}
	return gau
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gau *GameAccountUpdate) SetOwnerID(id int) *GameAccountUpdate {
	gau.mutation.SetOwnerID(id)
	return gau
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableOwnerID(id *int) *GameAccountUpdate {
	if id != nil {
		gau = gau.SetOwnerID(*id)
	}
	return gau
}

// SetOwner sets the "owner" edge to the User entity.
func (gau *GameAccountUpdate) SetOwner(u *User) *GameAccountUpdate {
	return gau.SetOwnerID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (gau *GameAccountUpdate) SetGameID(id int) *GameAccountUpdate {
	gau.mutation.SetGameID(id)
	return gau
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableGameID(id *int) *GameAccountUpdate {
	if id != nil {
		gau = gau.SetGameID(*id)
	}
	return gau
}

// SetGame sets the "game" edge to the Game entity.
func (gau *GameAccountUpdate) SetGame(g *Game) *GameAccountUpdate {
	return gau.SetGameID(g.ID)
}

// AddPgslotIDs adds the "pgslot" edge to the PgSlotAccount entity by IDs.
func (gau *GameAccountUpdate) AddPgslotIDs(ids ...int) *GameAccountUpdate {
	gau.mutation.AddPgslotIDs(ids...)
	return gau
}

// AddPgslot adds the "pgslot" edges to the PgSlotAccount entity.
func (gau *GameAccountUpdate) AddPgslot(p ...*PgSlotAccount) *GameAccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gau.AddPgslotIDs(ids...)
}

// AddPrettyIDs adds the "pretty" edge to the PrettyGameAccount entity by IDs.
func (gau *GameAccountUpdate) AddPrettyIDs(ids ...int) *GameAccountUpdate {
	gau.mutation.AddPrettyIDs(ids...)
	return gau
}

// AddPretty adds the "pretty" edges to the PrettyGameAccount entity.
func (gau *GameAccountUpdate) AddPretty(p ...*PrettyGameAccount) *GameAccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gau.AddPrettyIDs(ids...)
}

// AddSagameIDs adds the "sagame" edge to the SAGameAccount entity by IDs.
func (gau *GameAccountUpdate) AddSagameIDs(ids ...int) *GameAccountUpdate {
	gau.mutation.AddSagameIDs(ids...)
	return gau
}

// AddSagame adds the "sagame" edges to the SAGameAccount entity.
func (gau *GameAccountUpdate) AddSagame(s ...*SAGameAccount) *GameAccountUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gau.AddSagameIDs(ids...)
}

// Mutation returns the GameAccountMutation object of the builder.
func (gau *GameAccountUpdate) Mutation() *GameAccountMutation {
	return gau.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (gau *GameAccountUpdate) ClearOwner() *GameAccountUpdate {
	gau.mutation.ClearOwner()
	return gau
}

// ClearGame clears the "game" edge to the Game entity.
func (gau *GameAccountUpdate) ClearGame() *GameAccountUpdate {
	gau.mutation.ClearGame()
	return gau
}

// ClearPgslot clears all "pgslot" edges to the PgSlotAccount entity.
func (gau *GameAccountUpdate) ClearPgslot() *GameAccountUpdate {
	gau.mutation.ClearPgslot()
	return gau
}

// RemovePgslotIDs removes the "pgslot" edge to PgSlotAccount entities by IDs.
func (gau *GameAccountUpdate) RemovePgslotIDs(ids ...int) *GameAccountUpdate {
	gau.mutation.RemovePgslotIDs(ids...)
	return gau
}

// RemovePgslot removes "pgslot" edges to PgSlotAccount entities.
func (gau *GameAccountUpdate) RemovePgslot(p ...*PgSlotAccount) *GameAccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gau.RemovePgslotIDs(ids...)
}

// ClearPretty clears all "pretty" edges to the PrettyGameAccount entity.
func (gau *GameAccountUpdate) ClearPretty() *GameAccountUpdate {
	gau.mutation.ClearPretty()
	return gau
}

// RemovePrettyIDs removes the "pretty" edge to PrettyGameAccount entities by IDs.
func (gau *GameAccountUpdate) RemovePrettyIDs(ids ...int) *GameAccountUpdate {
	gau.mutation.RemovePrettyIDs(ids...)
	return gau
}

// RemovePretty removes "pretty" edges to PrettyGameAccount entities.
func (gau *GameAccountUpdate) RemovePretty(p ...*PrettyGameAccount) *GameAccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gau.RemovePrettyIDs(ids...)
}

// ClearSagame clears all "sagame" edges to the SAGameAccount entity.
func (gau *GameAccountUpdate) ClearSagame() *GameAccountUpdate {
	gau.mutation.ClearSagame()
	return gau
}

// RemoveSagameIDs removes the "sagame" edge to SAGameAccount entities by IDs.
func (gau *GameAccountUpdate) RemoveSagameIDs(ids ...int) *GameAccountUpdate {
	gau.mutation.RemoveSagameIDs(ids...)
	return gau
}

// RemoveSagame removes "sagame" edges to SAGameAccount entities.
func (gau *GameAccountUpdate) RemoveSagame(s ...*SAGameAccount) *GameAccountUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gau.RemoveSagameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GameAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gau.hooks) == 0 {
		affected, err = gau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gau.mutation = mutation
			affected, err = gau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gau.hooks) - 1; i >= 0; i-- {
			if gau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GameAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GameAccountUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GameAccountUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gau *GameAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameaccount.Table,
			Columns: gameaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gameaccount.FieldID,
			},
		},
	}
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: gameaccount.FieldUUID,
		})
	}
	if value, ok := gau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameaccount.FieldCreatedAt,
		})
	}
	if value, ok := gau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameaccount.FieldUpdatedAt,
		})
	}
	if gau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.OwnerTable,
			Columns: []string{gameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.OwnerTable,
			Columns: []string{gameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gau.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.GameTable,
			Columns: []string{gameaccount.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.GameTable,
			Columns: []string{gameaccount.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gau.mutation.PgslotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PgslotTable,
			Columns: []string{gameaccount.PgslotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pgslotaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.RemovedPgslotIDs(); len(nodes) > 0 && !gau.mutation.PgslotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PgslotTable,
			Columns: []string{gameaccount.PgslotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pgslotaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.PgslotIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PgslotTable,
			Columns: []string{gameaccount.PgslotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pgslotaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gau.mutation.PrettyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PrettyTable,
			Columns: []string{gameaccount.PrettyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prettygameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.RemovedPrettyIDs(); len(nodes) > 0 && !gau.mutation.PrettyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PrettyTable,
			Columns: []string{gameaccount.PrettyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prettygameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.PrettyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PrettyTable,
			Columns: []string{gameaccount.PrettyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prettygameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gau.mutation.SagameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.SagameTable,
			Columns: []string{gameaccount.SagameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sagameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.RemovedSagameIDs(); len(nodes) > 0 && !gau.mutation.SagameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.SagameTable,
			Columns: []string{gameaccount.SagameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sagameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.SagameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.SagameTable,
			Columns: []string{gameaccount.SagameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sagameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GameAccountUpdateOne is the builder for updating a single GameAccount entity.
type GameAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameAccountMutation
}

// SetUUID sets the "uuid" field.
func (gauo *GameAccountUpdateOne) SetUUID(u uuid.UUID) *GameAccountUpdateOne {
	gauo.mutation.SetUUID(u)
	return gauo
}

// SetCreatedAt sets the "created_at" field.
func (gauo *GameAccountUpdateOne) SetCreatedAt(t time.Time) *GameAccountUpdateOne {
	gauo.mutation.SetCreatedAt(t)
	return gauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *GameAccountUpdateOne {
	if t != nil {
		gauo.SetCreatedAt(*t)
	}
	return gauo
}

// SetUpdatedAt sets the "updated_at" field.
func (gauo *GameAccountUpdateOne) SetUpdatedAt(t time.Time) *GameAccountUpdateOne {
	gauo.mutation.SetUpdatedAt(t)
	return gauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *GameAccountUpdateOne {
	if t != nil {
		gauo.SetUpdatedAt(*t)
	}
	return gauo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gauo *GameAccountUpdateOne) SetOwnerID(id int) *GameAccountUpdateOne {
	gauo.mutation.SetOwnerID(id)
	return gauo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableOwnerID(id *int) *GameAccountUpdateOne {
	if id != nil {
		gauo = gauo.SetOwnerID(*id)
	}
	return gauo
}

// SetOwner sets the "owner" edge to the User entity.
func (gauo *GameAccountUpdateOne) SetOwner(u *User) *GameAccountUpdateOne {
	return gauo.SetOwnerID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (gauo *GameAccountUpdateOne) SetGameID(id int) *GameAccountUpdateOne {
	gauo.mutation.SetGameID(id)
	return gauo
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableGameID(id *int) *GameAccountUpdateOne {
	if id != nil {
		gauo = gauo.SetGameID(*id)
	}
	return gauo
}

// SetGame sets the "game" edge to the Game entity.
func (gauo *GameAccountUpdateOne) SetGame(g *Game) *GameAccountUpdateOne {
	return gauo.SetGameID(g.ID)
}

// AddPgslotIDs adds the "pgslot" edge to the PgSlotAccount entity by IDs.
func (gauo *GameAccountUpdateOne) AddPgslotIDs(ids ...int) *GameAccountUpdateOne {
	gauo.mutation.AddPgslotIDs(ids...)
	return gauo
}

// AddPgslot adds the "pgslot" edges to the PgSlotAccount entity.
func (gauo *GameAccountUpdateOne) AddPgslot(p ...*PgSlotAccount) *GameAccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gauo.AddPgslotIDs(ids...)
}

// AddPrettyIDs adds the "pretty" edge to the PrettyGameAccount entity by IDs.
func (gauo *GameAccountUpdateOne) AddPrettyIDs(ids ...int) *GameAccountUpdateOne {
	gauo.mutation.AddPrettyIDs(ids...)
	return gauo
}

// AddPretty adds the "pretty" edges to the PrettyGameAccount entity.
func (gauo *GameAccountUpdateOne) AddPretty(p ...*PrettyGameAccount) *GameAccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gauo.AddPrettyIDs(ids...)
}

// AddSagameIDs adds the "sagame" edge to the SAGameAccount entity by IDs.
func (gauo *GameAccountUpdateOne) AddSagameIDs(ids ...int) *GameAccountUpdateOne {
	gauo.mutation.AddSagameIDs(ids...)
	return gauo
}

// AddSagame adds the "sagame" edges to the SAGameAccount entity.
func (gauo *GameAccountUpdateOne) AddSagame(s ...*SAGameAccount) *GameAccountUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gauo.AddSagameIDs(ids...)
}

// Mutation returns the GameAccountMutation object of the builder.
func (gauo *GameAccountUpdateOne) Mutation() *GameAccountMutation {
	return gauo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (gauo *GameAccountUpdateOne) ClearOwner() *GameAccountUpdateOne {
	gauo.mutation.ClearOwner()
	return gauo
}

// ClearGame clears the "game" edge to the Game entity.
func (gauo *GameAccountUpdateOne) ClearGame() *GameAccountUpdateOne {
	gauo.mutation.ClearGame()
	return gauo
}

// ClearPgslot clears all "pgslot" edges to the PgSlotAccount entity.
func (gauo *GameAccountUpdateOne) ClearPgslot() *GameAccountUpdateOne {
	gauo.mutation.ClearPgslot()
	return gauo
}

// RemovePgslotIDs removes the "pgslot" edge to PgSlotAccount entities by IDs.
func (gauo *GameAccountUpdateOne) RemovePgslotIDs(ids ...int) *GameAccountUpdateOne {
	gauo.mutation.RemovePgslotIDs(ids...)
	return gauo
}

// RemovePgslot removes "pgslot" edges to PgSlotAccount entities.
func (gauo *GameAccountUpdateOne) RemovePgslot(p ...*PgSlotAccount) *GameAccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gauo.RemovePgslotIDs(ids...)
}

// ClearPretty clears all "pretty" edges to the PrettyGameAccount entity.
func (gauo *GameAccountUpdateOne) ClearPretty() *GameAccountUpdateOne {
	gauo.mutation.ClearPretty()
	return gauo
}

// RemovePrettyIDs removes the "pretty" edge to PrettyGameAccount entities by IDs.
func (gauo *GameAccountUpdateOne) RemovePrettyIDs(ids ...int) *GameAccountUpdateOne {
	gauo.mutation.RemovePrettyIDs(ids...)
	return gauo
}

// RemovePretty removes "pretty" edges to PrettyGameAccount entities.
func (gauo *GameAccountUpdateOne) RemovePretty(p ...*PrettyGameAccount) *GameAccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gauo.RemovePrettyIDs(ids...)
}

// ClearSagame clears all "sagame" edges to the SAGameAccount entity.
func (gauo *GameAccountUpdateOne) ClearSagame() *GameAccountUpdateOne {
	gauo.mutation.ClearSagame()
	return gauo
}

// RemoveSagameIDs removes the "sagame" edge to SAGameAccount entities by IDs.
func (gauo *GameAccountUpdateOne) RemoveSagameIDs(ids ...int) *GameAccountUpdateOne {
	gauo.mutation.RemoveSagameIDs(ids...)
	return gauo
}

// RemoveSagame removes "sagame" edges to SAGameAccount entities.
func (gauo *GameAccountUpdateOne) RemoveSagame(s ...*SAGameAccount) *GameAccountUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gauo.RemoveSagameIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GameAccountUpdateOne) Select(field string, fields ...string) *GameAccountUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GameAccount entity.
func (gauo *GameAccountUpdateOne) Save(ctx context.Context) (*GameAccount, error) {
	var (
		err  error
		node *GameAccount
	)
	if len(gauo.hooks) == 0 {
		node, err = gauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gauo.mutation = mutation
			node, err = gauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gauo.hooks) - 1; i >= 0; i-- {
			if gauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GameAccountUpdateOne) SaveX(ctx context.Context) *GameAccount {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GameAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GameAccountUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gauo *GameAccountUpdateOne) sqlSave(ctx context.Context) (_node *GameAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameaccount.Table,
			Columns: gameaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gameaccount.FieldID,
			},
		},
	}
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GameAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameaccount.FieldID)
		for _, f := range fields {
			if !gameaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gameaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: gameaccount.FieldUUID,
		})
	}
	if value, ok := gauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameaccount.FieldCreatedAt,
		})
	}
	if value, ok := gauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameaccount.FieldUpdatedAt,
		})
	}
	if gauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.OwnerTable,
			Columns: []string{gameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.OwnerTable,
			Columns: []string{gameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gauo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.GameTable,
			Columns: []string{gameaccount.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.GameTable,
			Columns: []string{gameaccount.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gauo.mutation.PgslotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PgslotTable,
			Columns: []string{gameaccount.PgslotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pgslotaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.RemovedPgslotIDs(); len(nodes) > 0 && !gauo.mutation.PgslotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PgslotTable,
			Columns: []string{gameaccount.PgslotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pgslotaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.PgslotIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PgslotTable,
			Columns: []string{gameaccount.PgslotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pgslotaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gauo.mutation.PrettyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PrettyTable,
			Columns: []string{gameaccount.PrettyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prettygameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.RemovedPrettyIDs(); len(nodes) > 0 && !gauo.mutation.PrettyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PrettyTable,
			Columns: []string{gameaccount.PrettyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prettygameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.PrettyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PrettyTable,
			Columns: []string{gameaccount.PrettyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prettygameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gauo.mutation.SagameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.SagameTable,
			Columns: []string{gameaccount.SagameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sagameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.RemovedSagameIDs(); len(nodes) > 0 && !gauo.mutation.SagameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.SagameTable,
			Columns: []string{gameaccount.SagameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sagameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.SagameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.SagameTable,
			Columns: []string{gameaccount.SagameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sagameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameAccount{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
