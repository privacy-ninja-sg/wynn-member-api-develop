// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccessTokensColumns holds the columns for the "access_tokens" table.
	AccessTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "line_token", Type: field.TypeString, Nullable: true},
		{Name: "access_token", Type: field.TypeString},
		{Name: "token_expire", Type: field.TypeTime},
		{Name: "ip", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_access_token", Type: field.TypeInt, Nullable: true},
	}
	// AccessTokensTable holds the schema information for the "access_tokens" table.
	AccessTokensTable = &schema.Table{
		Name:       "access_tokens",
		Columns:    AccessTokensColumns,
		PrimaryKey: []*schema.Column{AccessTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "access_tokens_users_access_token",
				Columns:    []*schema.Column{AccessTokensColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BanksColumns holds the columns for the "banks" table.
	BanksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "short_name", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "name_th", Type: field.TypeString, Nullable: true},
		{Name: "short_name_th", Type: field.TypeString, Nullable: true},
		{Name: "bank_account_name", Type: field.TypeString, Nullable: true},
		{Name: "logo", Type: field.TypeString, Nullable: true},
		{Name: "bank_id", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"on", "off"}, Default: "off"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// BanksTable holds the schema information for the "banks" table.
	BanksTable = &schema.Table{
		Name:       "banks",
		Columns:    BanksColumns,
		PrimaryKey: []*schema.Column{BanksColumns[0]},
	}
	// BankAccountsColumns holds the columns for the "bank_accounts" table.
	BankAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "bank_account_id", Type: field.TypeString},
		{Name: "bank_account_id_last", Type: field.TypeString, Unique: true, Size: 4},
		{Name: "bank_account_name", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "rejected", "approved"}, Default: "pending"},
		{Name: "bank_code", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "bank_accounts", Type: field.TypeInt, Nullable: true},
		{Name: "user_banks", Type: field.TypeInt, Nullable: true},
	}
	// BankAccountsTable holds the schema information for the "bank_accounts" table.
	BankAccountsTable = &schema.Table{
		Name:       "bank_accounts",
		Columns:    BankAccountsColumns,
		PrimaryKey: []*schema.Column{BankAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bank_accounts_banks_accounts",
				Columns:    []*schema.Column{BankAccountsColumns[9]},
				RefColumns: []*schema.Column{BanksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bank_accounts_users_banks",
				Columns:    []*schema.Column{BankAccountsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ChannelsColumns holds the columns for the "channels" table.
	ChannelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"on", "off"}, Default: "off"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// ChannelsTable holds the schema information for the "channels" table.
	ChannelsTable = &schema.Table{
		Name:       "channels",
		Columns:    ChannelsColumns,
		PrimaryKey: []*schema.Column{ChannelsColumns[0]},
	}
	// GamesColumns holds the columns for the "games" table.
	GamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "banner", Type: field.TypeString, Nullable: true},
		{Name: "desc", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"on", "off"}, Default: "off"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// GamesTable holds the schema information for the "games" table.
	GamesTable = &schema.Table{
		Name:       "games",
		Columns:    GamesColumns,
		PrimaryKey: []*schema.Column{GamesColumns[0]},
	}
	// GameAccountsColumns holds the columns for the "game_accounts" table.
	GameAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "game_accounts", Type: field.TypeInt, Nullable: true},
		{Name: "user_games", Type: field.TypeInt, Nullable: true},
	}
	// GameAccountsTable holds the schema information for the "game_accounts" table.
	GameAccountsTable = &schema.Table{
		Name:       "game_accounts",
		Columns:    GameAccountsColumns,
		PrimaryKey: []*schema.Column{GameAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "game_accounts_games_accounts",
				Columns:    []*schema.Column{GameAccountsColumns[4]},
				RefColumns: []*schema.Column{GamesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "game_accounts_users_games",
				Columns:    []*schema.Column{GameAccountsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LineAccountsColumns holds the columns for the "line_accounts" table.
	LineAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "line_id", Type: field.TypeString, Default: "N/A"},
		{Name: "line_client_id", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_line", Type: field.TypeInt, Nullable: true},
	}
	// LineAccountsTable holds the schema information for the "line_accounts" table.
	LineAccountsTable = &schema.Table{
		Name:       "line_accounts",
		Columns:    LineAccountsColumns,
		PrimaryKey: []*schema.Column{LineAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "line_accounts_users_line",
				Columns:    []*schema.Column{LineAccountsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MasterWalletTransactionsColumns holds the columns for the "master_wallet_transactions" table.
	MasterWalletTransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "debit", Type: field.TypeFloat32, Default: 0},
		{Name: "credit", Type: field.TypeFloat32, Default: 0},
		{Name: "balance", Type: field.TypeFloat32, Default: 0},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "txn_type", Type: field.TypeEnum, Enums: []string{"deposit", "withdraw", "transfer"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"waiting", "pending", "successfully", "rejected"}, Default: "waiting"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_wallet", Type: field.TypeInt, Nullable: true},
	}
	// MasterWalletTransactionsTable holds the schema information for the "master_wallet_transactions" table.
	MasterWalletTransactionsTable = &schema.Table{
		Name:       "master_wallet_transactions",
		Columns:    MasterWalletTransactionsColumns,
		PrimaryKey: []*schema.Column{MasterWalletTransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "master_wallet_transactions_users_wallet",
				Columns:    []*schema.Column{MasterWalletTransactionsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PgSlotAccountsColumns holds the columns for the "pg_slot_accounts" table.
	PgSlotAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "desktop_uri", Type: field.TypeString, Nullable: true},
		{Name: "mobile_uri", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "raw_data", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "game_account_pgslot", Type: field.TypeInt, Nullable: true},
	}
	// PgSlotAccountsTable holds the schema information for the "pg_slot_accounts" table.
	PgSlotAccountsTable = &schema.Table{
		Name:       "pg_slot_accounts",
		Columns:    PgSlotAccountsColumns,
		PrimaryKey: []*schema.Column{PgSlotAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pg_slot_accounts_game_accounts_pgslot",
				Columns:    []*schema.Column{PgSlotAccountsColumns[9]},
				RefColumns: []*schema.Column{GameAccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PrettyGameAccountsColumns holds the columns for the "pretty_game_accounts" table.
	PrettyGameAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "desktop_uri", Type: field.TypeString, Nullable: true},
		{Name: "mobile_uri", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "raw_data", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "game_account_pretty", Type: field.TypeInt, Nullable: true},
	}
	// PrettyGameAccountsTable holds the schema information for the "pretty_game_accounts" table.
	PrettyGameAccountsTable = &schema.Table{
		Name:       "pretty_game_accounts",
		Columns:    PrettyGameAccountsColumns,
		PrimaryKey: []*schema.Column{PrettyGameAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pretty_game_accounts_game_accounts_pretty",
				Columns:    []*schema.Column{PrettyGameAccountsColumns[9]},
				RefColumns: []*schema.Column{GameAccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SaGameAccountsColumns holds the columns for the "sa_game_accounts" table.
	SaGameAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "desktop_uri", Type: field.TypeString, Nullable: true},
		{Name: "mobile_uri", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "raw_data", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "game_account_sagame", Type: field.TypeInt, Nullable: true},
	}
	// SaGameAccountsTable holds the schema information for the "sa_game_accounts" table.
	SaGameAccountsTable = &schema.Table{
		Name:       "sa_game_accounts",
		Columns:    SaGameAccountsColumns,
		PrimaryKey: []*schema.Column{SaGameAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sa_game_accounts_game_accounts_sagame",
				Columns:    []*schema.Column{SaGameAccountsColumns[9]},
				RefColumns: []*schema.Column{GameAccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransferTransactionsColumns holds the columns for the "transfer_transactions" table.
	TransferTransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "amount", Type: field.TypeFloat32},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"waiting", "processing", "successfully", "rejected"}, Default: "waiting"},
		{Name: "txn_type", Type: field.TypeEnum, Enums: []string{"deposit", "withdraw"}, Default: "deposit"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "game_transfers", Type: field.TypeInt, Nullable: true},
		{Name: "user_transfers", Type: field.TypeInt, Nullable: true},
	}
	// TransferTransactionsTable holds the schema information for the "transfer_transactions" table.
	TransferTransactionsTable = &schema.Table{
		Name:       "transfer_transactions",
		Columns:    TransferTransactionsColumns,
		PrimaryKey: []*schema.Column{TransferTransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transfer_transactions_games_transfers",
				Columns:    []*schema.Column{TransferTransactionsColumns[7]},
				RefColumns: []*schema.Column{GamesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transfer_transactions_users_transfers",
				Columns:    []*schema.Column{TransferTransactionsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "tel", Type: field.TypeString, Unique: true, Size: 10},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"inactive", "active", "pending"}, Default: "inactive"},
		{Name: "bonus", Type: field.TypeEnum, Enums: []string{"accepted", "rejected"}, Default: "rejected"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "channel_user", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_channels_user",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{ChannelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccessTokensTable,
		BanksTable,
		BankAccountsTable,
		ChannelsTable,
		GamesTable,
		GameAccountsTable,
		LineAccountsTable,
		MasterWalletTransactionsTable,
		PgSlotAccountsTable,
		PrettyGameAccountsTable,
		SaGameAccountsTable,
		TransferTransactionsTable,
		UsersTable,
	}
)

func init() {
	AccessTokensTable.ForeignKeys[0].RefTable = UsersTable
	BankAccountsTable.ForeignKeys[0].RefTable = BanksTable
	BankAccountsTable.ForeignKeys[1].RefTable = UsersTable
	GameAccountsTable.ForeignKeys[0].RefTable = GamesTable
	GameAccountsTable.ForeignKeys[1].RefTable = UsersTable
	LineAccountsTable.ForeignKeys[0].RefTable = UsersTable
	MasterWalletTransactionsTable.ForeignKeys[0].RefTable = UsersTable
	PgSlotAccountsTable.ForeignKeys[0].RefTable = GameAccountsTable
	PrettyGameAccountsTable.ForeignKeys[0].RefTable = GameAccountsTable
	SaGameAccountsTable.ForeignKeys[0].RefTable = GameAccountsTable
	TransferTransactionsTable.ForeignKeys[0].RefTable = GamesTable
	TransferTransactionsTable.ForeignKeys[1].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = ChannelsTable
}
