// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wynn-member-api/ent/bank"
	"wynn-member-api/ent/bankaccount"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BankAccountCreate is the builder for creating a BankAccount entity.
type BankAccountCreate struct {
	config
	mutation *BankAccountMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (bac *BankAccountCreate) SetUUID(u uuid.UUID) *BankAccountCreate {
	bac.mutation.SetUUID(u)
	return bac
}

// SetBankAccountID sets the "bank_account_id" field.
func (bac *BankAccountCreate) SetBankAccountID(s string) *BankAccountCreate {
	bac.mutation.SetBankAccountID(s)
	return bac
}

// SetBankAccountIDLast sets the "bank_account_id_last" field.
func (bac *BankAccountCreate) SetBankAccountIDLast(s string) *BankAccountCreate {
	bac.mutation.SetBankAccountIDLast(s)
	return bac
}

// SetBankAccountName sets the "bank_account_name" field.
func (bac *BankAccountCreate) SetBankAccountName(s string) *BankAccountCreate {
	bac.mutation.SetBankAccountName(s)
	return bac
}

// SetStatus sets the "status" field.
func (bac *BankAccountCreate) SetStatus(b bankaccount.Status) *BankAccountCreate {
	bac.mutation.SetStatus(b)
	return bac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bac *BankAccountCreate) SetNillableStatus(b *bankaccount.Status) *BankAccountCreate {
	if b != nil {
		bac.SetStatus(*b)
	}
	return bac
}

// SetBankCode sets the "bank_code" field.
func (bac *BankAccountCreate) SetBankCode(s string) *BankAccountCreate {
	bac.mutation.SetBankCode(s)
	return bac
}

// SetNillableBankCode sets the "bank_code" field if the given value is not nil.
func (bac *BankAccountCreate) SetNillableBankCode(s *string) *BankAccountCreate {
	if s != nil {
		bac.SetBankCode(*s)
	}
	return bac
}

// SetCreatedAt sets the "created_at" field.
func (bac *BankAccountCreate) SetCreatedAt(t time.Time) *BankAccountCreate {
	bac.mutation.SetCreatedAt(t)
	return bac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bac *BankAccountCreate) SetNillableCreatedAt(t *time.Time) *BankAccountCreate {
	if t != nil {
		bac.SetCreatedAt(*t)
	}
	return bac
}

// SetUpdatedAt sets the "updated_at" field.
func (bac *BankAccountCreate) SetUpdatedAt(t time.Time) *BankAccountCreate {
	bac.mutation.SetUpdatedAt(t)
	return bac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bac *BankAccountCreate) SetNillableUpdatedAt(t *time.Time) *BankAccountCreate {
	if t != nil {
		bac.SetUpdatedAt(*t)
	}
	return bac
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bac *BankAccountCreate) SetOwnerID(id int) *BankAccountCreate {
	bac.mutation.SetOwnerID(id)
	return bac
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (bac *BankAccountCreate) SetNillableOwnerID(id *int) *BankAccountCreate {
	if id != nil {
		bac = bac.SetOwnerID(*id)
	}
	return bac
}

// SetOwner sets the "owner" edge to the User entity.
func (bac *BankAccountCreate) SetOwner(u *User) *BankAccountCreate {
	return bac.SetOwnerID(u.ID)
}

// SetBankID sets the "bank" edge to the Bank entity by ID.
func (bac *BankAccountCreate) SetBankID(id int) *BankAccountCreate {
	bac.mutation.SetBankID(id)
	return bac
}

// SetNillableBankID sets the "bank" edge to the Bank entity by ID if the given value is not nil.
func (bac *BankAccountCreate) SetNillableBankID(id *int) *BankAccountCreate {
	if id != nil {
		bac = bac.SetBankID(*id)
	}
	return bac
}

// SetBank sets the "bank" edge to the Bank entity.
func (bac *BankAccountCreate) SetBank(b *Bank) *BankAccountCreate {
	return bac.SetBankID(b.ID)
}

// Mutation returns the BankAccountMutation object of the builder.
func (bac *BankAccountCreate) Mutation() *BankAccountMutation {
	return bac.mutation
}

// Save creates the BankAccount in the database.
func (bac *BankAccountCreate) Save(ctx context.Context) (*BankAccount, error) {
	var (
		err  error
		node *BankAccount
	)
	bac.defaults()
	if len(bac.hooks) == 0 {
		if err = bac.check(); err != nil {
			return nil, err
		}
		node, err = bac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bac.check(); err != nil {
				return nil, err
			}
			bac.mutation = mutation
			if node, err = bac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bac.hooks) - 1; i >= 0; i-- {
			if bac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BankAccountCreate) SaveX(ctx context.Context) *BankAccount {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BankAccountCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BankAccountCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BankAccountCreate) defaults() {
	if _, ok := bac.mutation.UUID(); !ok {
		v := bankaccount.DefaultUUID()
		bac.mutation.SetUUID(v)
	}
	if _, ok := bac.mutation.Status(); !ok {
		v := bankaccount.DefaultStatus
		bac.mutation.SetStatus(v)
	}
	if _, ok := bac.mutation.CreatedAt(); !ok {
		v := bankaccount.DefaultCreatedAt()
		bac.mutation.SetCreatedAt(v)
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		v := bankaccount.DefaultUpdatedAt()
		bac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BankAccountCreate) check() error {
	if _, ok := bac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if _, ok := bac.mutation.BankAccountID(); !ok {
		return &ValidationError{Name: "bank_account_id", err: errors.New(`ent: missing required field "bank_account_id"`)}
	}
	if _, ok := bac.mutation.BankAccountIDLast(); !ok {
		return &ValidationError{Name: "bank_account_id_last", err: errors.New(`ent: missing required field "bank_account_id_last"`)}
	}
	if v, ok := bac.mutation.BankAccountIDLast(); ok {
		if err := bankaccount.BankAccountIDLastValidator(v); err != nil {
			return &ValidationError{Name: "bank_account_id_last", err: fmt.Errorf(`ent: validator failed for field "bank_account_id_last": %w`, err)}
		}
	}
	if _, ok := bac.mutation.BankAccountName(); !ok {
		return &ValidationError{Name: "bank_account_name", err: errors.New(`ent: missing required field "bank_account_name"`)}
	}
	if _, ok := bac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := bac.mutation.Status(); ok {
		if err := bankaccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	if _, ok := bac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (bac *BankAccountCreate) sqlSave(ctx context.Context) (*BankAccount, error) {
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bac *BankAccountCreate) createSpec() (*BankAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &BankAccount{config: bac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bankaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bankaccount.FieldID,
			},
		}
	)
	if value, ok := bac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bankaccount.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := bac.mutation.BankAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountID,
		})
		_node.BankAccountID = value
	}
	if value, ok := bac.mutation.BankAccountIDLast(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountIDLast,
		})
		_node.BankAccountIDLast = value
	}
	if value, ok := bac.mutation.BankAccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankAccountName,
		})
		_node.BankAccountName = value
	}
	if value, ok := bac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: bankaccount.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := bac.mutation.BankCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankaccount.FieldBankCode,
		})
		_node.BankCode = value
	}
	if value, ok := bac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bankaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bankaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := bac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.OwnerTable,
			Columns: []string{bankaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_banks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bac.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.BankTable,
			Columns: []string{bankaccount.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bank_accounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BankAccountCreateBulk is the builder for creating many BankAccount entities in bulk.
type BankAccountCreateBulk struct {
	config
	builders []*BankAccountCreate
}

// Save creates the BankAccount entities in the database.
func (bacb *BankAccountCreateBulk) Save(ctx context.Context) ([]*BankAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BankAccount, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BankAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BankAccountCreateBulk) SaveX(ctx context.Context) []*BankAccount {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BankAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BankAccountCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}
