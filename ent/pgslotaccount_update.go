// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/pgslotaccount"
	"wynn-member-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PgSlotAccountUpdate is the builder for updating PgSlotAccount entities.
type PgSlotAccountUpdate struct {
	config
	hooks    []Hook
	mutation *PgSlotAccountMutation
}

// Where appends a list predicates to the PgSlotAccountUpdate builder.
func (psau *PgSlotAccountUpdate) Where(ps ...predicate.PgSlotAccount) *PgSlotAccountUpdate {
	psau.mutation.Where(ps...)
	return psau
}

// SetUUID sets the "uuid" field.
func (psau *PgSlotAccountUpdate) SetUUID(u uuid.UUID) *PgSlotAccountUpdate {
	psau.mutation.SetUUID(u)
	return psau
}

// SetUsername sets the "username" field.
func (psau *PgSlotAccountUpdate) SetUsername(s string) *PgSlotAccountUpdate {
	psau.mutation.SetUsername(s)
	return psau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillableUsername(s *string) *PgSlotAccountUpdate {
	if s != nil {
		psau.SetUsername(*s)
	}
	return psau
}

// ClearUsername clears the value of the "username" field.
func (psau *PgSlotAccountUpdate) ClearUsername() *PgSlotAccountUpdate {
	psau.mutation.ClearUsername()
	return psau
}

// SetPassword sets the "password" field.
func (psau *PgSlotAccountUpdate) SetPassword(s string) *PgSlotAccountUpdate {
	psau.mutation.SetPassword(s)
	return psau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillablePassword(s *string) *PgSlotAccountUpdate {
	if s != nil {
		psau.SetPassword(*s)
	}
	return psau
}

// ClearPassword clears the value of the "password" field.
func (psau *PgSlotAccountUpdate) ClearPassword() *PgSlotAccountUpdate {
	psau.mutation.ClearPassword()
	return psau
}

// SetDesktopURI sets the "desktop_uri" field.
func (psau *PgSlotAccountUpdate) SetDesktopURI(s string) *PgSlotAccountUpdate {
	psau.mutation.SetDesktopURI(s)
	return psau
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillableDesktopURI(s *string) *PgSlotAccountUpdate {
	if s != nil {
		psau.SetDesktopURI(*s)
	}
	return psau
}

// ClearDesktopURI clears the value of the "desktop_uri" field.
func (psau *PgSlotAccountUpdate) ClearDesktopURI() *PgSlotAccountUpdate {
	psau.mutation.ClearDesktopURI()
	return psau
}

// SetMobileURI sets the "mobile_uri" field.
func (psau *PgSlotAccountUpdate) SetMobileURI(s string) *PgSlotAccountUpdate {
	psau.mutation.SetMobileURI(s)
	return psau
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillableMobileURI(s *string) *PgSlotAccountUpdate {
	if s != nil {
		psau.SetMobileURI(*s)
	}
	return psau
}

// ClearMobileURI clears the value of the "mobile_uri" field.
func (psau *PgSlotAccountUpdate) ClearMobileURI() *PgSlotAccountUpdate {
	psau.mutation.ClearMobileURI()
	return psau
}

// SetCreatedAt sets the "created_at" field.
func (psau *PgSlotAccountUpdate) SetCreatedAt(t time.Time) *PgSlotAccountUpdate {
	psau.mutation.SetCreatedAt(t)
	return psau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillableCreatedAt(t *time.Time) *PgSlotAccountUpdate {
	if t != nil {
		psau.SetCreatedAt(*t)
	}
	return psau
}

// SetUpdatedAt sets the "updated_at" field.
func (psau *PgSlotAccountUpdate) SetUpdatedAt(t time.Time) *PgSlotAccountUpdate {
	psau.mutation.SetUpdatedAt(t)
	return psau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillableUpdatedAt(t *time.Time) *PgSlotAccountUpdate {
	if t != nil {
		psau.SetUpdatedAt(*t)
	}
	return psau
}

// SetRawData sets the "raw_data" field.
func (psau *PgSlotAccountUpdate) SetRawData(s string) *PgSlotAccountUpdate {
	psau.mutation.SetRawData(s)
	return psau
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillableRawData(s *string) *PgSlotAccountUpdate {
	if s != nil {
		psau.SetRawData(*s)
	}
	return psau
}

// ClearRawData clears the value of the "raw_data" field.
func (psau *PgSlotAccountUpdate) ClearRawData() *PgSlotAccountUpdate {
	psau.mutation.ClearRawData()
	return psau
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (psau *PgSlotAccountUpdate) SetOwnerID(id int) *PgSlotAccountUpdate {
	psau.mutation.SetOwnerID(id)
	return psau
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (psau *PgSlotAccountUpdate) SetNillableOwnerID(id *int) *PgSlotAccountUpdate {
	if id != nil {
		psau = psau.SetOwnerID(*id)
	}
	return psau
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (psau *PgSlotAccountUpdate) SetOwner(g *GameAccount) *PgSlotAccountUpdate {
	return psau.SetOwnerID(g.ID)
}

// Mutation returns the PgSlotAccountMutation object of the builder.
func (psau *PgSlotAccountUpdate) Mutation() *PgSlotAccountMutation {
	return psau.mutation
}

// ClearOwner clears the "owner" edge to the GameAccount entity.
func (psau *PgSlotAccountUpdate) ClearOwner() *PgSlotAccountUpdate {
	psau.mutation.ClearOwner()
	return psau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psau *PgSlotAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(psau.hooks) == 0 {
		if err = psau.check(); err != nil {
			return 0, err
		}
		affected, err = psau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PgSlotAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psau.check(); err != nil {
				return 0, err
			}
			psau.mutation = mutation
			affected, err = psau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psau.hooks) - 1; i >= 0; i-- {
			if psau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psau *PgSlotAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := psau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psau *PgSlotAccountUpdate) Exec(ctx context.Context) error {
	_, err := psau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psau *PgSlotAccountUpdate) ExecX(ctx context.Context) {
	if err := psau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psau *PgSlotAccountUpdate) check() error {
	if v, ok := psau.mutation.DesktopURI(); ok {
		if err := pgslotaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf("ent: validator failed for field \"desktop_uri\": %w", err)}
		}
	}
	if v, ok := psau.mutation.MobileURI(); ok {
		if err := pgslotaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf("ent: validator failed for field \"mobile_uri\": %w", err)}
		}
	}
	return nil
}

func (psau *PgSlotAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pgslotaccount.Table,
			Columns: pgslotaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pgslotaccount.FieldID,
			},
		},
	}
	if ps := psau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pgslotaccount.FieldUUID,
		})
	}
	if value, ok := psau.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldUsername,
		})
	}
	if psau.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldUsername,
		})
	}
	if value, ok := psau.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldPassword,
		})
	}
	if psau.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldPassword,
		})
	}
	if value, ok := psau.mutation.DesktopURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldDesktopURI,
		})
	}
	if psau.mutation.DesktopURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldDesktopURI,
		})
	}
	if value, ok := psau.mutation.MobileURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldMobileURI,
		})
	}
	if psau.mutation.MobileURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldMobileURI,
		})
	}
	if value, ok := psau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pgslotaccount.FieldCreatedAt,
		})
	}
	if value, ok := psau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pgslotaccount.FieldUpdatedAt,
		})
	}
	if value, ok := psau.mutation.RawData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldRawData,
		})
	}
	if psau.mutation.RawDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldRawData,
		})
	}
	if psau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgslotaccount.OwnerTable,
			Columns: []string{pgslotaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgslotaccount.OwnerTable,
			Columns: []string{pgslotaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pgslotaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PgSlotAccountUpdateOne is the builder for updating a single PgSlotAccount entity.
type PgSlotAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PgSlotAccountMutation
}

// SetUUID sets the "uuid" field.
func (psauo *PgSlotAccountUpdateOne) SetUUID(u uuid.UUID) *PgSlotAccountUpdateOne {
	psauo.mutation.SetUUID(u)
	return psauo
}

// SetUsername sets the "username" field.
func (psauo *PgSlotAccountUpdateOne) SetUsername(s string) *PgSlotAccountUpdateOne {
	psauo.mutation.SetUsername(s)
	return psauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillableUsername(s *string) *PgSlotAccountUpdateOne {
	if s != nil {
		psauo.SetUsername(*s)
	}
	return psauo
}

// ClearUsername clears the value of the "username" field.
func (psauo *PgSlotAccountUpdateOne) ClearUsername() *PgSlotAccountUpdateOne {
	psauo.mutation.ClearUsername()
	return psauo
}

// SetPassword sets the "password" field.
func (psauo *PgSlotAccountUpdateOne) SetPassword(s string) *PgSlotAccountUpdateOne {
	psauo.mutation.SetPassword(s)
	return psauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillablePassword(s *string) *PgSlotAccountUpdateOne {
	if s != nil {
		psauo.SetPassword(*s)
	}
	return psauo
}

// ClearPassword clears the value of the "password" field.
func (psauo *PgSlotAccountUpdateOne) ClearPassword() *PgSlotAccountUpdateOne {
	psauo.mutation.ClearPassword()
	return psauo
}

// SetDesktopURI sets the "desktop_uri" field.
func (psauo *PgSlotAccountUpdateOne) SetDesktopURI(s string) *PgSlotAccountUpdateOne {
	psauo.mutation.SetDesktopURI(s)
	return psauo
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillableDesktopURI(s *string) *PgSlotAccountUpdateOne {
	if s != nil {
		psauo.SetDesktopURI(*s)
	}
	return psauo
}

// ClearDesktopURI clears the value of the "desktop_uri" field.
func (psauo *PgSlotAccountUpdateOne) ClearDesktopURI() *PgSlotAccountUpdateOne {
	psauo.mutation.ClearDesktopURI()
	return psauo
}

// SetMobileURI sets the "mobile_uri" field.
func (psauo *PgSlotAccountUpdateOne) SetMobileURI(s string) *PgSlotAccountUpdateOne {
	psauo.mutation.SetMobileURI(s)
	return psauo
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillableMobileURI(s *string) *PgSlotAccountUpdateOne {
	if s != nil {
		psauo.SetMobileURI(*s)
	}
	return psauo
}

// ClearMobileURI clears the value of the "mobile_uri" field.
func (psauo *PgSlotAccountUpdateOne) ClearMobileURI() *PgSlotAccountUpdateOne {
	psauo.mutation.ClearMobileURI()
	return psauo
}

// SetCreatedAt sets the "created_at" field.
func (psauo *PgSlotAccountUpdateOne) SetCreatedAt(t time.Time) *PgSlotAccountUpdateOne {
	psauo.mutation.SetCreatedAt(t)
	return psauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *PgSlotAccountUpdateOne {
	if t != nil {
		psauo.SetCreatedAt(*t)
	}
	return psauo
}

// SetUpdatedAt sets the "updated_at" field.
func (psauo *PgSlotAccountUpdateOne) SetUpdatedAt(t time.Time) *PgSlotAccountUpdateOne {
	psauo.mutation.SetUpdatedAt(t)
	return psauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *PgSlotAccountUpdateOne {
	if t != nil {
		psauo.SetUpdatedAt(*t)
	}
	return psauo
}

// SetRawData sets the "raw_data" field.
func (psauo *PgSlotAccountUpdateOne) SetRawData(s string) *PgSlotAccountUpdateOne {
	psauo.mutation.SetRawData(s)
	return psauo
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillableRawData(s *string) *PgSlotAccountUpdateOne {
	if s != nil {
		psauo.SetRawData(*s)
	}
	return psauo
}

// ClearRawData clears the value of the "raw_data" field.
func (psauo *PgSlotAccountUpdateOne) ClearRawData() *PgSlotAccountUpdateOne {
	psauo.mutation.ClearRawData()
	return psauo
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (psauo *PgSlotAccountUpdateOne) SetOwnerID(id int) *PgSlotAccountUpdateOne {
	psauo.mutation.SetOwnerID(id)
	return psauo
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (psauo *PgSlotAccountUpdateOne) SetNillableOwnerID(id *int) *PgSlotAccountUpdateOne {
	if id != nil {
		psauo = psauo.SetOwnerID(*id)
	}
	return psauo
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (psauo *PgSlotAccountUpdateOne) SetOwner(g *GameAccount) *PgSlotAccountUpdateOne {
	return psauo.SetOwnerID(g.ID)
}

// Mutation returns the PgSlotAccountMutation object of the builder.
func (psauo *PgSlotAccountUpdateOne) Mutation() *PgSlotAccountMutation {
	return psauo.mutation
}

// ClearOwner clears the "owner" edge to the GameAccount entity.
func (psauo *PgSlotAccountUpdateOne) ClearOwner() *PgSlotAccountUpdateOne {
	psauo.mutation.ClearOwner()
	return psauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psauo *PgSlotAccountUpdateOne) Select(field string, fields ...string) *PgSlotAccountUpdateOne {
	psauo.fields = append([]string{field}, fields...)
	return psauo
}

// Save executes the query and returns the updated PgSlotAccount entity.
func (psauo *PgSlotAccountUpdateOne) Save(ctx context.Context) (*PgSlotAccount, error) {
	var (
		err  error
		node *PgSlotAccount
	)
	if len(psauo.hooks) == 0 {
		if err = psauo.check(); err != nil {
			return nil, err
		}
		node, err = psauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PgSlotAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psauo.check(); err != nil {
				return nil, err
			}
			psauo.mutation = mutation
			node, err = psauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psauo.hooks) - 1; i >= 0; i-- {
			if psauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psauo *PgSlotAccountUpdateOne) SaveX(ctx context.Context) *PgSlotAccount {
	node, err := psauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psauo *PgSlotAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := psauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psauo *PgSlotAccountUpdateOne) ExecX(ctx context.Context) {
	if err := psauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psauo *PgSlotAccountUpdateOne) check() error {
	if v, ok := psauo.mutation.DesktopURI(); ok {
		if err := pgslotaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf("ent: validator failed for field \"desktop_uri\": %w", err)}
		}
	}
	if v, ok := psauo.mutation.MobileURI(); ok {
		if err := pgslotaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf("ent: validator failed for field \"mobile_uri\": %w", err)}
		}
	}
	return nil
}

func (psauo *PgSlotAccountUpdateOne) sqlSave(ctx context.Context) (_node *PgSlotAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pgslotaccount.Table,
			Columns: pgslotaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pgslotaccount.FieldID,
			},
		},
	}
	id, ok := psauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PgSlotAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := psauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pgslotaccount.FieldID)
		for _, f := range fields {
			if !pgslotaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pgslotaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pgslotaccount.FieldUUID,
		})
	}
	if value, ok := psauo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldUsername,
		})
	}
	if psauo.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldUsername,
		})
	}
	if value, ok := psauo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldPassword,
		})
	}
	if psauo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldPassword,
		})
	}
	if value, ok := psauo.mutation.DesktopURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldDesktopURI,
		})
	}
	if psauo.mutation.DesktopURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldDesktopURI,
		})
	}
	if value, ok := psauo.mutation.MobileURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldMobileURI,
		})
	}
	if psauo.mutation.MobileURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldMobileURI,
		})
	}
	if value, ok := psauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pgslotaccount.FieldCreatedAt,
		})
	}
	if value, ok := psauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pgslotaccount.FieldUpdatedAt,
		})
	}
	if value, ok := psauo.mutation.RawData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pgslotaccount.FieldRawData,
		})
	}
	if psauo.mutation.RawDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pgslotaccount.FieldRawData,
		})
	}
	if psauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgslotaccount.OwnerTable,
			Columns: []string{pgslotaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgslotaccount.OwnerTable,
			Columns: []string{pgslotaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PgSlotAccount{config: psauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pgslotaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
