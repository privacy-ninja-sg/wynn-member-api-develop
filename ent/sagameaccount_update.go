// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/predicate"
	"wynn-member-api/ent/sagameaccount"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SAGameAccountUpdate is the builder for updating SAGameAccount entities.
type SAGameAccountUpdate struct {
	config
	hooks    []Hook
	mutation *SAGameAccountMutation
}

// Where appends a list predicates to the SAGameAccountUpdate builder.
func (sgau *SAGameAccountUpdate) Where(ps ...predicate.SAGameAccount) *SAGameAccountUpdate {
	sgau.mutation.Where(ps...)
	return sgau
}

// SetUUID sets the "uuid" field.
func (sgau *SAGameAccountUpdate) SetUUID(u uuid.UUID) *SAGameAccountUpdate {
	sgau.mutation.SetUUID(u)
	return sgau
}

// SetUsername sets the "username" field.
func (sgau *SAGameAccountUpdate) SetUsername(s string) *SAGameAccountUpdate {
	sgau.mutation.SetUsername(s)
	return sgau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillableUsername(s *string) *SAGameAccountUpdate {
	if s != nil {
		sgau.SetUsername(*s)
	}
	return sgau
}

// ClearUsername clears the value of the "username" field.
func (sgau *SAGameAccountUpdate) ClearUsername() *SAGameAccountUpdate {
	sgau.mutation.ClearUsername()
	return sgau
}

// SetPassword sets the "password" field.
func (sgau *SAGameAccountUpdate) SetPassword(s string) *SAGameAccountUpdate {
	sgau.mutation.SetPassword(s)
	return sgau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillablePassword(s *string) *SAGameAccountUpdate {
	if s != nil {
		sgau.SetPassword(*s)
	}
	return sgau
}

// ClearPassword clears the value of the "password" field.
func (sgau *SAGameAccountUpdate) ClearPassword() *SAGameAccountUpdate {
	sgau.mutation.ClearPassword()
	return sgau
}

// SetDesktopURI sets the "desktop_uri" field.
func (sgau *SAGameAccountUpdate) SetDesktopURI(s string) *SAGameAccountUpdate {
	sgau.mutation.SetDesktopURI(s)
	return sgau
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillableDesktopURI(s *string) *SAGameAccountUpdate {
	if s != nil {
		sgau.SetDesktopURI(*s)
	}
	return sgau
}

// ClearDesktopURI clears the value of the "desktop_uri" field.
func (sgau *SAGameAccountUpdate) ClearDesktopURI() *SAGameAccountUpdate {
	sgau.mutation.ClearDesktopURI()
	return sgau
}

// SetMobileURI sets the "mobile_uri" field.
func (sgau *SAGameAccountUpdate) SetMobileURI(s string) *SAGameAccountUpdate {
	sgau.mutation.SetMobileURI(s)
	return sgau
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillableMobileURI(s *string) *SAGameAccountUpdate {
	if s != nil {
		sgau.SetMobileURI(*s)
	}
	return sgau
}

// ClearMobileURI clears the value of the "mobile_uri" field.
func (sgau *SAGameAccountUpdate) ClearMobileURI() *SAGameAccountUpdate {
	sgau.mutation.ClearMobileURI()
	return sgau
}

// SetCreatedAt sets the "created_at" field.
func (sgau *SAGameAccountUpdate) SetCreatedAt(t time.Time) *SAGameAccountUpdate {
	sgau.mutation.SetCreatedAt(t)
	return sgau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillableCreatedAt(t *time.Time) *SAGameAccountUpdate {
	if t != nil {
		sgau.SetCreatedAt(*t)
	}
	return sgau
}

// SetUpdatedAt sets the "updated_at" field.
func (sgau *SAGameAccountUpdate) SetUpdatedAt(t time.Time) *SAGameAccountUpdate {
	sgau.mutation.SetUpdatedAt(t)
	return sgau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillableUpdatedAt(t *time.Time) *SAGameAccountUpdate {
	if t != nil {
		sgau.SetUpdatedAt(*t)
	}
	return sgau
}

// SetRawData sets the "raw_data" field.
func (sgau *SAGameAccountUpdate) SetRawData(s string) *SAGameAccountUpdate {
	sgau.mutation.SetRawData(s)
	return sgau
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillableRawData(s *string) *SAGameAccountUpdate {
	if s != nil {
		sgau.SetRawData(*s)
	}
	return sgau
}

// ClearRawData clears the value of the "raw_data" field.
func (sgau *SAGameAccountUpdate) ClearRawData() *SAGameAccountUpdate {
	sgau.mutation.ClearRawData()
	return sgau
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (sgau *SAGameAccountUpdate) SetOwnerID(id int) *SAGameAccountUpdate {
	sgau.mutation.SetOwnerID(id)
	return sgau
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (sgau *SAGameAccountUpdate) SetNillableOwnerID(id *int) *SAGameAccountUpdate {
	if id != nil {
		sgau = sgau.SetOwnerID(*id)
	}
	return sgau
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (sgau *SAGameAccountUpdate) SetOwner(g *GameAccount) *SAGameAccountUpdate {
	return sgau.SetOwnerID(g.ID)
}

// Mutation returns the SAGameAccountMutation object of the builder.
func (sgau *SAGameAccountUpdate) Mutation() *SAGameAccountMutation {
	return sgau.mutation
}

// ClearOwner clears the "owner" edge to the GameAccount entity.
func (sgau *SAGameAccountUpdate) ClearOwner() *SAGameAccountUpdate {
	sgau.mutation.ClearOwner()
	return sgau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgau *SAGameAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sgau.hooks) == 0 {
		if err = sgau.check(); err != nil {
			return 0, err
		}
		affected, err = sgau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SAGameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgau.check(); err != nil {
				return 0, err
			}
			sgau.mutation = mutation
			affected, err = sgau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgau.hooks) - 1; i >= 0; i-- {
			if sgau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sgau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgau *SAGameAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := sgau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgau *SAGameAccountUpdate) Exec(ctx context.Context) error {
	_, err := sgau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgau *SAGameAccountUpdate) ExecX(ctx context.Context) {
	if err := sgau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgau *SAGameAccountUpdate) check() error {
	if v, ok := sgau.mutation.DesktopURI(); ok {
		if err := sagameaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf("ent: validator failed for field \"desktop_uri\": %w", err)}
		}
	}
	if v, ok := sgau.mutation.MobileURI(); ok {
		if err := sagameaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf("ent: validator failed for field \"mobile_uri\": %w", err)}
		}
	}
	return nil
}

func (sgau *SAGameAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sagameaccount.Table,
			Columns: sagameaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sagameaccount.FieldID,
			},
		},
	}
	if ps := sgau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgau.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sagameaccount.FieldUUID,
		})
	}
	if value, ok := sgau.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldUsername,
		})
	}
	if sgau.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldUsername,
		})
	}
	if value, ok := sgau.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldPassword,
		})
	}
	if sgau.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldPassword,
		})
	}
	if value, ok := sgau.mutation.DesktopURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldDesktopURI,
		})
	}
	if sgau.mutation.DesktopURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldDesktopURI,
		})
	}
	if value, ok := sgau.mutation.MobileURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldMobileURI,
		})
	}
	if sgau.mutation.MobileURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldMobileURI,
		})
	}
	if value, ok := sgau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sagameaccount.FieldCreatedAt,
		})
	}
	if value, ok := sgau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sagameaccount.FieldUpdatedAt,
		})
	}
	if value, ok := sgau.mutation.RawData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldRawData,
		})
	}
	if sgau.mutation.RawDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldRawData,
		})
	}
	if sgau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagameaccount.OwnerTable,
			Columns: []string{sagameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagameaccount.OwnerTable,
			Columns: []string{sagameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SAGameAccountUpdateOne is the builder for updating a single SAGameAccount entity.
type SAGameAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SAGameAccountMutation
}

// SetUUID sets the "uuid" field.
func (sgauo *SAGameAccountUpdateOne) SetUUID(u uuid.UUID) *SAGameAccountUpdateOne {
	sgauo.mutation.SetUUID(u)
	return sgauo
}

// SetUsername sets the "username" field.
func (sgauo *SAGameAccountUpdateOne) SetUsername(s string) *SAGameAccountUpdateOne {
	sgauo.mutation.SetUsername(s)
	return sgauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillableUsername(s *string) *SAGameAccountUpdateOne {
	if s != nil {
		sgauo.SetUsername(*s)
	}
	return sgauo
}

// ClearUsername clears the value of the "username" field.
func (sgauo *SAGameAccountUpdateOne) ClearUsername() *SAGameAccountUpdateOne {
	sgauo.mutation.ClearUsername()
	return sgauo
}

// SetPassword sets the "password" field.
func (sgauo *SAGameAccountUpdateOne) SetPassword(s string) *SAGameAccountUpdateOne {
	sgauo.mutation.SetPassword(s)
	return sgauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillablePassword(s *string) *SAGameAccountUpdateOne {
	if s != nil {
		sgauo.SetPassword(*s)
	}
	return sgauo
}

// ClearPassword clears the value of the "password" field.
func (sgauo *SAGameAccountUpdateOne) ClearPassword() *SAGameAccountUpdateOne {
	sgauo.mutation.ClearPassword()
	return sgauo
}

// SetDesktopURI sets the "desktop_uri" field.
func (sgauo *SAGameAccountUpdateOne) SetDesktopURI(s string) *SAGameAccountUpdateOne {
	sgauo.mutation.SetDesktopURI(s)
	return sgauo
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillableDesktopURI(s *string) *SAGameAccountUpdateOne {
	if s != nil {
		sgauo.SetDesktopURI(*s)
	}
	return sgauo
}

// ClearDesktopURI clears the value of the "desktop_uri" field.
func (sgauo *SAGameAccountUpdateOne) ClearDesktopURI() *SAGameAccountUpdateOne {
	sgauo.mutation.ClearDesktopURI()
	return sgauo
}

// SetMobileURI sets the "mobile_uri" field.
func (sgauo *SAGameAccountUpdateOne) SetMobileURI(s string) *SAGameAccountUpdateOne {
	sgauo.mutation.SetMobileURI(s)
	return sgauo
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillableMobileURI(s *string) *SAGameAccountUpdateOne {
	if s != nil {
		sgauo.SetMobileURI(*s)
	}
	return sgauo
}

// ClearMobileURI clears the value of the "mobile_uri" field.
func (sgauo *SAGameAccountUpdateOne) ClearMobileURI() *SAGameAccountUpdateOne {
	sgauo.mutation.ClearMobileURI()
	return sgauo
}

// SetCreatedAt sets the "created_at" field.
func (sgauo *SAGameAccountUpdateOne) SetCreatedAt(t time.Time) *SAGameAccountUpdateOne {
	sgauo.mutation.SetCreatedAt(t)
	return sgauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *SAGameAccountUpdateOne {
	if t != nil {
		sgauo.SetCreatedAt(*t)
	}
	return sgauo
}

// SetUpdatedAt sets the "updated_at" field.
func (sgauo *SAGameAccountUpdateOne) SetUpdatedAt(t time.Time) *SAGameAccountUpdateOne {
	sgauo.mutation.SetUpdatedAt(t)
	return sgauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillableUpdatedAt(t *time.Time) *SAGameAccountUpdateOne {
	if t != nil {
		sgauo.SetUpdatedAt(*t)
	}
	return sgauo
}

// SetRawData sets the "raw_data" field.
func (sgauo *SAGameAccountUpdateOne) SetRawData(s string) *SAGameAccountUpdateOne {
	sgauo.mutation.SetRawData(s)
	return sgauo
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillableRawData(s *string) *SAGameAccountUpdateOne {
	if s != nil {
		sgauo.SetRawData(*s)
	}
	return sgauo
}

// ClearRawData clears the value of the "raw_data" field.
func (sgauo *SAGameAccountUpdateOne) ClearRawData() *SAGameAccountUpdateOne {
	sgauo.mutation.ClearRawData()
	return sgauo
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (sgauo *SAGameAccountUpdateOne) SetOwnerID(id int) *SAGameAccountUpdateOne {
	sgauo.mutation.SetOwnerID(id)
	return sgauo
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (sgauo *SAGameAccountUpdateOne) SetNillableOwnerID(id *int) *SAGameAccountUpdateOne {
	if id != nil {
		sgauo = sgauo.SetOwnerID(*id)
	}
	return sgauo
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (sgauo *SAGameAccountUpdateOne) SetOwner(g *GameAccount) *SAGameAccountUpdateOne {
	return sgauo.SetOwnerID(g.ID)
}

// Mutation returns the SAGameAccountMutation object of the builder.
func (sgauo *SAGameAccountUpdateOne) Mutation() *SAGameAccountMutation {
	return sgauo.mutation
}

// ClearOwner clears the "owner" edge to the GameAccount entity.
func (sgauo *SAGameAccountUpdateOne) ClearOwner() *SAGameAccountUpdateOne {
	sgauo.mutation.ClearOwner()
	return sgauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sgauo *SAGameAccountUpdateOne) Select(field string, fields ...string) *SAGameAccountUpdateOne {
	sgauo.fields = append([]string{field}, fields...)
	return sgauo
}

// Save executes the query and returns the updated SAGameAccount entity.
func (sgauo *SAGameAccountUpdateOne) Save(ctx context.Context) (*SAGameAccount, error) {
	var (
		err  error
		node *SAGameAccount
	)
	if len(sgauo.hooks) == 0 {
		if err = sgauo.check(); err != nil {
			return nil, err
		}
		node, err = sgauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SAGameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgauo.check(); err != nil {
				return nil, err
			}
			sgauo.mutation = mutation
			node, err = sgauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgauo.hooks) - 1; i >= 0; i-- {
			if sgauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sgauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgauo *SAGameAccountUpdateOne) SaveX(ctx context.Context) *SAGameAccount {
	node, err := sgauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sgauo *SAGameAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := sgauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgauo *SAGameAccountUpdateOne) ExecX(ctx context.Context) {
	if err := sgauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgauo *SAGameAccountUpdateOne) check() error {
	if v, ok := sgauo.mutation.DesktopURI(); ok {
		if err := sagameaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf("ent: validator failed for field \"desktop_uri\": %w", err)}
		}
	}
	if v, ok := sgauo.mutation.MobileURI(); ok {
		if err := sagameaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf("ent: validator failed for field \"mobile_uri\": %w", err)}
		}
	}
	return nil
}

func (sgauo *SAGameAccountUpdateOne) sqlSave(ctx context.Context) (_node *SAGameAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sagameaccount.Table,
			Columns: sagameaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sagameaccount.FieldID,
			},
		},
	}
	id, ok := sgauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SAGameAccount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sgauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagameaccount.FieldID)
		for _, f := range fields {
			if !sagameaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagameaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sgauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgauo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sagameaccount.FieldUUID,
		})
	}
	if value, ok := sgauo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldUsername,
		})
	}
	if sgauo.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldUsername,
		})
	}
	if value, ok := sgauo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldPassword,
		})
	}
	if sgauo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldPassword,
		})
	}
	if value, ok := sgauo.mutation.DesktopURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldDesktopURI,
		})
	}
	if sgauo.mutation.DesktopURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldDesktopURI,
		})
	}
	if value, ok := sgauo.mutation.MobileURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldMobileURI,
		})
	}
	if sgauo.mutation.MobileURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldMobileURI,
		})
	}
	if value, ok := sgauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sagameaccount.FieldCreatedAt,
		})
	}
	if value, ok := sgauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sagameaccount.FieldUpdatedAt,
		})
	}
	if value, ok := sgauo.mutation.RawData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldRawData,
		})
	}
	if sgauo.mutation.RawDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sagameaccount.FieldRawData,
		})
	}
	if sgauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagameaccount.OwnerTable,
			Columns: []string{sagameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagameaccount.OwnerTable,
			Columns: []string{sagameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SAGameAccount{config: sgauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sgauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
