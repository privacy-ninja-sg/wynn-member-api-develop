// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"wynn-member-api/ent/bank"
	"wynn-member-api/ent/bankaccount"
	"wynn-member-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BankUpdate is the builder for updating Bank entities.
type BankUpdate struct {
	config
	hooks    []Hook
	mutation *BankMutation
}

// Where appends a list predicates to the BankUpdate builder.
func (bu *BankUpdate) Where(ps ...predicate.Bank) *BankUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUUID sets the "uuid" field.
func (bu *BankUpdate) SetUUID(u uuid.UUID) *BankUpdate {
	bu.mutation.SetUUID(u)
	return bu
}

// SetName sets the "name" field.
func (bu *BankUpdate) SetName(s string) *BankUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetShortName sets the "short_name" field.
func (bu *BankUpdate) SetShortName(s string) *BankUpdate {
	bu.mutation.SetShortName(s)
	return bu
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (bu *BankUpdate) SetNillableShortName(s *string) *BankUpdate {
	if s != nil {
		bu.SetShortName(*s)
	}
	return bu
}

// ClearShortName clears the value of the "short_name" field.
func (bu *BankUpdate) ClearShortName() *BankUpdate {
	bu.mutation.ClearShortName()
	return bu
}

// SetNameTh sets the "name_th" field.
func (bu *BankUpdate) SetNameTh(s string) *BankUpdate {
	bu.mutation.SetNameTh(s)
	return bu
}

// SetNillableNameTh sets the "name_th" field if the given value is not nil.
func (bu *BankUpdate) SetNillableNameTh(s *string) *BankUpdate {
	if s != nil {
		bu.SetNameTh(*s)
	}
	return bu
}

// ClearNameTh clears the value of the "name_th" field.
func (bu *BankUpdate) ClearNameTh() *BankUpdate {
	bu.mutation.ClearNameTh()
	return bu
}

// SetShortNameTh sets the "short_name_th" field.
func (bu *BankUpdate) SetShortNameTh(s string) *BankUpdate {
	bu.mutation.SetShortNameTh(s)
	return bu
}

// SetNillableShortNameTh sets the "short_name_th" field if the given value is not nil.
func (bu *BankUpdate) SetNillableShortNameTh(s *string) *BankUpdate {
	if s != nil {
		bu.SetShortNameTh(*s)
	}
	return bu
}

// ClearShortNameTh clears the value of the "short_name_th" field.
func (bu *BankUpdate) ClearShortNameTh() *BankUpdate {
	bu.mutation.ClearShortNameTh()
	return bu
}

// SetBankAccountName sets the "bank_account_name" field.
func (bu *BankUpdate) SetBankAccountName(s string) *BankUpdate {
	bu.mutation.SetBankAccountName(s)
	return bu
}

// SetNillableBankAccountName sets the "bank_account_name" field if the given value is not nil.
func (bu *BankUpdate) SetNillableBankAccountName(s *string) *BankUpdate {
	if s != nil {
		bu.SetBankAccountName(*s)
	}
	return bu
}

// ClearBankAccountName clears the value of the "bank_account_name" field.
func (bu *BankUpdate) ClearBankAccountName() *BankUpdate {
	bu.mutation.ClearBankAccountName()
	return bu
}

// SetLogo sets the "logo" field.
func (bu *BankUpdate) SetLogo(s string) *BankUpdate {
	bu.mutation.SetLogo(s)
	return bu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (bu *BankUpdate) SetNillableLogo(s *string) *BankUpdate {
	if s != nil {
		bu.SetLogo(*s)
	}
	return bu
}

// ClearLogo clears the value of the "logo" field.
func (bu *BankUpdate) ClearLogo() *BankUpdate {
	bu.mutation.ClearLogo()
	return bu
}

// SetBankID sets the "bank_id" field.
func (bu *BankUpdate) SetBankID(s string) *BankUpdate {
	bu.mutation.SetBankID(s)
	return bu
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (bu *BankUpdate) SetNillableBankID(s *string) *BankUpdate {
	if s != nil {
		bu.SetBankID(*s)
	}
	return bu
}

// ClearBankID clears the value of the "bank_id" field.
func (bu *BankUpdate) ClearBankID() *BankUpdate {
	bu.mutation.ClearBankID()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BankUpdate) SetStatus(b bank.Status) *BankUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BankUpdate) SetNillableStatus(b *bank.Status) *BankUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BankUpdate) SetCreatedAt(t time.Time) *BankUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BankUpdate) SetNillableCreatedAt(t *time.Time) *BankUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BankUpdate) SetUpdatedAt(t time.Time) *BankUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BankUpdate) SetNillableUpdatedAt(t *time.Time) *BankUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// AddAccountIDs adds the "accounts" edge to the BankAccount entity by IDs.
func (bu *BankUpdate) AddAccountIDs(ids ...int) *BankUpdate {
	bu.mutation.AddAccountIDs(ids...)
	return bu
}

// AddAccounts adds the "accounts" edges to the BankAccount entity.
func (bu *BankUpdate) AddAccounts(b ...*BankAccount) *BankUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddAccountIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (bu *BankUpdate) Mutation() *BankMutation {
	return bu.mutation
}

// ClearAccounts clears all "accounts" edges to the BankAccount entity.
func (bu *BankUpdate) ClearAccounts() *BankUpdate {
	bu.mutation.ClearAccounts()
	return bu
}

// RemoveAccountIDs removes the "accounts" edge to BankAccount entities by IDs.
func (bu *BankUpdate) RemoveAccountIDs(ids ...int) *BankUpdate {
	bu.mutation.RemoveAccountIDs(ids...)
	return bu
}

// RemoveAccounts removes "accounts" edges to BankAccount entities.
func (bu *BankUpdate) RemoveAccounts(b ...*BankAccount) *BankUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BankUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BankUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BankUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BankUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BankUpdate) check() error {
	if v, ok := bu.mutation.Status(); ok {
		if err := bank.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (bu *BankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bank.Table,
			Columns: bank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bank.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bank.FieldUUID,
		})
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldName,
		})
	}
	if value, ok := bu.mutation.ShortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldShortName,
		})
	}
	if bu.mutation.ShortNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldShortName,
		})
	}
	if value, ok := bu.mutation.NameTh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldNameTh,
		})
	}
	if bu.mutation.NameThCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldNameTh,
		})
	}
	if value, ok := bu.mutation.ShortNameTh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldShortNameTh,
		})
	}
	if bu.mutation.ShortNameThCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldShortNameTh,
		})
	}
	if value, ok := bu.mutation.BankAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankAccountName,
		})
	}
	if bu.mutation.BankAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldBankAccountName,
		})
	}
	if value, ok := bu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldLogo,
		})
	}
	if bu.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldLogo,
		})
	}
	if value, ok := bu.mutation.BankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankID,
		})
	}
	if bu.mutation.BankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldBankID,
		})
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: bank.FieldStatus,
		})
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bank.FieldCreatedAt,
		})
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bank.FieldUpdatedAt,
		})
	}
	if bu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.AccountsTable,
			Columns: []string{bank.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !bu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.AccountsTable,
			Columns: []string{bank.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.AccountsTable,
			Columns: []string{bank.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BankUpdateOne is the builder for updating a single Bank entity.
type BankUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankMutation
}

// SetUUID sets the "uuid" field.
func (buo *BankUpdateOne) SetUUID(u uuid.UUID) *BankUpdateOne {
	buo.mutation.SetUUID(u)
	return buo
}

// SetName sets the "name" field.
func (buo *BankUpdateOne) SetName(s string) *BankUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetShortName sets the "short_name" field.
func (buo *BankUpdateOne) SetShortName(s string) *BankUpdateOne {
	buo.mutation.SetShortName(s)
	return buo
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableShortName(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetShortName(*s)
	}
	return buo
}

// ClearShortName clears the value of the "short_name" field.
func (buo *BankUpdateOne) ClearShortName() *BankUpdateOne {
	buo.mutation.ClearShortName()
	return buo
}

// SetNameTh sets the "name_th" field.
func (buo *BankUpdateOne) SetNameTh(s string) *BankUpdateOne {
	buo.mutation.SetNameTh(s)
	return buo
}

// SetNillableNameTh sets the "name_th" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableNameTh(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetNameTh(*s)
	}
	return buo
}

// ClearNameTh clears the value of the "name_th" field.
func (buo *BankUpdateOne) ClearNameTh() *BankUpdateOne {
	buo.mutation.ClearNameTh()
	return buo
}

// SetShortNameTh sets the "short_name_th" field.
func (buo *BankUpdateOne) SetShortNameTh(s string) *BankUpdateOne {
	buo.mutation.SetShortNameTh(s)
	return buo
}

// SetNillableShortNameTh sets the "short_name_th" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableShortNameTh(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetShortNameTh(*s)
	}
	return buo
}

// ClearShortNameTh clears the value of the "short_name_th" field.
func (buo *BankUpdateOne) ClearShortNameTh() *BankUpdateOne {
	buo.mutation.ClearShortNameTh()
	return buo
}

// SetBankAccountName sets the "bank_account_name" field.
func (buo *BankUpdateOne) SetBankAccountName(s string) *BankUpdateOne {
	buo.mutation.SetBankAccountName(s)
	return buo
}

// SetNillableBankAccountName sets the "bank_account_name" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableBankAccountName(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetBankAccountName(*s)
	}
	return buo
}

// ClearBankAccountName clears the value of the "bank_account_name" field.
func (buo *BankUpdateOne) ClearBankAccountName() *BankUpdateOne {
	buo.mutation.ClearBankAccountName()
	return buo
}

// SetLogo sets the "logo" field.
func (buo *BankUpdateOne) SetLogo(s string) *BankUpdateOne {
	buo.mutation.SetLogo(s)
	return buo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableLogo(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetLogo(*s)
	}
	return buo
}

// ClearLogo clears the value of the "logo" field.
func (buo *BankUpdateOne) ClearLogo() *BankUpdateOne {
	buo.mutation.ClearLogo()
	return buo
}

// SetBankID sets the "bank_id" field.
func (buo *BankUpdateOne) SetBankID(s string) *BankUpdateOne {
	buo.mutation.SetBankID(s)
	return buo
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableBankID(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetBankID(*s)
	}
	return buo
}

// ClearBankID clears the value of the "bank_id" field.
func (buo *BankUpdateOne) ClearBankID() *BankUpdateOne {
	buo.mutation.ClearBankID()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BankUpdateOne) SetStatus(b bank.Status) *BankUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableStatus(b *bank.Status) *BankUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BankUpdateOne) SetCreatedAt(t time.Time) *BankUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableCreatedAt(t *time.Time) *BankUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BankUpdateOne) SetUpdatedAt(t time.Time) *BankUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableUpdatedAt(t *time.Time) *BankUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// AddAccountIDs adds the "accounts" edge to the BankAccount entity by IDs.
func (buo *BankUpdateOne) AddAccountIDs(ids ...int) *BankUpdateOne {
	buo.mutation.AddAccountIDs(ids...)
	return buo
}

// AddAccounts adds the "accounts" edges to the BankAccount entity.
func (buo *BankUpdateOne) AddAccounts(b ...*BankAccount) *BankUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddAccountIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (buo *BankUpdateOne) Mutation() *BankMutation {
	return buo.mutation
}

// ClearAccounts clears all "accounts" edges to the BankAccount entity.
func (buo *BankUpdateOne) ClearAccounts() *BankUpdateOne {
	buo.mutation.ClearAccounts()
	return buo
}

// RemoveAccountIDs removes the "accounts" edge to BankAccount entities by IDs.
func (buo *BankUpdateOne) RemoveAccountIDs(ids ...int) *BankUpdateOne {
	buo.mutation.RemoveAccountIDs(ids...)
	return buo
}

// RemoveAccounts removes "accounts" edges to BankAccount entities.
func (buo *BankUpdateOne) RemoveAccounts(b ...*BankAccount) *BankUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveAccountIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BankUpdateOne) Select(field string, fields ...string) *BankUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bank entity.
func (buo *BankUpdateOne) Save(ctx context.Context) (*Bank, error) {
	var (
		err  error
		node *Bank
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BankUpdateOne) SaveX(ctx context.Context) *Bank {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BankUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BankUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BankUpdateOne) check() error {
	if v, ok := buo.mutation.Status(); ok {
		if err := bank.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (buo *BankUpdateOne) sqlSave(ctx context.Context) (_node *Bank, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bank.Table,
			Columns: bank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bank.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bank.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bank.FieldID)
		for _, f := range fields {
			if !bank.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bank.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bank.FieldUUID,
		})
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldName,
		})
	}
	if value, ok := buo.mutation.ShortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldShortName,
		})
	}
	if buo.mutation.ShortNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldShortName,
		})
	}
	if value, ok := buo.mutation.NameTh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldNameTh,
		})
	}
	if buo.mutation.NameThCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldNameTh,
		})
	}
	if value, ok := buo.mutation.ShortNameTh(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldShortNameTh,
		})
	}
	if buo.mutation.ShortNameThCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldShortNameTh,
		})
	}
	if value, ok := buo.mutation.BankAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankAccountName,
		})
	}
	if buo.mutation.BankAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldBankAccountName,
		})
	}
	if value, ok := buo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldLogo,
		})
	}
	if buo.mutation.LogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldLogo,
		})
	}
	if value, ok := buo.mutation.BankID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bank.FieldBankID,
		})
	}
	if buo.mutation.BankIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bank.FieldBankID,
		})
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: bank.FieldStatus,
		})
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bank.FieldCreatedAt,
		})
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bank.FieldUpdatedAt,
		})
	}
	if buo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.AccountsTable,
			Columns: []string{bank.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !buo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.AccountsTable,
			Columns: []string{bank.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.AccountsTable,
			Columns: []string{bank.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bank{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
