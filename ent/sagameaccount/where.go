// Code generated by entc, DO NOT EDIT.

package sagameaccount

import (
	"time"
	"wynn-member-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// DesktopURI applies equality check predicate on the "desktop_uri" field. It's identical to DesktopURIEQ.
func DesktopURI(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesktopURI), v))
	})
}

// MobileURI applies equality check predicate on the "mobile_uri" field. It's identical to MobileURIEQ.
func MobileURI(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileURI), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// RawData applies equality check predicate on the "raw_data" field. It's identical to RawDataEQ.
func RawData(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawData), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsername)))
	})
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsername)))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassword)))
	})
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassword)))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// DesktopURIEQ applies the EQ predicate on the "desktop_uri" field.
func DesktopURIEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesktopURI), v))
	})
}

// DesktopURINEQ applies the NEQ predicate on the "desktop_uri" field.
func DesktopURINEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesktopURI), v))
	})
}

// DesktopURIIn applies the In predicate on the "desktop_uri" field.
func DesktopURIIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDesktopURI), v...))
	})
}

// DesktopURINotIn applies the NotIn predicate on the "desktop_uri" field.
func DesktopURINotIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDesktopURI), v...))
	})
}

// DesktopURIGT applies the GT predicate on the "desktop_uri" field.
func DesktopURIGT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesktopURI), v))
	})
}

// DesktopURIGTE applies the GTE predicate on the "desktop_uri" field.
func DesktopURIGTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesktopURI), v))
	})
}

// DesktopURILT applies the LT predicate on the "desktop_uri" field.
func DesktopURILT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesktopURI), v))
	})
}

// DesktopURILTE applies the LTE predicate on the "desktop_uri" field.
func DesktopURILTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesktopURI), v))
	})
}

// DesktopURIContains applies the Contains predicate on the "desktop_uri" field.
func DesktopURIContains(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDesktopURI), v))
	})
}

// DesktopURIHasPrefix applies the HasPrefix predicate on the "desktop_uri" field.
func DesktopURIHasPrefix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDesktopURI), v))
	})
}

// DesktopURIHasSuffix applies the HasSuffix predicate on the "desktop_uri" field.
func DesktopURIHasSuffix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDesktopURI), v))
	})
}

// DesktopURIIsNil applies the IsNil predicate on the "desktop_uri" field.
func DesktopURIIsNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDesktopURI)))
	})
}

// DesktopURINotNil applies the NotNil predicate on the "desktop_uri" field.
func DesktopURINotNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDesktopURI)))
	})
}

// DesktopURIEqualFold applies the EqualFold predicate on the "desktop_uri" field.
func DesktopURIEqualFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDesktopURI), v))
	})
}

// DesktopURIContainsFold applies the ContainsFold predicate on the "desktop_uri" field.
func DesktopURIContainsFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDesktopURI), v))
	})
}

// MobileURIEQ applies the EQ predicate on the "mobile_uri" field.
func MobileURIEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileURI), v))
	})
}

// MobileURINEQ applies the NEQ predicate on the "mobile_uri" field.
func MobileURINEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMobileURI), v))
	})
}

// MobileURIIn applies the In predicate on the "mobile_uri" field.
func MobileURIIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMobileURI), v...))
	})
}

// MobileURINotIn applies the NotIn predicate on the "mobile_uri" field.
func MobileURINotIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMobileURI), v...))
	})
}

// MobileURIGT applies the GT predicate on the "mobile_uri" field.
func MobileURIGT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMobileURI), v))
	})
}

// MobileURIGTE applies the GTE predicate on the "mobile_uri" field.
func MobileURIGTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMobileURI), v))
	})
}

// MobileURILT applies the LT predicate on the "mobile_uri" field.
func MobileURILT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMobileURI), v))
	})
}

// MobileURILTE applies the LTE predicate on the "mobile_uri" field.
func MobileURILTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMobileURI), v))
	})
}

// MobileURIContains applies the Contains predicate on the "mobile_uri" field.
func MobileURIContains(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMobileURI), v))
	})
}

// MobileURIHasPrefix applies the HasPrefix predicate on the "mobile_uri" field.
func MobileURIHasPrefix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMobileURI), v))
	})
}

// MobileURIHasSuffix applies the HasSuffix predicate on the "mobile_uri" field.
func MobileURIHasSuffix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMobileURI), v))
	})
}

// MobileURIIsNil applies the IsNil predicate on the "mobile_uri" field.
func MobileURIIsNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMobileURI)))
	})
}

// MobileURINotNil applies the NotNil predicate on the "mobile_uri" field.
func MobileURINotNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMobileURI)))
	})
}

// MobileURIEqualFold applies the EqualFold predicate on the "mobile_uri" field.
func MobileURIEqualFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMobileURI), v))
	})
}

// MobileURIContainsFold applies the ContainsFold predicate on the "mobile_uri" field.
func MobileURIContainsFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMobileURI), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SAGameAccount {
	vc := time.Time(v)
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), vc))
	})
}

// RawDataEQ applies the EQ predicate on the "raw_data" field.
func RawDataEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawData), v))
	})
}

// RawDataNEQ applies the NEQ predicate on the "raw_data" field.
func RawDataNEQ(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRawData), v))
	})
}

// RawDataIn applies the In predicate on the "raw_data" field.
func RawDataIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRawData), v...))
	})
}

// RawDataNotIn applies the NotIn predicate on the "raw_data" field.
func RawDataNotIn(vs ...string) predicate.SAGameAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SAGameAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRawData), v...))
	})
}

// RawDataGT applies the GT predicate on the "raw_data" field.
func RawDataGT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRawData), v))
	})
}

// RawDataGTE applies the GTE predicate on the "raw_data" field.
func RawDataGTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRawData), v))
	})
}

// RawDataLT applies the LT predicate on the "raw_data" field.
func RawDataLT(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRawData), v))
	})
}

// RawDataLTE applies the LTE predicate on the "raw_data" field.
func RawDataLTE(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRawData), v))
	})
}

// RawDataContains applies the Contains predicate on the "raw_data" field.
func RawDataContains(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRawData), v))
	})
}

// RawDataHasPrefix applies the HasPrefix predicate on the "raw_data" field.
func RawDataHasPrefix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRawData), v))
	})
}

// RawDataHasSuffix applies the HasSuffix predicate on the "raw_data" field.
func RawDataHasSuffix(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRawData), v))
	})
}

// RawDataIsNil applies the IsNil predicate on the "raw_data" field.
func RawDataIsNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRawData)))
	})
}

// RawDataNotNil applies the NotNil predicate on the "raw_data" field.
func RawDataNotNil() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRawData)))
	})
}

// RawDataEqualFold applies the EqualFold predicate on the "raw_data" field.
func RawDataEqualFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRawData), v))
	})
}

// RawDataContainsFold applies the ContainsFold predicate on the "raw_data" field.
func RawDataContainsFold(v string) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRawData), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.GameAccount) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SAGameAccount) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SAGameAccount) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SAGameAccount) predicate.SAGameAccount {
	return predicate.SAGameAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
