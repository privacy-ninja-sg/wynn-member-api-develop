// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wynn-member-api/ent/bank"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Bank is the model entity for the Bank schema.
type Bank struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ShortName holds the value of the "short_name" field.
	ShortName string `json:"short_name,omitempty"`
	// NameTh holds the value of the "name_th" field.
	NameTh string `json:"name_th,omitempty"`
	// ShortNameTh holds the value of the "short_name_th" field.
	ShortNameTh string `json:"short_name_th,omitempty"`
	// BankAccountName holds the value of the "bank_account_name" field.
	BankAccountName string `json:"bank_account_name,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// BankID holds the value of the "bank_id" field.
	BankID string `json:"bank_id,omitempty"`
	// Status holds the value of the "status" field.
	Status bank.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BankQuery when eager-loading is set.
	Edges BankEdges `json:"edges"`
}

// BankEdges holds the relations/edges for other nodes in the graph.
type BankEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*BankAccount `json:"accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e BankEdges) AccountsOrErr() ([]*BankAccount, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bank) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bank.FieldID:
			values[i] = new(sql.NullInt64)
		case bank.FieldName, bank.FieldShortName, bank.FieldNameTh, bank.FieldShortNameTh, bank.FieldBankAccountName, bank.FieldLogo, bank.FieldBankID, bank.FieldStatus:
			values[i] = new(sql.NullString)
		case bank.FieldCreatedAt, bank.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bank.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bank", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bank fields.
func (b *Bank) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bank.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bank.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				b.UUID = *value
			}
		case bank.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case bank.FieldShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_name", values[i])
			} else if value.Valid {
				b.ShortName = value.String
			}
		case bank.FieldNameTh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_th", values[i])
			} else if value.Valid {
				b.NameTh = value.String
			}
		case bank.FieldShortNameTh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_name_th", values[i])
			} else if value.Valid {
				b.ShortNameTh = value.String
			}
		case bank.FieldBankAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_account_name", values[i])
			} else if value.Valid {
				b.BankAccountName = value.String
			}
		case bank.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				b.Logo = value.String
			}
		case bank.FieldBankID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_id", values[i])
			} else if value.Valid {
				b.BankID = value.String
			}
		case bank.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = bank.Status(value.String)
			}
		case bank.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bank.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAccounts queries the "accounts" edge of the Bank entity.
func (b *Bank) QueryAccounts() *BankAccountQuery {
	return (&BankClient{config: b.config}).QueryAccounts(b)
}

// Update returns a builder for updating this Bank.
// Note that you need to call Bank.Unwrap() before calling this method if this Bank
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bank) Update() *BankUpdateOne {
	return (&BankClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bank entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bank) Unwrap() *Bank {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bank is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bank) String() string {
	var builder strings.Builder
	builder.WriteString("Bank(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", b.UUID))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", short_name=")
	builder.WriteString(b.ShortName)
	builder.WriteString(", name_th=")
	builder.WriteString(b.NameTh)
	builder.WriteString(", short_name_th=")
	builder.WriteString(b.ShortNameTh)
	builder.WriteString(", bank_account_name=")
	builder.WriteString(b.BankAccountName)
	builder.WriteString(", logo=")
	builder.WriteString(b.Logo)
	builder.WriteString(", bank_id=")
	builder.WriteString(b.BankID)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", b.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", b.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Banks is a parsable slice of Bank.
type Banks []*Bank

func (b Banks) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
