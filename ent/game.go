// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wynn-member-api/ent/game"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Banner holds the value of the "banner" field.
	Banner string `json:"banner,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Status holds the value of the "status" field.
	Status game.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges GameEdges `json:"edges"`
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*GameAccount `json:"accounts,omitempty"`
	// Transfers holds the value of the transfers edge.
	Transfers []*TransferTransaction `json:"transfers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) AccountsOrErr() ([]*GameAccount, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// TransfersOrErr returns the Transfers value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) TransfersOrErr() ([]*TransferTransaction, error) {
	if e.loadedTypes[1] {
		return e.Transfers, nil
	}
	return nil, &NotLoadedError{edge: "transfers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			values[i] = new(sql.NullInt64)
		case game.FieldName, game.FieldBanner, game.FieldDesc, game.FieldStatus:
			values[i] = new(sql.NullString)
		case game.FieldCreatedAt, game.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case game.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Game", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case game.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				ga.UUID = *value
			}
		case game.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		case game.FieldBanner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field banner", values[i])
			} else if value.Valid {
				ga.Banner = value.String
			}
		case game.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				ga.Desc = value.String
			}
		case game.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ga.Status = game.Status(value.String)
			}
		case game.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case game.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ga.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAccounts queries the "accounts" edge of the Game entity.
func (ga *Game) QueryAccounts() *GameAccountQuery {
	return (&GameClient{config: ga.config}).QueryAccounts(ga)
}

// QueryTransfers queries the "transfers" edge of the Game entity.
func (ga *Game) QueryTransfers() *TransferTransactionQuery {
	return (&GameClient{config: ga.config}).QueryTransfers(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return (&GameClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v", ga.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", ga.UUID))
	builder.WriteString(", name=")
	builder.WriteString(ga.Name)
	builder.WriteString(", banner=")
	builder.WriteString(ga.Banner)
	builder.WriteString(", desc=")
	builder.WriteString(ga.Desc)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ga.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", ga.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ga.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Games is a parsable slice of Game.
type Games []*Game

func (ga Games) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
