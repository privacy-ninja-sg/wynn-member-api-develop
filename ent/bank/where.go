// Code generated by entc, DO NOT EDIT.

package bank

import (
	"time"
	"wynn-member-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// ShortName applies equality check predicate on the "short_name" field. It's identical to ShortNameEQ.
func ShortName(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortName), v))
	})
}

// NameTh applies equality check predicate on the "name_th" field. It's identical to NameThEQ.
func NameTh(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameTh), v))
	})
}

// ShortNameTh applies equality check predicate on the "short_name_th" field. It's identical to ShortNameThEQ.
func ShortNameTh(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortNameTh), v))
	})
}

// BankAccountName applies equality check predicate on the "bank_account_name" field. It's identical to BankAccountNameEQ.
func BankAccountName(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountName), v))
	})
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// BankID applies equality check predicate on the "bank_id" field. It's identical to BankIDEQ.
func BankID(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ShortNameEQ applies the EQ predicate on the "short_name" field.
func ShortNameEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortName), v))
	})
}

// ShortNameNEQ applies the NEQ predicate on the "short_name" field.
func ShortNameNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShortName), v))
	})
}

// ShortNameIn applies the In predicate on the "short_name" field.
func ShortNameIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShortName), v...))
	})
}

// ShortNameNotIn applies the NotIn predicate on the "short_name" field.
func ShortNameNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShortName), v...))
	})
}

// ShortNameGT applies the GT predicate on the "short_name" field.
func ShortNameGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShortName), v))
	})
}

// ShortNameGTE applies the GTE predicate on the "short_name" field.
func ShortNameGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShortName), v))
	})
}

// ShortNameLT applies the LT predicate on the "short_name" field.
func ShortNameLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShortName), v))
	})
}

// ShortNameLTE applies the LTE predicate on the "short_name" field.
func ShortNameLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShortName), v))
	})
}

// ShortNameContains applies the Contains predicate on the "short_name" field.
func ShortNameContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShortName), v))
	})
}

// ShortNameHasPrefix applies the HasPrefix predicate on the "short_name" field.
func ShortNameHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShortName), v))
	})
}

// ShortNameHasSuffix applies the HasSuffix predicate on the "short_name" field.
func ShortNameHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShortName), v))
	})
}

// ShortNameIsNil applies the IsNil predicate on the "short_name" field.
func ShortNameIsNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShortName)))
	})
}

// ShortNameNotNil applies the NotNil predicate on the "short_name" field.
func ShortNameNotNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShortName)))
	})
}

// ShortNameEqualFold applies the EqualFold predicate on the "short_name" field.
func ShortNameEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShortName), v))
	})
}

// ShortNameContainsFold applies the ContainsFold predicate on the "short_name" field.
func ShortNameContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShortName), v))
	})
}

// NameThEQ applies the EQ predicate on the "name_th" field.
func NameThEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameTh), v))
	})
}

// NameThNEQ applies the NEQ predicate on the "name_th" field.
func NameThNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameTh), v))
	})
}

// NameThIn applies the In predicate on the "name_th" field.
func NameThIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNameTh), v...))
	})
}

// NameThNotIn applies the NotIn predicate on the "name_th" field.
func NameThNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNameTh), v...))
	})
}

// NameThGT applies the GT predicate on the "name_th" field.
func NameThGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameTh), v))
	})
}

// NameThGTE applies the GTE predicate on the "name_th" field.
func NameThGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameTh), v))
	})
}

// NameThLT applies the LT predicate on the "name_th" field.
func NameThLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameTh), v))
	})
}

// NameThLTE applies the LTE predicate on the "name_th" field.
func NameThLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameTh), v))
	})
}

// NameThContains applies the Contains predicate on the "name_th" field.
func NameThContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameTh), v))
	})
}

// NameThHasPrefix applies the HasPrefix predicate on the "name_th" field.
func NameThHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameTh), v))
	})
}

// NameThHasSuffix applies the HasSuffix predicate on the "name_th" field.
func NameThHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameTh), v))
	})
}

// NameThIsNil applies the IsNil predicate on the "name_th" field.
func NameThIsNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNameTh)))
	})
}

// NameThNotNil applies the NotNil predicate on the "name_th" field.
func NameThNotNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNameTh)))
	})
}

// NameThEqualFold applies the EqualFold predicate on the "name_th" field.
func NameThEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameTh), v))
	})
}

// NameThContainsFold applies the ContainsFold predicate on the "name_th" field.
func NameThContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameTh), v))
	})
}

// ShortNameThEQ applies the EQ predicate on the "short_name_th" field.
func ShortNameThEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThNEQ applies the NEQ predicate on the "short_name_th" field.
func ShortNameThNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThIn applies the In predicate on the "short_name_th" field.
func ShortNameThIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShortNameTh), v...))
	})
}

// ShortNameThNotIn applies the NotIn predicate on the "short_name_th" field.
func ShortNameThNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShortNameTh), v...))
	})
}

// ShortNameThGT applies the GT predicate on the "short_name_th" field.
func ShortNameThGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThGTE applies the GTE predicate on the "short_name_th" field.
func ShortNameThGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThLT applies the LT predicate on the "short_name_th" field.
func ShortNameThLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThLTE applies the LTE predicate on the "short_name_th" field.
func ShortNameThLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThContains applies the Contains predicate on the "short_name_th" field.
func ShortNameThContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThHasPrefix applies the HasPrefix predicate on the "short_name_th" field.
func ShortNameThHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThHasSuffix applies the HasSuffix predicate on the "short_name_th" field.
func ShortNameThHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThIsNil applies the IsNil predicate on the "short_name_th" field.
func ShortNameThIsNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShortNameTh)))
	})
}

// ShortNameThNotNil applies the NotNil predicate on the "short_name_th" field.
func ShortNameThNotNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShortNameTh)))
	})
}

// ShortNameThEqualFold applies the EqualFold predicate on the "short_name_th" field.
func ShortNameThEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShortNameTh), v))
	})
}

// ShortNameThContainsFold applies the ContainsFold predicate on the "short_name_th" field.
func ShortNameThContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShortNameTh), v))
	})
}

// BankAccountNameEQ applies the EQ predicate on the "bank_account_name" field.
func BankAccountNameEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameNEQ applies the NEQ predicate on the "bank_account_name" field.
func BankAccountNameNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameIn applies the In predicate on the "bank_account_name" field.
func BankAccountNameIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankAccountName), v...))
	})
}

// BankAccountNameNotIn applies the NotIn predicate on the "bank_account_name" field.
func BankAccountNameNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankAccountName), v...))
	})
}

// BankAccountNameGT applies the GT predicate on the "bank_account_name" field.
func BankAccountNameGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameGTE applies the GTE predicate on the "bank_account_name" field.
func BankAccountNameGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameLT applies the LT predicate on the "bank_account_name" field.
func BankAccountNameLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameLTE applies the LTE predicate on the "bank_account_name" field.
func BankAccountNameLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameContains applies the Contains predicate on the "bank_account_name" field.
func BankAccountNameContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameHasPrefix applies the HasPrefix predicate on the "bank_account_name" field.
func BankAccountNameHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameHasSuffix applies the HasSuffix predicate on the "bank_account_name" field.
func BankAccountNameHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameIsNil applies the IsNil predicate on the "bank_account_name" field.
func BankAccountNameIsNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankAccountName)))
	})
}

// BankAccountNameNotNil applies the NotNil predicate on the "bank_account_name" field.
func BankAccountNameNotNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankAccountName)))
	})
}

// BankAccountNameEqualFold applies the EqualFold predicate on the "bank_account_name" field.
func BankAccountNameEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankAccountName), v))
	})
}

// BankAccountNameContainsFold applies the ContainsFold predicate on the "bank_account_name" field.
func BankAccountNameContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankAccountName), v))
	})
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogo), v))
	})
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogo), v...))
	})
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogo), v...))
	})
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogo), v))
	})
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogo), v))
	})
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogo), v))
	})
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogo), v))
	})
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogo), v))
	})
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogo), v))
	})
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogo), v))
	})
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLogo)))
	})
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLogo)))
	})
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogo), v))
	})
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogo), v))
	})
}

// BankIDEQ applies the EQ predicate on the "bank_id" field.
func BankIDEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankID), v))
	})
}

// BankIDNEQ applies the NEQ predicate on the "bank_id" field.
func BankIDNEQ(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankID), v))
	})
}

// BankIDIn applies the In predicate on the "bank_id" field.
func BankIDIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBankID), v...))
	})
}

// BankIDNotIn applies the NotIn predicate on the "bank_id" field.
func BankIDNotIn(vs ...string) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBankID), v...))
	})
}

// BankIDGT applies the GT predicate on the "bank_id" field.
func BankIDGT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankID), v))
	})
}

// BankIDGTE applies the GTE predicate on the "bank_id" field.
func BankIDGTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankID), v))
	})
}

// BankIDLT applies the LT predicate on the "bank_id" field.
func BankIDLT(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankID), v))
	})
}

// BankIDLTE applies the LTE predicate on the "bank_id" field.
func BankIDLTE(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankID), v))
	})
}

// BankIDContains applies the Contains predicate on the "bank_id" field.
func BankIDContains(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankID), v))
	})
}

// BankIDHasPrefix applies the HasPrefix predicate on the "bank_id" field.
func BankIDHasPrefix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankID), v))
	})
}

// BankIDHasSuffix applies the HasSuffix predicate on the "bank_id" field.
func BankIDHasSuffix(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankID), v))
	})
}

// BankIDIsNil applies the IsNil predicate on the "bank_id" field.
func BankIDIsNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBankID)))
	})
}

// BankIDNotNil applies the NotNil predicate on the "bank_id" field.
func BankIDNotNil() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBankID)))
	})
}

// BankIDEqualFold applies the EqualFold predicate on the "bank_id" field.
func BankIDEqualFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankID), v))
	})
}

// BankIDContainsFold applies the ContainsFold predicate on the "bank_id" field.
func BankIDContainsFold(v string) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankID), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Bank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bank {
	vc := time.Time(v)
	return predicate.Bank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), vc))
	})
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.BankAccount) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bank) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		p(s.Not())
	})
}
