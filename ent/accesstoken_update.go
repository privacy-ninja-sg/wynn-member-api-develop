// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wynn-member-api/ent/accesstoken"
	"wynn-member-api/ent/predicate"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessTokenUpdate is the builder for updating AccessToken entities.
type AccessTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AccessTokenMutation
}

// Where appends a list predicates to the AccessTokenUpdate builder.
func (atu *AccessTokenUpdate) Where(ps ...predicate.AccessToken) *AccessTokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetLineToken sets the "line_token" field.
func (atu *AccessTokenUpdate) SetLineToken(s string) *AccessTokenUpdate {
	atu.mutation.SetLineToken(s)
	return atu
}

// SetNillableLineToken sets the "line_token" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableLineToken(s *string) *AccessTokenUpdate {
	if s != nil {
		atu.SetLineToken(*s)
	}
	return atu
}

// ClearLineToken clears the value of the "line_token" field.
func (atu *AccessTokenUpdate) ClearLineToken() *AccessTokenUpdate {
	atu.mutation.ClearLineToken()
	return atu
}

// SetAccessToken sets the "access_token" field.
func (atu *AccessTokenUpdate) SetAccessToken(s string) *AccessTokenUpdate {
	atu.mutation.SetAccessToken(s)
	return atu
}

// SetTokenExpire sets the "token_expire" field.
func (atu *AccessTokenUpdate) SetTokenExpire(t time.Time) *AccessTokenUpdate {
	atu.mutation.SetTokenExpire(t)
	return atu
}

// SetIP sets the "ip" field.
func (atu *AccessTokenUpdate) SetIP(s string) *AccessTokenUpdate {
	atu.mutation.SetIP(s)
	return atu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableIP(s *string) *AccessTokenUpdate {
	if s != nil {
		atu.SetIP(*s)
	}
	return atu
}

// ClearIP clears the value of the "ip" field.
func (atu *AccessTokenUpdate) ClearIP() *AccessTokenUpdate {
	atu.mutation.ClearIP()
	return atu
}

// SetCreatedAt sets the "created_at" field.
func (atu *AccessTokenUpdate) SetCreatedAt(t time.Time) *AccessTokenUpdate {
	atu.mutation.SetCreatedAt(t)
	return atu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableCreatedAt(t *time.Time) *AccessTokenUpdate {
	if t != nil {
		atu.SetCreatedAt(*t)
	}
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AccessTokenUpdate) SetUpdatedAt(t time.Time) *AccessTokenUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableUpdatedAt(t *time.Time) *AccessTokenUpdate {
	if t != nil {
		atu.SetUpdatedAt(*t)
	}
	return atu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atu *AccessTokenUpdate) SetOwnerID(id int) *AccessTokenUpdate {
	atu.mutation.SetOwnerID(id)
	return atu
}

// SetOwner sets the "owner" edge to the User entity.
func (atu *AccessTokenUpdate) SetOwner(u *User) *AccessTokenUpdate {
	return atu.SetOwnerID(u.ID)
}

// Mutation returns the AccessTokenMutation object of the builder.
func (atu *AccessTokenUpdate) Mutation() *AccessTokenMutation {
	return atu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (atu *AccessTokenUpdate) ClearOwner() *AccessTokenUpdate {
	atu.mutation.ClearOwner()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AccessTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(atu.hooks) == 0 {
		if err = atu.check(); err != nil {
			return 0, err
		}
		affected, err = atu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atu.check(); err != nil {
				return 0, err
			}
			atu.mutation = mutation
			affected, err = atu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atu.hooks) - 1; i >= 0; i-- {
			if atu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AccessTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AccessTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AccessTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AccessTokenUpdate) check() error {
	if v, ok := atu.mutation.AccessToken(); ok {
		if err := accesstoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf("ent: validator failed for field \"access_token\": %w", err)}
		}
	}
	if _, ok := atu.mutation.OwnerID(); atu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (atu *AccessTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accesstoken.Table,
			Columns: accesstoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accesstoken.FieldID,
			},
		},
	}
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.LineToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldLineToken,
		})
	}
	if atu.mutation.LineTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: accesstoken.FieldLineToken,
		})
	}
	if value, ok := atu.mutation.AccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldAccessToken,
		})
	}
	if value, ok := atu.mutation.TokenExpire(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldTokenExpire,
		})
	}
	if value, ok := atu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldIP,
		})
	}
	if atu.mutation.IPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: accesstoken.FieldIP,
		})
	}
	if value, ok := atu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldCreatedAt,
		})
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldUpdatedAt,
		})
	}
	if atu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AccessTokenUpdateOne is the builder for updating a single AccessToken entity.
type AccessTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessTokenMutation
}

// SetLineToken sets the "line_token" field.
func (atuo *AccessTokenUpdateOne) SetLineToken(s string) *AccessTokenUpdateOne {
	atuo.mutation.SetLineToken(s)
	return atuo
}

// SetNillableLineToken sets the "line_token" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableLineToken(s *string) *AccessTokenUpdateOne {
	if s != nil {
		atuo.SetLineToken(*s)
	}
	return atuo
}

// ClearLineToken clears the value of the "line_token" field.
func (atuo *AccessTokenUpdateOne) ClearLineToken() *AccessTokenUpdateOne {
	atuo.mutation.ClearLineToken()
	return atuo
}

// SetAccessToken sets the "access_token" field.
func (atuo *AccessTokenUpdateOne) SetAccessToken(s string) *AccessTokenUpdateOne {
	atuo.mutation.SetAccessToken(s)
	return atuo
}

// SetTokenExpire sets the "token_expire" field.
func (atuo *AccessTokenUpdateOne) SetTokenExpire(t time.Time) *AccessTokenUpdateOne {
	atuo.mutation.SetTokenExpire(t)
	return atuo
}

// SetIP sets the "ip" field.
func (atuo *AccessTokenUpdateOne) SetIP(s string) *AccessTokenUpdateOne {
	atuo.mutation.SetIP(s)
	return atuo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableIP(s *string) *AccessTokenUpdateOne {
	if s != nil {
		atuo.SetIP(*s)
	}
	return atuo
}

// ClearIP clears the value of the "ip" field.
func (atuo *AccessTokenUpdateOne) ClearIP() *AccessTokenUpdateOne {
	atuo.mutation.ClearIP()
	return atuo
}

// SetCreatedAt sets the "created_at" field.
func (atuo *AccessTokenUpdateOne) SetCreatedAt(t time.Time) *AccessTokenUpdateOne {
	atuo.mutation.SetCreatedAt(t)
	return atuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *AccessTokenUpdateOne {
	if t != nil {
		atuo.SetCreatedAt(*t)
	}
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AccessTokenUpdateOne) SetUpdatedAt(t time.Time) *AccessTokenUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableUpdatedAt(t *time.Time) *AccessTokenUpdateOne {
	if t != nil {
		atuo.SetUpdatedAt(*t)
	}
	return atuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atuo *AccessTokenUpdateOne) SetOwnerID(id int) *AccessTokenUpdateOne {
	atuo.mutation.SetOwnerID(id)
	return atuo
}

// SetOwner sets the "owner" edge to the User entity.
func (atuo *AccessTokenUpdateOne) SetOwner(u *User) *AccessTokenUpdateOne {
	return atuo.SetOwnerID(u.ID)
}

// Mutation returns the AccessTokenMutation object of the builder.
func (atuo *AccessTokenUpdateOne) Mutation() *AccessTokenMutation {
	return atuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (atuo *AccessTokenUpdateOne) ClearOwner() *AccessTokenUpdateOne {
	atuo.mutation.ClearOwner()
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AccessTokenUpdateOne) Select(field string, fields ...string) *AccessTokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AccessToken entity.
func (atuo *AccessTokenUpdateOne) Save(ctx context.Context) (*AccessToken, error) {
	var (
		err  error
		node *AccessToken
	)
	if len(atuo.hooks) == 0 {
		if err = atuo.check(); err != nil {
			return nil, err
		}
		node, err = atuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atuo.check(); err != nil {
				return nil, err
			}
			atuo.mutation = mutation
			node, err = atuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atuo.hooks) - 1; i >= 0; i-- {
			if atuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AccessTokenUpdateOne) SaveX(ctx context.Context) *AccessToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AccessTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AccessTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AccessTokenUpdateOne) check() error {
	if v, ok := atuo.mutation.AccessToken(); ok {
		if err := accesstoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf("ent: validator failed for field \"access_token\": %w", err)}
		}
	}
	if _, ok := atuo.mutation.OwnerID(); atuo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (atuo *AccessTokenUpdateOne) sqlSave(ctx context.Context) (_node *AccessToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accesstoken.Table,
			Columns: accesstoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accesstoken.FieldID,
			},
		},
	}
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AccessToken.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accesstoken.FieldID)
		for _, f := range fields {
			if !accesstoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accesstoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.LineToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldLineToken,
		})
	}
	if atuo.mutation.LineTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: accesstoken.FieldLineToken,
		})
	}
	if value, ok := atuo.mutation.AccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldAccessToken,
		})
	}
	if value, ok := atuo.mutation.TokenExpire(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldTokenExpire,
		})
	}
	if value, ok := atuo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldIP,
		})
	}
	if atuo.mutation.IPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: accesstoken.FieldIP,
		})
	}
	if value, ok := atuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldCreatedAt,
		})
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldUpdatedAt,
		})
	}
	if atuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccessToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
