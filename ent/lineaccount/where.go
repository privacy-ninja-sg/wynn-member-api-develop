// Code generated by entc, DO NOT EDIT.

package lineaccount

import (
	"time"
	"wynn-member-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// LineID applies equality check predicate on the "line_id" field. It's identical to LineIDEQ.
func LineID(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineID), v))
	})
}

// LineClientID applies equality check predicate on the "line_client_id" field. It's identical to LineClientIDEQ.
func LineClientID(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineClientID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// LineIDEQ applies the EQ predicate on the "line_id" field.
func LineIDEQ(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineID), v))
	})
}

// LineIDNEQ applies the NEQ predicate on the "line_id" field.
func LineIDNEQ(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLineID), v))
	})
}

// LineIDIn applies the In predicate on the "line_id" field.
func LineIDIn(vs ...string) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLineID), v...))
	})
}

// LineIDNotIn applies the NotIn predicate on the "line_id" field.
func LineIDNotIn(vs ...string) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLineID), v...))
	})
}

// LineIDGT applies the GT predicate on the "line_id" field.
func LineIDGT(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLineID), v))
	})
}

// LineIDGTE applies the GTE predicate on the "line_id" field.
func LineIDGTE(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLineID), v))
	})
}

// LineIDLT applies the LT predicate on the "line_id" field.
func LineIDLT(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLineID), v))
	})
}

// LineIDLTE applies the LTE predicate on the "line_id" field.
func LineIDLTE(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLineID), v))
	})
}

// LineIDContains applies the Contains predicate on the "line_id" field.
func LineIDContains(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLineID), v))
	})
}

// LineIDHasPrefix applies the HasPrefix predicate on the "line_id" field.
func LineIDHasPrefix(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLineID), v))
	})
}

// LineIDHasSuffix applies the HasSuffix predicate on the "line_id" field.
func LineIDHasSuffix(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLineID), v))
	})
}

// LineIDEqualFold applies the EqualFold predicate on the "line_id" field.
func LineIDEqualFold(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLineID), v))
	})
}

// LineIDContainsFold applies the ContainsFold predicate on the "line_id" field.
func LineIDContainsFold(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLineID), v))
	})
}

// LineClientIDEQ applies the EQ predicate on the "line_client_id" field.
func LineClientIDEQ(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLineClientID), v))
	})
}

// LineClientIDNEQ applies the NEQ predicate on the "line_client_id" field.
func LineClientIDNEQ(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLineClientID), v))
	})
}

// LineClientIDIn applies the In predicate on the "line_client_id" field.
func LineClientIDIn(vs ...string) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLineClientID), v...))
	})
}

// LineClientIDNotIn applies the NotIn predicate on the "line_client_id" field.
func LineClientIDNotIn(vs ...string) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLineClientID), v...))
	})
}

// LineClientIDGT applies the GT predicate on the "line_client_id" field.
func LineClientIDGT(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLineClientID), v))
	})
}

// LineClientIDGTE applies the GTE predicate on the "line_client_id" field.
func LineClientIDGTE(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLineClientID), v))
	})
}

// LineClientIDLT applies the LT predicate on the "line_client_id" field.
func LineClientIDLT(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLineClientID), v))
	})
}

// LineClientIDLTE applies the LTE predicate on the "line_client_id" field.
func LineClientIDLTE(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLineClientID), v))
	})
}

// LineClientIDContains applies the Contains predicate on the "line_client_id" field.
func LineClientIDContains(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLineClientID), v))
	})
}

// LineClientIDHasPrefix applies the HasPrefix predicate on the "line_client_id" field.
func LineClientIDHasPrefix(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLineClientID), v))
	})
}

// LineClientIDHasSuffix applies the HasSuffix predicate on the "line_client_id" field.
func LineClientIDHasSuffix(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLineClientID), v))
	})
}

// LineClientIDIsNil applies the IsNil predicate on the "line_client_id" field.
func LineClientIDIsNil() predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLineClientID)))
	})
}

// LineClientIDNotNil applies the NotNil predicate on the "line_client_id" field.
func LineClientIDNotNil() predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLineClientID)))
	})
}

// LineClientIDEqualFold applies the EqualFold predicate on the "line_client_id" field.
func LineClientIDEqualFold(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLineClientID), v))
	})
}

// LineClientIDContainsFold applies the ContainsFold predicate on the "line_client_id" field.
func LineClientIDContainsFold(v string) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLineClientID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), vc))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LineAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.LineAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), vc))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LineAccount {
	vc := time.Time(v)
	return predicate.LineAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), vc))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LineAccount) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LineAccount) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LineAccount) predicate.LineAccount {
	return predicate.LineAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
