// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/prettygameaccount"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PrettyGameAccountCreate is the builder for creating a PrettyGameAccount entity.
type PrettyGameAccountCreate struct {
	config
	mutation *PrettyGameAccountMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (pgac *PrettyGameAccountCreate) SetUUID(u uuid.UUID) *PrettyGameAccountCreate {
	pgac.mutation.SetUUID(u)
	return pgac
}

// SetUsername sets the "username" field.
func (pgac *PrettyGameAccountCreate) SetUsername(s string) *PrettyGameAccountCreate {
	pgac.mutation.SetUsername(s)
	return pgac
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillableUsername(s *string) *PrettyGameAccountCreate {
	if s != nil {
		pgac.SetUsername(*s)
	}
	return pgac
}

// SetPassword sets the "password" field.
func (pgac *PrettyGameAccountCreate) SetPassword(s string) *PrettyGameAccountCreate {
	pgac.mutation.SetPassword(s)
	return pgac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillablePassword(s *string) *PrettyGameAccountCreate {
	if s != nil {
		pgac.SetPassword(*s)
	}
	return pgac
}

// SetDesktopURI sets the "desktop_uri" field.
func (pgac *PrettyGameAccountCreate) SetDesktopURI(s string) *PrettyGameAccountCreate {
	pgac.mutation.SetDesktopURI(s)
	return pgac
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillableDesktopURI(s *string) *PrettyGameAccountCreate {
	if s != nil {
		pgac.SetDesktopURI(*s)
	}
	return pgac
}

// SetMobileURI sets the "mobile_uri" field.
func (pgac *PrettyGameAccountCreate) SetMobileURI(s string) *PrettyGameAccountCreate {
	pgac.mutation.SetMobileURI(s)
	return pgac
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillableMobileURI(s *string) *PrettyGameAccountCreate {
	if s != nil {
		pgac.SetMobileURI(*s)
	}
	return pgac
}

// SetCreatedAt sets the "created_at" field.
func (pgac *PrettyGameAccountCreate) SetCreatedAt(t time.Time) *PrettyGameAccountCreate {
	pgac.mutation.SetCreatedAt(t)
	return pgac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillableCreatedAt(t *time.Time) *PrettyGameAccountCreate {
	if t != nil {
		pgac.SetCreatedAt(*t)
	}
	return pgac
}

// SetUpdatedAt sets the "updated_at" field.
func (pgac *PrettyGameAccountCreate) SetUpdatedAt(t time.Time) *PrettyGameAccountCreate {
	pgac.mutation.SetUpdatedAt(t)
	return pgac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillableUpdatedAt(t *time.Time) *PrettyGameAccountCreate {
	if t != nil {
		pgac.SetUpdatedAt(*t)
	}
	return pgac
}

// SetRawData sets the "raw_data" field.
func (pgac *PrettyGameAccountCreate) SetRawData(s string) *PrettyGameAccountCreate {
	pgac.mutation.SetRawData(s)
	return pgac
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillableRawData(s *string) *PrettyGameAccountCreate {
	if s != nil {
		pgac.SetRawData(*s)
	}
	return pgac
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (pgac *PrettyGameAccountCreate) SetOwnerID(id int) *PrettyGameAccountCreate {
	pgac.mutation.SetOwnerID(id)
	return pgac
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (pgac *PrettyGameAccountCreate) SetNillableOwnerID(id *int) *PrettyGameAccountCreate {
	if id != nil {
		pgac = pgac.SetOwnerID(*id)
	}
	return pgac
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (pgac *PrettyGameAccountCreate) SetOwner(g *GameAccount) *PrettyGameAccountCreate {
	return pgac.SetOwnerID(g.ID)
}

// Mutation returns the PrettyGameAccountMutation object of the builder.
func (pgac *PrettyGameAccountCreate) Mutation() *PrettyGameAccountMutation {
	return pgac.mutation
}

// Save creates the PrettyGameAccount in the database.
func (pgac *PrettyGameAccountCreate) Save(ctx context.Context) (*PrettyGameAccount, error) {
	var (
		err  error
		node *PrettyGameAccount
	)
	pgac.defaults()
	if len(pgac.hooks) == 0 {
		if err = pgac.check(); err != nil {
			return nil, err
		}
		node, err = pgac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrettyGameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pgac.check(); err != nil {
				return nil, err
			}
			pgac.mutation = mutation
			if node, err = pgac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pgac.hooks) - 1; i >= 0; i-- {
			if pgac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pgac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pgac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pgac *PrettyGameAccountCreate) SaveX(ctx context.Context) *PrettyGameAccount {
	v, err := pgac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgac *PrettyGameAccountCreate) Exec(ctx context.Context) error {
	_, err := pgac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgac *PrettyGameAccountCreate) ExecX(ctx context.Context) {
	if err := pgac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgac *PrettyGameAccountCreate) defaults() {
	if _, ok := pgac.mutation.UUID(); !ok {
		v := prettygameaccount.DefaultUUID()
		pgac.mutation.SetUUID(v)
	}
	if _, ok := pgac.mutation.CreatedAt(); !ok {
		v := prettygameaccount.DefaultCreatedAt()
		pgac.mutation.SetCreatedAt(v)
	}
	if _, ok := pgac.mutation.UpdatedAt(); !ok {
		v := prettygameaccount.DefaultUpdatedAt()
		pgac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgac *PrettyGameAccountCreate) check() error {
	if _, ok := pgac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if v, ok := pgac.mutation.DesktopURI(); ok {
		if err := prettygameaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf(`ent: validator failed for field "desktop_uri": %w`, err)}
		}
	}
	if v, ok := pgac.mutation.MobileURI(); ok {
		if err := prettygameaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf(`ent: validator failed for field "mobile_uri": %w`, err)}
		}
	}
	if _, ok := pgac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pgac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (pgac *PrettyGameAccountCreate) sqlSave(ctx context.Context) (*PrettyGameAccount, error) {
	_node, _spec := pgac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pgac *PrettyGameAccountCreate) createSpec() (*PrettyGameAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &PrettyGameAccount{config: pgac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: prettygameaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prettygameaccount.FieldID,
			},
		}
	)
	if value, ok := pgac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: prettygameaccount.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := pgac.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := pgac.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := pgac.mutation.DesktopURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldDesktopURI,
		})
		_node.DesktopURI = value
	}
	if value, ok := pgac.mutation.MobileURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldMobileURI,
		})
		_node.MobileURI = value
	}
	if value, ok := pgac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prettygameaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pgac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prettygameaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pgac.mutation.RawData(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prettygameaccount.FieldRawData,
		})
		_node.RawData = value
	}
	if nodes := pgac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prettygameaccount.OwnerTable,
			Columns: []string{prettygameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_account_pretty = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PrettyGameAccountCreateBulk is the builder for creating many PrettyGameAccount entities in bulk.
type PrettyGameAccountCreateBulk struct {
	config
	builders []*PrettyGameAccountCreate
}

// Save creates the PrettyGameAccount entities in the database.
func (pgacb *PrettyGameAccountCreateBulk) Save(ctx context.Context) ([]*PrettyGameAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pgacb.builders))
	nodes := make([]*PrettyGameAccount, len(pgacb.builders))
	mutators := make([]Mutator, len(pgacb.builders))
	for i := range pgacb.builders {
		func(i int, root context.Context) {
			builder := pgacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrettyGameAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgacb *PrettyGameAccountCreateBulk) SaveX(ctx context.Context) []*PrettyGameAccount {
	v, err := pgacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgacb *PrettyGameAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := pgacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgacb *PrettyGameAccountCreateBulk) ExecX(ctx context.Context) {
	if err := pgacb.Exec(ctx); err != nil {
		panic(err)
	}
}
