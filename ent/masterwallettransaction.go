// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wynn-member-api/ent/masterwallettransaction"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MasterWalletTransaction is the model entity for the MasterWalletTransaction schema.
type MasterWalletTransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Debit holds the value of the "debit" field.
	Debit float32 `json:"debit,omitempty"`
	// Credit holds the value of the "credit" field.
	Credit float32 `json:"credit,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float32 `json:"balance,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// TxnType holds the value of the "txn_type" field.
	TxnType masterwallettransaction.TxnType `json:"txn_type,omitempty"`
	// Status holds the value of the "status" field.
	Status masterwallettransaction.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MasterWalletTransactionQuery when eager-loading is set.
	Edges       MasterWalletTransactionEdges `json:"edges"`
	user_wallet *int
}

// MasterWalletTransactionEdges holds the relations/edges for other nodes in the graph.
type MasterWalletTransactionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MasterWalletTransactionEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MasterWalletTransaction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case masterwallettransaction.FieldDebit, masterwallettransaction.FieldCredit, masterwallettransaction.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case masterwallettransaction.FieldID:
			values[i] = new(sql.NullInt64)
		case masterwallettransaction.FieldRemark, masterwallettransaction.FieldTxnType, masterwallettransaction.FieldStatus:
			values[i] = new(sql.NullString)
		case masterwallettransaction.FieldCreatedAt, masterwallettransaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case masterwallettransaction.FieldUUID:
			values[i] = new(uuid.UUID)
		case masterwallettransaction.ForeignKeys[0]: // user_wallet
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MasterWalletTransaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MasterWalletTransaction fields.
func (mwt *MasterWalletTransaction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case masterwallettransaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mwt.ID = int(value.Int64)
		case masterwallettransaction.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				mwt.UUID = *value
			}
		case masterwallettransaction.FieldDebit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field debit", values[i])
			} else if value.Valid {
				mwt.Debit = float32(value.Float64)
			}
		case masterwallettransaction.FieldCredit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field credit", values[i])
			} else if value.Valid {
				mwt.Credit = float32(value.Float64)
			}
		case masterwallettransaction.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				mwt.Balance = float32(value.Float64)
			}
		case masterwallettransaction.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				mwt.Remark = value.String
			}
		case masterwallettransaction.FieldTxnType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txn_type", values[i])
			} else if value.Valid {
				mwt.TxnType = masterwallettransaction.TxnType(value.String)
			}
		case masterwallettransaction.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mwt.Status = masterwallettransaction.Status(value.String)
			}
		case masterwallettransaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mwt.CreatedAt = value.Time
			}
		case masterwallettransaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mwt.UpdatedAt = value.Time
			}
		case masterwallettransaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_wallet", value)
			} else if value.Valid {
				mwt.user_wallet = new(int)
				*mwt.user_wallet = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the MasterWalletTransaction entity.
func (mwt *MasterWalletTransaction) QueryOwner() *UserQuery {
	return (&MasterWalletTransactionClient{config: mwt.config}).QueryOwner(mwt)
}

// Update returns a builder for updating this MasterWalletTransaction.
// Note that you need to call MasterWalletTransaction.Unwrap() before calling this method if this MasterWalletTransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (mwt *MasterWalletTransaction) Update() *MasterWalletTransactionUpdateOne {
	return (&MasterWalletTransactionClient{config: mwt.config}).UpdateOne(mwt)
}

// Unwrap unwraps the MasterWalletTransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mwt *MasterWalletTransaction) Unwrap() *MasterWalletTransaction {
	tx, ok := mwt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MasterWalletTransaction is not a transactional entity")
	}
	mwt.config.driver = tx.drv
	return mwt
}

// String implements the fmt.Stringer.
func (mwt *MasterWalletTransaction) String() string {
	var builder strings.Builder
	builder.WriteString("MasterWalletTransaction(")
	builder.WriteString(fmt.Sprintf("id=%v", mwt.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", mwt.UUID))
	builder.WriteString(", debit=")
	builder.WriteString(fmt.Sprintf("%v", mwt.Debit))
	builder.WriteString(", credit=")
	builder.WriteString(fmt.Sprintf("%v", mwt.Credit))
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", mwt.Balance))
	builder.WriteString(", remark=")
	builder.WriteString(mwt.Remark)
	builder.WriteString(", txn_type=")
	builder.WriteString(fmt.Sprintf("%v", mwt.TxnType))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", mwt.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", mwt.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", mwt.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// MasterWalletTransactions is a parsable slice of MasterWalletTransaction.
type MasterWalletTransactions []*MasterWalletTransaction

func (mwt MasterWalletTransactions) config(cfg config) {
	for _i := range mwt {
		mwt[_i].config = cfg
	}
}
