// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wynn-member-api/ent/masterwallettransaction"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MasterWalletTransactionCreate is the builder for creating a MasterWalletTransaction entity.
type MasterWalletTransactionCreate struct {
	config
	mutation *MasterWalletTransactionMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (mwtc *MasterWalletTransactionCreate) SetUUID(u uuid.UUID) *MasterWalletTransactionCreate {
	mwtc.mutation.SetUUID(u)
	return mwtc
}

// SetDebit sets the "debit" field.
func (mwtc *MasterWalletTransactionCreate) SetDebit(f float32) *MasterWalletTransactionCreate {
	mwtc.mutation.SetDebit(f)
	return mwtc
}

// SetNillableDebit sets the "debit" field if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableDebit(f *float32) *MasterWalletTransactionCreate {
	if f != nil {
		mwtc.SetDebit(*f)
	}
	return mwtc
}

// SetCredit sets the "credit" field.
func (mwtc *MasterWalletTransactionCreate) SetCredit(f float32) *MasterWalletTransactionCreate {
	mwtc.mutation.SetCredit(f)
	return mwtc
}

// SetNillableCredit sets the "credit" field if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableCredit(f *float32) *MasterWalletTransactionCreate {
	if f != nil {
		mwtc.SetCredit(*f)
	}
	return mwtc
}

// SetBalance sets the "balance" field.
func (mwtc *MasterWalletTransactionCreate) SetBalance(f float32) *MasterWalletTransactionCreate {
	mwtc.mutation.SetBalance(f)
	return mwtc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableBalance(f *float32) *MasterWalletTransactionCreate {
	if f != nil {
		mwtc.SetBalance(*f)
	}
	return mwtc
}

// SetRemark sets the "remark" field.
func (mwtc *MasterWalletTransactionCreate) SetRemark(s string) *MasterWalletTransactionCreate {
	mwtc.mutation.SetRemark(s)
	return mwtc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableRemark(s *string) *MasterWalletTransactionCreate {
	if s != nil {
		mwtc.SetRemark(*s)
	}
	return mwtc
}

// SetTxnType sets the "txn_type" field.
func (mwtc *MasterWalletTransactionCreate) SetTxnType(mt masterwallettransaction.TxnType) *MasterWalletTransactionCreate {
	mwtc.mutation.SetTxnType(mt)
	return mwtc
}

// SetStatus sets the "status" field.
func (mwtc *MasterWalletTransactionCreate) SetStatus(m masterwallettransaction.Status) *MasterWalletTransactionCreate {
	mwtc.mutation.SetStatus(m)
	return mwtc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableStatus(m *masterwallettransaction.Status) *MasterWalletTransactionCreate {
	if m != nil {
		mwtc.SetStatus(*m)
	}
	return mwtc
}

// SetCreatedAt sets the "created_at" field.
func (mwtc *MasterWalletTransactionCreate) SetCreatedAt(t time.Time) *MasterWalletTransactionCreate {
	mwtc.mutation.SetCreatedAt(t)
	return mwtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableCreatedAt(t *time.Time) *MasterWalletTransactionCreate {
	if t != nil {
		mwtc.SetCreatedAt(*t)
	}
	return mwtc
}

// SetUpdatedAt sets the "updated_at" field.
func (mwtc *MasterWalletTransactionCreate) SetUpdatedAt(t time.Time) *MasterWalletTransactionCreate {
	mwtc.mutation.SetUpdatedAt(t)
	return mwtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableUpdatedAt(t *time.Time) *MasterWalletTransactionCreate {
	if t != nil {
		mwtc.SetUpdatedAt(*t)
	}
	return mwtc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (mwtc *MasterWalletTransactionCreate) SetOwnerID(id int) *MasterWalletTransactionCreate {
	mwtc.mutation.SetOwnerID(id)
	return mwtc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (mwtc *MasterWalletTransactionCreate) SetNillableOwnerID(id *int) *MasterWalletTransactionCreate {
	if id != nil {
		mwtc = mwtc.SetOwnerID(*id)
	}
	return mwtc
}

// SetOwner sets the "owner" edge to the User entity.
func (mwtc *MasterWalletTransactionCreate) SetOwner(u *User) *MasterWalletTransactionCreate {
	return mwtc.SetOwnerID(u.ID)
}

// Mutation returns the MasterWalletTransactionMutation object of the builder.
func (mwtc *MasterWalletTransactionCreate) Mutation() *MasterWalletTransactionMutation {
	return mwtc.mutation
}

// Save creates the MasterWalletTransaction in the database.
func (mwtc *MasterWalletTransactionCreate) Save(ctx context.Context) (*MasterWalletTransaction, error) {
	var (
		err  error
		node *MasterWalletTransaction
	)
	mwtc.defaults()
	if len(mwtc.hooks) == 0 {
		if err = mwtc.check(); err != nil {
			return nil, err
		}
		node, err = mwtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MasterWalletTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mwtc.check(); err != nil {
				return nil, err
			}
			mwtc.mutation = mutation
			if node, err = mwtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mwtc.hooks) - 1; i >= 0; i-- {
			if mwtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mwtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mwtc *MasterWalletTransactionCreate) SaveX(ctx context.Context) *MasterWalletTransaction {
	v, err := mwtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mwtc *MasterWalletTransactionCreate) Exec(ctx context.Context) error {
	_, err := mwtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwtc *MasterWalletTransactionCreate) ExecX(ctx context.Context) {
	if err := mwtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mwtc *MasterWalletTransactionCreate) defaults() {
	if _, ok := mwtc.mutation.UUID(); !ok {
		v := masterwallettransaction.DefaultUUID()
		mwtc.mutation.SetUUID(v)
	}
	if _, ok := mwtc.mutation.Debit(); !ok {
		v := masterwallettransaction.DefaultDebit
		mwtc.mutation.SetDebit(v)
	}
	if _, ok := mwtc.mutation.Credit(); !ok {
		v := masterwallettransaction.DefaultCredit
		mwtc.mutation.SetCredit(v)
	}
	if _, ok := mwtc.mutation.Balance(); !ok {
		v := masterwallettransaction.DefaultBalance
		mwtc.mutation.SetBalance(v)
	}
	if _, ok := mwtc.mutation.Status(); !ok {
		v := masterwallettransaction.DefaultStatus
		mwtc.mutation.SetStatus(v)
	}
	if _, ok := mwtc.mutation.CreatedAt(); !ok {
		v := masterwallettransaction.DefaultCreatedAt()
		mwtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mwtc.mutation.UpdatedAt(); !ok {
		v := masterwallettransaction.DefaultUpdatedAt()
		mwtc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mwtc *MasterWalletTransactionCreate) check() error {
	if _, ok := mwtc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if _, ok := mwtc.mutation.Debit(); !ok {
		return &ValidationError{Name: "debit", err: errors.New(`ent: missing required field "debit"`)}
	}
	if _, ok := mwtc.mutation.Credit(); !ok {
		return &ValidationError{Name: "credit", err: errors.New(`ent: missing required field "credit"`)}
	}
	if _, ok := mwtc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "balance"`)}
	}
	if _, ok := mwtc.mutation.TxnType(); !ok {
		return &ValidationError{Name: "txn_type", err: errors.New(`ent: missing required field "txn_type"`)}
	}
	if v, ok := mwtc.mutation.TxnType(); ok {
		if err := masterwallettransaction.TxnTypeValidator(v); err != nil {
			return &ValidationError{Name: "txn_type", err: fmt.Errorf(`ent: validator failed for field "txn_type": %w`, err)}
		}
	}
	if _, ok := mwtc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := mwtc.mutation.Status(); ok {
		if err := masterwallettransaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	if _, ok := mwtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := mwtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (mwtc *MasterWalletTransactionCreate) sqlSave(ctx context.Context) (*MasterWalletTransaction, error) {
	_node, _spec := mwtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mwtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mwtc *MasterWalletTransactionCreate) createSpec() (*MasterWalletTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &MasterWalletTransaction{config: mwtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: masterwallettransaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: masterwallettransaction.FieldID,
			},
		}
	)
	if value, ok := mwtc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: masterwallettransaction.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := mwtc.mutation.Debit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldDebit,
		})
		_node.Debit = value
	}
	if value, ok := mwtc.mutation.Credit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldCredit,
		})
		_node.Credit = value
	}
	if value, ok := mwtc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: masterwallettransaction.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := mwtc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: masterwallettransaction.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := mwtc.mutation.TxnType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: masterwallettransaction.FieldTxnType,
		})
		_node.TxnType = value
	}
	if value, ok := mwtc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: masterwallettransaction.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mwtc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: masterwallettransaction.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mwtc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: masterwallettransaction.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := mwtc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   masterwallettransaction.OwnerTable,
			Columns: []string{masterwallettransaction.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_wallet = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MasterWalletTransactionCreateBulk is the builder for creating many MasterWalletTransaction entities in bulk.
type MasterWalletTransactionCreateBulk struct {
	config
	builders []*MasterWalletTransactionCreate
}

// Save creates the MasterWalletTransaction entities in the database.
func (mwtcb *MasterWalletTransactionCreateBulk) Save(ctx context.Context) ([]*MasterWalletTransaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mwtcb.builders))
	nodes := make([]*MasterWalletTransaction, len(mwtcb.builders))
	mutators := make([]Mutator, len(mwtcb.builders))
	for i := range mwtcb.builders {
		func(i int, root context.Context) {
			builder := mwtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MasterWalletTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mwtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mwtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mwtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mwtcb *MasterWalletTransactionCreateBulk) SaveX(ctx context.Context) []*MasterWalletTransaction {
	v, err := mwtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mwtcb *MasterWalletTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := mwtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwtcb *MasterWalletTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := mwtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
