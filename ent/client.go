// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"wynn-member-api/ent/migrate"

	"wynn-member-api/ent/accesstoken"
	"wynn-member-api/ent/bank"
	"wynn-member-api/ent/bankaccount"
	"wynn-member-api/ent/channel"
	"wynn-member-api/ent/game"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/lineaccount"
	"wynn-member-api/ent/masterwallettransaction"
	"wynn-member-api/ent/pgslotaccount"
	"wynn-member-api/ent/prettygameaccount"
	"wynn-member-api/ent/sagameaccount"
	"wynn-member-api/ent/transfertransaction"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccessToken is the client for interacting with the AccessToken builders.
	AccessToken *AccessTokenClient
	// Bank is the client for interacting with the Bank builders.
	Bank *BankClient
	// BankAccount is the client for interacting with the BankAccount builders.
	BankAccount *BankAccountClient
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// Game is the client for interacting with the Game builders.
	Game *GameClient
	// GameAccount is the client for interacting with the GameAccount builders.
	GameAccount *GameAccountClient
	// LineAccount is the client for interacting with the LineAccount builders.
	LineAccount *LineAccountClient
	// MasterWalletTransaction is the client for interacting with the MasterWalletTransaction builders.
	MasterWalletTransaction *MasterWalletTransactionClient
	// PgSlotAccount is the client for interacting with the PgSlotAccount builders.
	PgSlotAccount *PgSlotAccountClient
	// PrettyGameAccount is the client for interacting with the PrettyGameAccount builders.
	PrettyGameAccount *PrettyGameAccountClient
	// SAGameAccount is the client for interacting with the SAGameAccount builders.
	SAGameAccount *SAGameAccountClient
	// TransferTransaction is the client for interacting with the TransferTransaction builders.
	TransferTransaction *TransferTransactionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccessToken = NewAccessTokenClient(c.config)
	c.Bank = NewBankClient(c.config)
	c.BankAccount = NewBankAccountClient(c.config)
	c.Channel = NewChannelClient(c.config)
	c.Game = NewGameClient(c.config)
	c.GameAccount = NewGameAccountClient(c.config)
	c.LineAccount = NewLineAccountClient(c.config)
	c.MasterWalletTransaction = NewMasterWalletTransactionClient(c.config)
	c.PgSlotAccount = NewPgSlotAccountClient(c.config)
	c.PrettyGameAccount = NewPrettyGameAccountClient(c.config)
	c.SAGameAccount = NewSAGameAccountClient(c.config)
	c.TransferTransaction = NewTransferTransactionClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		AccessToken:             NewAccessTokenClient(cfg),
		Bank:                    NewBankClient(cfg),
		BankAccount:             NewBankAccountClient(cfg),
		Channel:                 NewChannelClient(cfg),
		Game:                    NewGameClient(cfg),
		GameAccount:             NewGameAccountClient(cfg),
		LineAccount:             NewLineAccountClient(cfg),
		MasterWalletTransaction: NewMasterWalletTransactionClient(cfg),
		PgSlotAccount:           NewPgSlotAccountClient(cfg),
		PrettyGameAccount:       NewPrettyGameAccountClient(cfg),
		SAGameAccount:           NewSAGameAccountClient(cfg),
		TransferTransaction:     NewTransferTransactionClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                  cfg,
		AccessToken:             NewAccessTokenClient(cfg),
		Bank:                    NewBankClient(cfg),
		BankAccount:             NewBankAccountClient(cfg),
		Channel:                 NewChannelClient(cfg),
		Game:                    NewGameClient(cfg),
		GameAccount:             NewGameAccountClient(cfg),
		LineAccount:             NewLineAccountClient(cfg),
		MasterWalletTransaction: NewMasterWalletTransactionClient(cfg),
		PgSlotAccount:           NewPgSlotAccountClient(cfg),
		PrettyGameAccount:       NewPrettyGameAccountClient(cfg),
		SAGameAccount:           NewSAGameAccountClient(cfg),
		TransferTransaction:     NewTransferTransactionClient(cfg),
		User:                    NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccessToken.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AccessToken.Use(hooks...)
	c.Bank.Use(hooks...)
	c.BankAccount.Use(hooks...)
	c.Channel.Use(hooks...)
	c.Game.Use(hooks...)
	c.GameAccount.Use(hooks...)
	c.LineAccount.Use(hooks...)
	c.MasterWalletTransaction.Use(hooks...)
	c.PgSlotAccount.Use(hooks...)
	c.PrettyGameAccount.Use(hooks...)
	c.SAGameAccount.Use(hooks...)
	c.TransferTransaction.Use(hooks...)
	c.User.Use(hooks...)
}

// AccessTokenClient is a client for the AccessToken schema.
type AccessTokenClient struct {
	config
}

// NewAccessTokenClient returns a client for the AccessToken from the given config.
func NewAccessTokenClient(c config) *AccessTokenClient {
	return &AccessTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accesstoken.Hooks(f(g(h())))`.
func (c *AccessTokenClient) Use(hooks ...Hook) {
	c.hooks.AccessToken = append(c.hooks.AccessToken, hooks...)
}

// Create returns a create builder for AccessToken.
func (c *AccessTokenClient) Create() *AccessTokenCreate {
	mutation := newAccessTokenMutation(c.config, OpCreate)
	return &AccessTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccessToken entities.
func (c *AccessTokenClient) CreateBulk(builders ...*AccessTokenCreate) *AccessTokenCreateBulk {
	return &AccessTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccessToken.
func (c *AccessTokenClient) Update() *AccessTokenUpdate {
	mutation := newAccessTokenMutation(c.config, OpUpdate)
	return &AccessTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessTokenClient) UpdateOne(at *AccessToken) *AccessTokenUpdateOne {
	mutation := newAccessTokenMutation(c.config, OpUpdateOne, withAccessToken(at))
	return &AccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessTokenClient) UpdateOneID(id int) *AccessTokenUpdateOne {
	mutation := newAccessTokenMutation(c.config, OpUpdateOne, withAccessTokenID(id))
	return &AccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccessToken.
func (c *AccessTokenClient) Delete() *AccessTokenDelete {
	mutation := newAccessTokenMutation(c.config, OpDelete)
	return &AccessTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccessTokenClient) DeleteOne(at *AccessToken) *AccessTokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccessTokenClient) DeleteOneID(id int) *AccessTokenDeleteOne {
	builder := c.Delete().Where(accesstoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessTokenDeleteOne{builder}
}

// Query returns a query builder for AccessToken.
func (c *AccessTokenClient) Query() *AccessTokenQuery {
	return &AccessTokenQuery{
		config: c.config,
	}
}

// Get returns a AccessToken entity by its id.
func (c *AccessTokenClient) Get(ctx context.Context, id int) (*AccessToken, error) {
	return c.Query().Where(accesstoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessTokenClient) GetX(ctx context.Context, id int) *AccessToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a AccessToken.
func (c *AccessTokenClient) QueryOwner(at *AccessToken) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accesstoken.Table, accesstoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accesstoken.OwnerTable, accesstoken.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccessTokenClient) Hooks() []Hook {
	return c.hooks.AccessToken
}

// BankClient is a client for the Bank schema.
type BankClient struct {
	config
}

// NewBankClient returns a client for the Bank from the given config.
func NewBankClient(c config) *BankClient {
	return &BankClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bank.Hooks(f(g(h())))`.
func (c *BankClient) Use(hooks ...Hook) {
	c.hooks.Bank = append(c.hooks.Bank, hooks...)
}

// Create returns a create builder for Bank.
func (c *BankClient) Create() *BankCreate {
	mutation := newBankMutation(c.config, OpCreate)
	return &BankCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bank entities.
func (c *BankClient) CreateBulk(builders ...*BankCreate) *BankCreateBulk {
	return &BankCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bank.
func (c *BankClient) Update() *BankUpdate {
	mutation := newBankMutation(c.config, OpUpdate)
	return &BankUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankClient) UpdateOne(b *Bank) *BankUpdateOne {
	mutation := newBankMutation(c.config, OpUpdateOne, withBank(b))
	return &BankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BankClient) UpdateOneID(id int) *BankUpdateOne {
	mutation := newBankMutation(c.config, OpUpdateOne, withBankID(id))
	return &BankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bank.
func (c *BankClient) Delete() *BankDelete {
	mutation := newBankMutation(c.config, OpDelete)
	return &BankDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BankClient) DeleteOne(b *Bank) *BankDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BankClient) DeleteOneID(id int) *BankDeleteOne {
	builder := c.Delete().Where(bank.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BankDeleteOne{builder}
}

// Query returns a query builder for Bank.
func (c *BankClient) Query() *BankQuery {
	return &BankQuery{
		config: c.config,
	}
}

// Get returns a Bank entity by its id.
func (c *BankClient) Get(ctx context.Context, id int) (*Bank, error) {
	return c.Query().Where(bank.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankClient) GetX(ctx context.Context, id int) *Bank {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccounts queries the accounts edge of a Bank.
func (c *BankClient) QueryAccounts(b *Bank) *BankAccountQuery {
	query := &BankAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bank.Table, bank.FieldID, id),
			sqlgraph.To(bankaccount.Table, bankaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bank.AccountsTable, bank.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BankClient) Hooks() []Hook {
	return c.hooks.Bank
}

// BankAccountClient is a client for the BankAccount schema.
type BankAccountClient struct {
	config
}

// NewBankAccountClient returns a client for the BankAccount from the given config.
func NewBankAccountClient(c config) *BankAccountClient {
	return &BankAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bankaccount.Hooks(f(g(h())))`.
func (c *BankAccountClient) Use(hooks ...Hook) {
	c.hooks.BankAccount = append(c.hooks.BankAccount, hooks...)
}

// Create returns a create builder for BankAccount.
func (c *BankAccountClient) Create() *BankAccountCreate {
	mutation := newBankAccountMutation(c.config, OpCreate)
	return &BankAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BankAccount entities.
func (c *BankAccountClient) CreateBulk(builders ...*BankAccountCreate) *BankAccountCreateBulk {
	return &BankAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BankAccount.
func (c *BankAccountClient) Update() *BankAccountUpdate {
	mutation := newBankAccountMutation(c.config, OpUpdate)
	return &BankAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankAccountClient) UpdateOne(ba *BankAccount) *BankAccountUpdateOne {
	mutation := newBankAccountMutation(c.config, OpUpdateOne, withBankAccount(ba))
	return &BankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BankAccountClient) UpdateOneID(id int) *BankAccountUpdateOne {
	mutation := newBankAccountMutation(c.config, OpUpdateOne, withBankAccountID(id))
	return &BankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BankAccount.
func (c *BankAccountClient) Delete() *BankAccountDelete {
	mutation := newBankAccountMutation(c.config, OpDelete)
	return &BankAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BankAccountClient) DeleteOne(ba *BankAccount) *BankAccountDeleteOne {
	return c.DeleteOneID(ba.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BankAccountClient) DeleteOneID(id int) *BankAccountDeleteOne {
	builder := c.Delete().Where(bankaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BankAccountDeleteOne{builder}
}

// Query returns a query builder for BankAccount.
func (c *BankAccountClient) Query() *BankAccountQuery {
	return &BankAccountQuery{
		config: c.config,
	}
}

// Get returns a BankAccount entity by its id.
func (c *BankAccountClient) Get(ctx context.Context, id int) (*BankAccount, error) {
	return c.Query().Where(bankaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankAccountClient) GetX(ctx context.Context, id int) *BankAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a BankAccount.
func (c *BankAccountClient) QueryOwner(ba *BankAccount) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bankaccount.Table, bankaccount.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bankaccount.OwnerTable, bankaccount.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBank queries the bank edge of a BankAccount.
func (c *BankAccountClient) QueryBank(ba *BankAccount) *BankQuery {
	query := &BankQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bankaccount.Table, bankaccount.FieldID, id),
			sqlgraph.To(bank.Table, bank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bankaccount.BankTable, bankaccount.BankColumn),
		)
		fromV = sqlgraph.Neighbors(ba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BankAccountClient) Hooks() []Hook {
	return c.hooks.BankAccount
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Create returns a create builder for Channel.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id int) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChannelClient) DeleteOneID(id int) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{
		config: c.config,
	}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id int) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id int) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Channel.
func (c *ChannelClient) QueryUser(ch *Channel) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.UserTable, channel.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	return c.hooks.Channel
}

// GameClient is a client for the Game schema.
type GameClient struct {
	config
}

// NewGameClient returns a client for the Game from the given config.
func NewGameClient(c config) *GameClient {
	return &GameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `game.Hooks(f(g(h())))`.
func (c *GameClient) Use(hooks ...Hook) {
	c.hooks.Game = append(c.hooks.Game, hooks...)
}

// Create returns a create builder for Game.
func (c *GameClient) Create() *GameCreate {
	mutation := newGameMutation(c.config, OpCreate)
	return &GameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Game entities.
func (c *GameClient) CreateBulk(builders ...*GameCreate) *GameCreateBulk {
	return &GameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Game.
func (c *GameClient) Update() *GameUpdate {
	mutation := newGameMutation(c.config, OpUpdate)
	return &GameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameClient) UpdateOne(ga *Game) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGame(ga))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameClient) UpdateOneID(id int) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGameID(id))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Game.
func (c *GameClient) Delete() *GameDelete {
	mutation := newGameMutation(c.config, OpDelete)
	return &GameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GameClient) DeleteOne(ga *Game) *GameDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GameClient) DeleteOneID(id int) *GameDeleteOne {
	builder := c.Delete().Where(game.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameDeleteOne{builder}
}

// Query returns a query builder for Game.
func (c *GameClient) Query() *GameQuery {
	return &GameQuery{
		config: c.config,
	}
}

// Get returns a Game entity by its id.
func (c *GameClient) Get(ctx context.Context, id int) (*Game, error) {
	return c.Query().Where(game.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameClient) GetX(ctx context.Context, id int) *Game {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccounts queries the accounts edge of a Game.
func (c *GameClient) QueryAccounts(ga *Game) *GameAccountQuery {
	query := &GameAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(gameaccount.Table, gameaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.AccountsTable, game.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransfers queries the transfers edge of a Game.
func (c *GameClient) QueryTransfers(ga *Game) *TransferTransactionQuery {
	query := &TransferTransactionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(transfertransaction.Table, transfertransaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.TransfersTable, game.TransfersColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameClient) Hooks() []Hook {
	return c.hooks.Game
}

// GameAccountClient is a client for the GameAccount schema.
type GameAccountClient struct {
	config
}

// NewGameAccountClient returns a client for the GameAccount from the given config.
func NewGameAccountClient(c config) *GameAccountClient {
	return &GameAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gameaccount.Hooks(f(g(h())))`.
func (c *GameAccountClient) Use(hooks ...Hook) {
	c.hooks.GameAccount = append(c.hooks.GameAccount, hooks...)
}

// Create returns a create builder for GameAccount.
func (c *GameAccountClient) Create() *GameAccountCreate {
	mutation := newGameAccountMutation(c.config, OpCreate)
	return &GameAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameAccount entities.
func (c *GameAccountClient) CreateBulk(builders ...*GameAccountCreate) *GameAccountCreateBulk {
	return &GameAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameAccount.
func (c *GameAccountClient) Update() *GameAccountUpdate {
	mutation := newGameAccountMutation(c.config, OpUpdate)
	return &GameAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameAccountClient) UpdateOne(ga *GameAccount) *GameAccountUpdateOne {
	mutation := newGameAccountMutation(c.config, OpUpdateOne, withGameAccount(ga))
	return &GameAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameAccountClient) UpdateOneID(id int) *GameAccountUpdateOne {
	mutation := newGameAccountMutation(c.config, OpUpdateOne, withGameAccountID(id))
	return &GameAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameAccount.
func (c *GameAccountClient) Delete() *GameAccountDelete {
	mutation := newGameAccountMutation(c.config, OpDelete)
	return &GameAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GameAccountClient) DeleteOne(ga *GameAccount) *GameAccountDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GameAccountClient) DeleteOneID(id int) *GameAccountDeleteOne {
	builder := c.Delete().Where(gameaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameAccountDeleteOne{builder}
}

// Query returns a query builder for GameAccount.
func (c *GameAccountClient) Query() *GameAccountQuery {
	return &GameAccountQuery{
		config: c.config,
	}
}

// Get returns a GameAccount entity by its id.
func (c *GameAccountClient) Get(ctx context.Context, id int) (*GameAccount, error) {
	return c.Query().Where(gameaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameAccountClient) GetX(ctx context.Context, id int) *GameAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a GameAccount.
func (c *GameAccountClient) QueryOwner(ga *GameAccount) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameaccount.Table, gameaccount.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameaccount.OwnerTable, gameaccount.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGame queries the game edge of a GameAccount.
func (c *GameAccountClient) QueryGame(ga *GameAccount) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameaccount.Table, gameaccount.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameaccount.GameTable, gameaccount.GameColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPgslot queries the pgslot edge of a GameAccount.
func (c *GameAccountClient) QueryPgslot(ga *GameAccount) *PgSlotAccountQuery {
	query := &PgSlotAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameaccount.Table, gameaccount.FieldID, id),
			sqlgraph.To(pgslotaccount.Table, pgslotaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gameaccount.PgslotTable, gameaccount.PgslotColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPretty queries the pretty edge of a GameAccount.
func (c *GameAccountClient) QueryPretty(ga *GameAccount) *PrettyGameAccountQuery {
	query := &PrettyGameAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameaccount.Table, gameaccount.FieldID, id),
			sqlgraph.To(prettygameaccount.Table, prettygameaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gameaccount.PrettyTable, gameaccount.PrettyColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySagame queries the sagame edge of a GameAccount.
func (c *GameAccountClient) QuerySagame(ga *GameAccount) *SAGameAccountQuery {
	query := &SAGameAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameaccount.Table, gameaccount.FieldID, id),
			sqlgraph.To(sagameaccount.Table, sagameaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gameaccount.SagameTable, gameaccount.SagameColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameAccountClient) Hooks() []Hook {
	return c.hooks.GameAccount
}

// LineAccountClient is a client for the LineAccount schema.
type LineAccountClient struct {
	config
}

// NewLineAccountClient returns a client for the LineAccount from the given config.
func NewLineAccountClient(c config) *LineAccountClient {
	return &LineAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lineaccount.Hooks(f(g(h())))`.
func (c *LineAccountClient) Use(hooks ...Hook) {
	c.hooks.LineAccount = append(c.hooks.LineAccount, hooks...)
}

// Create returns a create builder for LineAccount.
func (c *LineAccountClient) Create() *LineAccountCreate {
	mutation := newLineAccountMutation(c.config, OpCreate)
	return &LineAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LineAccount entities.
func (c *LineAccountClient) CreateBulk(builders ...*LineAccountCreate) *LineAccountCreateBulk {
	return &LineAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LineAccount.
func (c *LineAccountClient) Update() *LineAccountUpdate {
	mutation := newLineAccountMutation(c.config, OpUpdate)
	return &LineAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LineAccountClient) UpdateOne(la *LineAccount) *LineAccountUpdateOne {
	mutation := newLineAccountMutation(c.config, OpUpdateOne, withLineAccount(la))
	return &LineAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LineAccountClient) UpdateOneID(id int) *LineAccountUpdateOne {
	mutation := newLineAccountMutation(c.config, OpUpdateOne, withLineAccountID(id))
	return &LineAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LineAccount.
func (c *LineAccountClient) Delete() *LineAccountDelete {
	mutation := newLineAccountMutation(c.config, OpDelete)
	return &LineAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LineAccountClient) DeleteOne(la *LineAccount) *LineAccountDeleteOne {
	return c.DeleteOneID(la.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LineAccountClient) DeleteOneID(id int) *LineAccountDeleteOne {
	builder := c.Delete().Where(lineaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LineAccountDeleteOne{builder}
}

// Query returns a query builder for LineAccount.
func (c *LineAccountClient) Query() *LineAccountQuery {
	return &LineAccountQuery{
		config: c.config,
	}
}

// Get returns a LineAccount entity by its id.
func (c *LineAccountClient) Get(ctx context.Context, id int) (*LineAccount, error) {
	return c.Query().Where(lineaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LineAccountClient) GetX(ctx context.Context, id int) *LineAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a LineAccount.
func (c *LineAccountClient) QueryOwner(la *LineAccount) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := la.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lineaccount.Table, lineaccount.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lineaccount.OwnerTable, lineaccount.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(la.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LineAccountClient) Hooks() []Hook {
	return c.hooks.LineAccount
}

// MasterWalletTransactionClient is a client for the MasterWalletTransaction schema.
type MasterWalletTransactionClient struct {
	config
}

// NewMasterWalletTransactionClient returns a client for the MasterWalletTransaction from the given config.
func NewMasterWalletTransactionClient(c config) *MasterWalletTransactionClient {
	return &MasterWalletTransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `masterwallettransaction.Hooks(f(g(h())))`.
func (c *MasterWalletTransactionClient) Use(hooks ...Hook) {
	c.hooks.MasterWalletTransaction = append(c.hooks.MasterWalletTransaction, hooks...)
}

// Create returns a create builder for MasterWalletTransaction.
func (c *MasterWalletTransactionClient) Create() *MasterWalletTransactionCreate {
	mutation := newMasterWalletTransactionMutation(c.config, OpCreate)
	return &MasterWalletTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MasterWalletTransaction entities.
func (c *MasterWalletTransactionClient) CreateBulk(builders ...*MasterWalletTransactionCreate) *MasterWalletTransactionCreateBulk {
	return &MasterWalletTransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MasterWalletTransaction.
func (c *MasterWalletTransactionClient) Update() *MasterWalletTransactionUpdate {
	mutation := newMasterWalletTransactionMutation(c.config, OpUpdate)
	return &MasterWalletTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MasterWalletTransactionClient) UpdateOne(mwt *MasterWalletTransaction) *MasterWalletTransactionUpdateOne {
	mutation := newMasterWalletTransactionMutation(c.config, OpUpdateOne, withMasterWalletTransaction(mwt))
	return &MasterWalletTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MasterWalletTransactionClient) UpdateOneID(id int) *MasterWalletTransactionUpdateOne {
	mutation := newMasterWalletTransactionMutation(c.config, OpUpdateOne, withMasterWalletTransactionID(id))
	return &MasterWalletTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MasterWalletTransaction.
func (c *MasterWalletTransactionClient) Delete() *MasterWalletTransactionDelete {
	mutation := newMasterWalletTransactionMutation(c.config, OpDelete)
	return &MasterWalletTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MasterWalletTransactionClient) DeleteOne(mwt *MasterWalletTransaction) *MasterWalletTransactionDeleteOne {
	return c.DeleteOneID(mwt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MasterWalletTransactionClient) DeleteOneID(id int) *MasterWalletTransactionDeleteOne {
	builder := c.Delete().Where(masterwallettransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MasterWalletTransactionDeleteOne{builder}
}

// Query returns a query builder for MasterWalletTransaction.
func (c *MasterWalletTransactionClient) Query() *MasterWalletTransactionQuery {
	return &MasterWalletTransactionQuery{
		config: c.config,
	}
}

// Get returns a MasterWalletTransaction entity by its id.
func (c *MasterWalletTransactionClient) Get(ctx context.Context, id int) (*MasterWalletTransaction, error) {
	return c.Query().Where(masterwallettransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MasterWalletTransactionClient) GetX(ctx context.Context, id int) *MasterWalletTransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a MasterWalletTransaction.
func (c *MasterWalletTransactionClient) QueryOwner(mwt *MasterWalletTransaction) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mwt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(masterwallettransaction.Table, masterwallettransaction.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, masterwallettransaction.OwnerTable, masterwallettransaction.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(mwt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MasterWalletTransactionClient) Hooks() []Hook {
	return c.hooks.MasterWalletTransaction
}

// PgSlotAccountClient is a client for the PgSlotAccount schema.
type PgSlotAccountClient struct {
	config
}

// NewPgSlotAccountClient returns a client for the PgSlotAccount from the given config.
func NewPgSlotAccountClient(c config) *PgSlotAccountClient {
	return &PgSlotAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pgslotaccount.Hooks(f(g(h())))`.
func (c *PgSlotAccountClient) Use(hooks ...Hook) {
	c.hooks.PgSlotAccount = append(c.hooks.PgSlotAccount, hooks...)
}

// Create returns a create builder for PgSlotAccount.
func (c *PgSlotAccountClient) Create() *PgSlotAccountCreate {
	mutation := newPgSlotAccountMutation(c.config, OpCreate)
	return &PgSlotAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PgSlotAccount entities.
func (c *PgSlotAccountClient) CreateBulk(builders ...*PgSlotAccountCreate) *PgSlotAccountCreateBulk {
	return &PgSlotAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PgSlotAccount.
func (c *PgSlotAccountClient) Update() *PgSlotAccountUpdate {
	mutation := newPgSlotAccountMutation(c.config, OpUpdate)
	return &PgSlotAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PgSlotAccountClient) UpdateOne(psa *PgSlotAccount) *PgSlotAccountUpdateOne {
	mutation := newPgSlotAccountMutation(c.config, OpUpdateOne, withPgSlotAccount(psa))
	return &PgSlotAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PgSlotAccountClient) UpdateOneID(id int) *PgSlotAccountUpdateOne {
	mutation := newPgSlotAccountMutation(c.config, OpUpdateOne, withPgSlotAccountID(id))
	return &PgSlotAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PgSlotAccount.
func (c *PgSlotAccountClient) Delete() *PgSlotAccountDelete {
	mutation := newPgSlotAccountMutation(c.config, OpDelete)
	return &PgSlotAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PgSlotAccountClient) DeleteOne(psa *PgSlotAccount) *PgSlotAccountDeleteOne {
	return c.DeleteOneID(psa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PgSlotAccountClient) DeleteOneID(id int) *PgSlotAccountDeleteOne {
	builder := c.Delete().Where(pgslotaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PgSlotAccountDeleteOne{builder}
}

// Query returns a query builder for PgSlotAccount.
func (c *PgSlotAccountClient) Query() *PgSlotAccountQuery {
	return &PgSlotAccountQuery{
		config: c.config,
	}
}

// Get returns a PgSlotAccount entity by its id.
func (c *PgSlotAccountClient) Get(ctx context.Context, id int) (*PgSlotAccount, error) {
	return c.Query().Where(pgslotaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PgSlotAccountClient) GetX(ctx context.Context, id int) *PgSlotAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PgSlotAccount.
func (c *PgSlotAccountClient) QueryOwner(psa *PgSlotAccount) *GameAccountQuery {
	query := &GameAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pgslotaccount.Table, pgslotaccount.FieldID, id),
			sqlgraph.To(gameaccount.Table, gameaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pgslotaccount.OwnerTable, pgslotaccount.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(psa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PgSlotAccountClient) Hooks() []Hook {
	return c.hooks.PgSlotAccount
}

// PrettyGameAccountClient is a client for the PrettyGameAccount schema.
type PrettyGameAccountClient struct {
	config
}

// NewPrettyGameAccountClient returns a client for the PrettyGameAccount from the given config.
func NewPrettyGameAccountClient(c config) *PrettyGameAccountClient {
	return &PrettyGameAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prettygameaccount.Hooks(f(g(h())))`.
func (c *PrettyGameAccountClient) Use(hooks ...Hook) {
	c.hooks.PrettyGameAccount = append(c.hooks.PrettyGameAccount, hooks...)
}

// Create returns a create builder for PrettyGameAccount.
func (c *PrettyGameAccountClient) Create() *PrettyGameAccountCreate {
	mutation := newPrettyGameAccountMutation(c.config, OpCreate)
	return &PrettyGameAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PrettyGameAccount entities.
func (c *PrettyGameAccountClient) CreateBulk(builders ...*PrettyGameAccountCreate) *PrettyGameAccountCreateBulk {
	return &PrettyGameAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PrettyGameAccount.
func (c *PrettyGameAccountClient) Update() *PrettyGameAccountUpdate {
	mutation := newPrettyGameAccountMutation(c.config, OpUpdate)
	return &PrettyGameAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrettyGameAccountClient) UpdateOne(pga *PrettyGameAccount) *PrettyGameAccountUpdateOne {
	mutation := newPrettyGameAccountMutation(c.config, OpUpdateOne, withPrettyGameAccount(pga))
	return &PrettyGameAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrettyGameAccountClient) UpdateOneID(id int) *PrettyGameAccountUpdateOne {
	mutation := newPrettyGameAccountMutation(c.config, OpUpdateOne, withPrettyGameAccountID(id))
	return &PrettyGameAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PrettyGameAccount.
func (c *PrettyGameAccountClient) Delete() *PrettyGameAccountDelete {
	mutation := newPrettyGameAccountMutation(c.config, OpDelete)
	return &PrettyGameAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PrettyGameAccountClient) DeleteOne(pga *PrettyGameAccount) *PrettyGameAccountDeleteOne {
	return c.DeleteOneID(pga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PrettyGameAccountClient) DeleteOneID(id int) *PrettyGameAccountDeleteOne {
	builder := c.Delete().Where(prettygameaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrettyGameAccountDeleteOne{builder}
}

// Query returns a query builder for PrettyGameAccount.
func (c *PrettyGameAccountClient) Query() *PrettyGameAccountQuery {
	return &PrettyGameAccountQuery{
		config: c.config,
	}
}

// Get returns a PrettyGameAccount entity by its id.
func (c *PrettyGameAccountClient) Get(ctx context.Context, id int) (*PrettyGameAccount, error) {
	return c.Query().Where(prettygameaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrettyGameAccountClient) GetX(ctx context.Context, id int) *PrettyGameAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PrettyGameAccount.
func (c *PrettyGameAccountClient) QueryOwner(pga *PrettyGameAccount) *GameAccountQuery {
	query := &GameAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prettygameaccount.Table, prettygameaccount.FieldID, id),
			sqlgraph.To(gameaccount.Table, gameaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prettygameaccount.OwnerTable, prettygameaccount.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrettyGameAccountClient) Hooks() []Hook {
	return c.hooks.PrettyGameAccount
}

// SAGameAccountClient is a client for the SAGameAccount schema.
type SAGameAccountClient struct {
	config
}

// NewSAGameAccountClient returns a client for the SAGameAccount from the given config.
func NewSAGameAccountClient(c config) *SAGameAccountClient {
	return &SAGameAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sagameaccount.Hooks(f(g(h())))`.
func (c *SAGameAccountClient) Use(hooks ...Hook) {
	c.hooks.SAGameAccount = append(c.hooks.SAGameAccount, hooks...)
}

// Create returns a create builder for SAGameAccount.
func (c *SAGameAccountClient) Create() *SAGameAccountCreate {
	mutation := newSAGameAccountMutation(c.config, OpCreate)
	return &SAGameAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SAGameAccount entities.
func (c *SAGameAccountClient) CreateBulk(builders ...*SAGameAccountCreate) *SAGameAccountCreateBulk {
	return &SAGameAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SAGameAccount.
func (c *SAGameAccountClient) Update() *SAGameAccountUpdate {
	mutation := newSAGameAccountMutation(c.config, OpUpdate)
	return &SAGameAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SAGameAccountClient) UpdateOne(sga *SAGameAccount) *SAGameAccountUpdateOne {
	mutation := newSAGameAccountMutation(c.config, OpUpdateOne, withSAGameAccount(sga))
	return &SAGameAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SAGameAccountClient) UpdateOneID(id int) *SAGameAccountUpdateOne {
	mutation := newSAGameAccountMutation(c.config, OpUpdateOne, withSAGameAccountID(id))
	return &SAGameAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SAGameAccount.
func (c *SAGameAccountClient) Delete() *SAGameAccountDelete {
	mutation := newSAGameAccountMutation(c.config, OpDelete)
	return &SAGameAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SAGameAccountClient) DeleteOne(sga *SAGameAccount) *SAGameAccountDeleteOne {
	return c.DeleteOneID(sga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SAGameAccountClient) DeleteOneID(id int) *SAGameAccountDeleteOne {
	builder := c.Delete().Where(sagameaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SAGameAccountDeleteOne{builder}
}

// Query returns a query builder for SAGameAccount.
func (c *SAGameAccountClient) Query() *SAGameAccountQuery {
	return &SAGameAccountQuery{
		config: c.config,
	}
}

// Get returns a SAGameAccount entity by its id.
func (c *SAGameAccountClient) Get(ctx context.Context, id int) (*SAGameAccount, error) {
	return c.Query().Where(sagameaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SAGameAccountClient) GetX(ctx context.Context, id int) *SAGameAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a SAGameAccount.
func (c *SAGameAccountClient) QueryOwner(sga *SAGameAccount) *GameAccountQuery {
	query := &GameAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sagameaccount.Table, sagameaccount.FieldID, id),
			sqlgraph.To(gameaccount.Table, gameaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sagameaccount.OwnerTable, sagameaccount.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(sga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SAGameAccountClient) Hooks() []Hook {
	return c.hooks.SAGameAccount
}

// TransferTransactionClient is a client for the TransferTransaction schema.
type TransferTransactionClient struct {
	config
}

// NewTransferTransactionClient returns a client for the TransferTransaction from the given config.
func NewTransferTransactionClient(c config) *TransferTransactionClient {
	return &TransferTransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transfertransaction.Hooks(f(g(h())))`.
func (c *TransferTransactionClient) Use(hooks ...Hook) {
	c.hooks.TransferTransaction = append(c.hooks.TransferTransaction, hooks...)
}

// Create returns a create builder for TransferTransaction.
func (c *TransferTransactionClient) Create() *TransferTransactionCreate {
	mutation := newTransferTransactionMutation(c.config, OpCreate)
	return &TransferTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransferTransaction entities.
func (c *TransferTransactionClient) CreateBulk(builders ...*TransferTransactionCreate) *TransferTransactionCreateBulk {
	return &TransferTransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransferTransaction.
func (c *TransferTransactionClient) Update() *TransferTransactionUpdate {
	mutation := newTransferTransactionMutation(c.config, OpUpdate)
	return &TransferTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransferTransactionClient) UpdateOne(tt *TransferTransaction) *TransferTransactionUpdateOne {
	mutation := newTransferTransactionMutation(c.config, OpUpdateOne, withTransferTransaction(tt))
	return &TransferTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransferTransactionClient) UpdateOneID(id int) *TransferTransactionUpdateOne {
	mutation := newTransferTransactionMutation(c.config, OpUpdateOne, withTransferTransactionID(id))
	return &TransferTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransferTransaction.
func (c *TransferTransactionClient) Delete() *TransferTransactionDelete {
	mutation := newTransferTransactionMutation(c.config, OpDelete)
	return &TransferTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransferTransactionClient) DeleteOne(tt *TransferTransaction) *TransferTransactionDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransferTransactionClient) DeleteOneID(id int) *TransferTransactionDeleteOne {
	builder := c.Delete().Where(transfertransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransferTransactionDeleteOne{builder}
}

// Query returns a query builder for TransferTransaction.
func (c *TransferTransactionClient) Query() *TransferTransactionQuery {
	return &TransferTransactionQuery{
		config: c.config,
	}
}

// Get returns a TransferTransaction entity by its id.
func (c *TransferTransactionClient) Get(ctx context.Context, id int) (*TransferTransaction, error) {
	return c.Query().Where(transfertransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransferTransactionClient) GetX(ctx context.Context, id int) *TransferTransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a TransferTransaction.
func (c *TransferTransactionClient) QueryOwner(tt *TransferTransaction) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transfertransaction.Table, transfertransaction.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transfertransaction.OwnerTable, transfertransaction.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGame queries the game edge of a TransferTransaction.
func (c *TransferTransactionClient) QueryGame(tt *TransferTransaction) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transfertransaction.Table, transfertransaction.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transfertransaction.GameTable, transfertransaction.GameColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransferTransactionClient) Hooks() []Hook {
	return c.hooks.TransferTransaction
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGames queries the games edge of a User.
func (c *UserClient) QueryGames(u *User) *GameAccountQuery {
	query := &GameAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(gameaccount.Table, gameaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GamesTable, user.GamesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransfers queries the transfers edge of a User.
func (c *UserClient) QueryTransfers(u *User) *TransferTransactionQuery {
	query := &TransferTransactionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(transfertransaction.Table, transfertransaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TransfersTable, user.TransfersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBanks queries the banks edge of a User.
func (c *UserClient) QueryBanks(u *User) *BankAccountQuery {
	query := &BankAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(bankaccount.Table, bankaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BanksTable, user.BanksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccessToken queries the access_token edge of a User.
func (c *UserClient) QueryAccessToken(u *User) *AccessTokenQuery {
	query := &AccessTokenQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(accesstoken.Table, accesstoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AccessTokenTable, user.AccessTokenColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLine queries the line edge of a User.
func (c *UserClient) QueryLine(u *User) *LineAccountQuery {
	query := &LineAccountQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(lineaccount.Table, lineaccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LineTable, user.LineColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWallet queries the wallet edge of a User.
func (c *UserClient) QueryWallet(u *User) *MasterWalletTransactionQuery {
	query := &MasterWalletTransactionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(masterwallettransaction.Table, masterwallettransaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WalletTable, user.WalletColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a User.
func (c *UserClient) QueryChannel(u *User) *ChannelQuery {
	query := &ChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.ChannelTable, user.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
