// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wynn-member-api/ent/game"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/pgslotaccount"
	"wynn-member-api/ent/prettygameaccount"
	"wynn-member-api/ent/sagameaccount"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GameAccountCreate is the builder for creating a GameAccount entity.
type GameAccountCreate struct {
	config
	mutation *GameAccountMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (gac *GameAccountCreate) SetUUID(u uuid.UUID) *GameAccountCreate {
	gac.mutation.SetUUID(u)
	return gac
}

// SetCreatedAt sets the "created_at" field.
func (gac *GameAccountCreate) SetCreatedAt(t time.Time) *GameAccountCreate {
	gac.mutation.SetCreatedAt(t)
	return gac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableCreatedAt(t *time.Time) *GameAccountCreate {
	if t != nil {
		gac.SetCreatedAt(*t)
	}
	return gac
}

// SetUpdatedAt sets the "updated_at" field.
func (gac *GameAccountCreate) SetUpdatedAt(t time.Time) *GameAccountCreate {
	gac.mutation.SetUpdatedAt(t)
	return gac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableUpdatedAt(t *time.Time) *GameAccountCreate {
	if t != nil {
		gac.SetUpdatedAt(*t)
	}
	return gac
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gac *GameAccountCreate) SetOwnerID(id int) *GameAccountCreate {
	gac.mutation.SetOwnerID(id)
	return gac
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (gac *GameAccountCreate) SetNillableOwnerID(id *int) *GameAccountCreate {
	if id != nil {
		gac = gac.SetOwnerID(*id)
	}
	return gac
}

// SetOwner sets the "owner" edge to the User entity.
func (gac *GameAccountCreate) SetOwner(u *User) *GameAccountCreate {
	return gac.SetOwnerID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (gac *GameAccountCreate) SetGameID(id int) *GameAccountCreate {
	gac.mutation.SetGameID(id)
	return gac
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (gac *GameAccountCreate) SetNillableGameID(id *int) *GameAccountCreate {
	if id != nil {
		gac = gac.SetGameID(*id)
	}
	return gac
}

// SetGame sets the "game" edge to the Game entity.
func (gac *GameAccountCreate) SetGame(g *Game) *GameAccountCreate {
	return gac.SetGameID(g.ID)
}

// AddPgslotIDs adds the "pgslot" edge to the PgSlotAccount entity by IDs.
func (gac *GameAccountCreate) AddPgslotIDs(ids ...int) *GameAccountCreate {
	gac.mutation.AddPgslotIDs(ids...)
	return gac
}

// AddPgslot adds the "pgslot" edges to the PgSlotAccount entity.
func (gac *GameAccountCreate) AddPgslot(p ...*PgSlotAccount) *GameAccountCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gac.AddPgslotIDs(ids...)
}

// AddPrettyIDs adds the "pretty" edge to the PrettyGameAccount entity by IDs.
func (gac *GameAccountCreate) AddPrettyIDs(ids ...int) *GameAccountCreate {
	gac.mutation.AddPrettyIDs(ids...)
	return gac
}

// AddPretty adds the "pretty" edges to the PrettyGameAccount entity.
func (gac *GameAccountCreate) AddPretty(p ...*PrettyGameAccount) *GameAccountCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gac.AddPrettyIDs(ids...)
}

// AddSagameIDs adds the "sagame" edge to the SAGameAccount entity by IDs.
func (gac *GameAccountCreate) AddSagameIDs(ids ...int) *GameAccountCreate {
	gac.mutation.AddSagameIDs(ids...)
	return gac
}

// AddSagame adds the "sagame" edges to the SAGameAccount entity.
func (gac *GameAccountCreate) AddSagame(s ...*SAGameAccount) *GameAccountCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gac.AddSagameIDs(ids...)
}

// Mutation returns the GameAccountMutation object of the builder.
func (gac *GameAccountCreate) Mutation() *GameAccountMutation {
	return gac.mutation
}

// Save creates the GameAccount in the database.
func (gac *GameAccountCreate) Save(ctx context.Context) (*GameAccount, error) {
	var (
		err  error
		node *GameAccount
	)
	gac.defaults()
	if len(gac.hooks) == 0 {
		if err = gac.check(); err != nil {
			return nil, err
		}
		node, err = gac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gac.check(); err != nil {
				return nil, err
			}
			gac.mutation = mutation
			if node, err = gac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gac.hooks) - 1; i >= 0; i-- {
			if gac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GameAccountCreate) SaveX(ctx context.Context) *GameAccount {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gac *GameAccountCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GameAccountCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GameAccountCreate) defaults() {
	if _, ok := gac.mutation.UUID(); !ok {
		v := gameaccount.DefaultUUID()
		gac.mutation.SetUUID(v)
	}
	if _, ok := gac.mutation.CreatedAt(); !ok {
		v := gameaccount.DefaultCreatedAt()
		gac.mutation.SetCreatedAt(v)
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		v := gameaccount.DefaultUpdatedAt()
		gac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gac *GameAccountCreate) check() error {
	if _, ok := gac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if _, ok := gac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (gac *GameAccountCreate) sqlSave(ctx context.Context) (*GameAccount, error) {
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gac *GameAccountCreate) createSpec() (*GameAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &GameAccount{config: gac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gameaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gameaccount.FieldID,
			},
		}
	)
	if value, ok := gac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: gameaccount.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := gac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := gac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.OwnerTable,
			Columns: []string{gameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gac.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameaccount.GameTable,
			Columns: []string{gameaccount.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_accounts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gac.mutation.PgslotIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PgslotTable,
			Columns: []string{gameaccount.PgslotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pgslotaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gac.mutation.PrettyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.PrettyTable,
			Columns: []string{gameaccount.PrettyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prettygameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gac.mutation.SagameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameaccount.SagameTable,
			Columns: []string{gameaccount.SagameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sagameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameAccountCreateBulk is the builder for creating many GameAccount entities in bulk.
type GameAccountCreateBulk struct {
	config
	builders []*GameAccountCreate
}

// Save creates the GameAccount entities in the database.
func (gacb *GameAccountCreateBulk) Save(ctx context.Context) ([]*GameAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GameAccount, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GameAccountCreateBulk) SaveX(ctx context.Context) []*GameAccount {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacb *GameAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GameAccountCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}
