// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wynn-member-api/ent/lineaccount"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// LineAccount is the model entity for the LineAccount schema.
type LineAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// LineID holds the value of the "line_id" field.
	LineID string `json:"line_id,omitempty"`
	// LineClientID holds the value of the "line_client_id" field.
	LineClientID string `json:"line_client_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LineAccountQuery when eager-loading is set.
	Edges     LineAccountEdges `json:"edges"`
	user_line *int
}

// LineAccountEdges holds the relations/edges for other nodes in the graph.
type LineAccountEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LineAccountEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LineAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lineaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case lineaccount.FieldLineID, lineaccount.FieldLineClientID:
			values[i] = new(sql.NullString)
		case lineaccount.FieldCreatedAt, lineaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case lineaccount.FieldUUID:
			values[i] = new(uuid.UUID)
		case lineaccount.ForeignKeys[0]: // user_line
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LineAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LineAccount fields.
func (la *LineAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lineaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			la.ID = int(value.Int64)
		case lineaccount.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				la.UUID = *value
			}
		case lineaccount.FieldLineID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_id", values[i])
			} else if value.Valid {
				la.LineID = value.String
			}
		case lineaccount.FieldLineClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_client_id", values[i])
			} else if value.Valid {
				la.LineClientID = value.String
			}
		case lineaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case lineaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				la.UpdatedAt = value.Time
			}
		case lineaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_line", value)
			} else if value.Valid {
				la.user_line = new(int)
				*la.user_line = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the LineAccount entity.
func (la *LineAccount) QueryOwner() *UserQuery {
	return (&LineAccountClient{config: la.config}).QueryOwner(la)
}

// Update returns a builder for updating this LineAccount.
// Note that you need to call LineAccount.Unwrap() before calling this method if this LineAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LineAccount) Update() *LineAccountUpdateOne {
	return (&LineAccountClient{config: la.config}).UpdateOne(la)
}

// Unwrap unwraps the LineAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LineAccount) Unwrap() *LineAccount {
	tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LineAccount is not a transactional entity")
	}
	la.config.driver = tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LineAccount) String() string {
	var builder strings.Builder
	builder.WriteString("LineAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", la.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", la.UUID))
	builder.WriteString(", line_id=")
	builder.WriteString(la.LineID)
	builder.WriteString(", line_client_id=")
	builder.WriteString(la.LineClientID)
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", la.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", la.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// LineAccounts is a parsable slice of LineAccount.
type LineAccounts []*LineAccount

func (la LineAccounts) config(cfg config) {
	for _i := range la {
		la[_i].config = cfg
	}
}
