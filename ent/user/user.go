// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldTel holds the string denoting the tel field in the database.
	FieldTel = "tel"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldBonus holds the string denoting the bonus field in the database.
	FieldBonus = "bonus"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeTransfers holds the string denoting the transfers edge name in mutations.
	EdgeTransfers = "transfers"
	// EdgeBanks holds the string denoting the banks edge name in mutations.
	EdgeBanks = "banks"
	// EdgeAccessToken holds the string denoting the access_token edge name in mutations.
	EdgeAccessToken = "access_token"
	// EdgeLine holds the string denoting the line edge name in mutations.
	EdgeLine = "line"
	// EdgeWallet holds the string denoting the wallet edge name in mutations.
	EdgeWallet = "wallet"
	// EdgeChannel holds the string denoting the channel edge name in mutations.
	EdgeChannel = "channel"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "game_accounts"
	// GamesInverseTable is the table name for the GameAccount entity.
	// It exists in this package in order to avoid circular dependency with the "gameaccount" package.
	GamesInverseTable = "game_accounts"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "user_games"
	// TransfersTable is the table that holds the transfers relation/edge.
	TransfersTable = "transfer_transactions"
	// TransfersInverseTable is the table name for the TransferTransaction entity.
	// It exists in this package in order to avoid circular dependency with the "transfertransaction" package.
	TransfersInverseTable = "transfer_transactions"
	// TransfersColumn is the table column denoting the transfers relation/edge.
	TransfersColumn = "user_transfers"
	// BanksTable is the table that holds the banks relation/edge.
	BanksTable = "bank_accounts"
	// BanksInverseTable is the table name for the BankAccount entity.
	// It exists in this package in order to avoid circular dependency with the "bankaccount" package.
	BanksInverseTable = "bank_accounts"
	// BanksColumn is the table column denoting the banks relation/edge.
	BanksColumn = "user_banks"
	// AccessTokenTable is the table that holds the access_token relation/edge.
	AccessTokenTable = "access_tokens"
	// AccessTokenInverseTable is the table name for the AccessToken entity.
	// It exists in this package in order to avoid circular dependency with the "accesstoken" package.
	AccessTokenInverseTable = "access_tokens"
	// AccessTokenColumn is the table column denoting the access_token relation/edge.
	AccessTokenColumn = "user_access_token"
	// LineTable is the table that holds the line relation/edge.
	LineTable = "line_accounts"
	// LineInverseTable is the table name for the LineAccount entity.
	// It exists in this package in order to avoid circular dependency with the "lineaccount" package.
	LineInverseTable = "line_accounts"
	// LineColumn is the table column denoting the line relation/edge.
	LineColumn = "user_line"
	// WalletTable is the table that holds the wallet relation/edge.
	WalletTable = "master_wallet_transactions"
	// WalletInverseTable is the table name for the MasterWalletTransaction entity.
	// It exists in this package in order to avoid circular dependency with the "masterwallettransaction" package.
	WalletInverseTable = "master_wallet_transactions"
	// WalletColumn is the table column denoting the wallet relation/edge.
	WalletColumn = "user_wallet"
	// ChannelTable is the table that holds the channel relation/edge.
	ChannelTable = "users"
	// ChannelInverseTable is the table name for the Channel entity.
	// It exists in this package in order to avoid circular dependency with the "channel" package.
	ChannelInverseTable = "channels"
	// ChannelColumn is the table column denoting the channel relation/edge.
	ChannelColumn = "channel_user"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldTel,
	FieldPicture,
	FieldUsername,
	FieldPassword,
	FieldStatus,
	FieldBonus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"channel_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// TelValidator is a validator for the "tel" field. It is called by the builders before save.
	TelValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusInactive is the default value of the Status enum.
const DefaultStatus = StatusInactive

// Status values.
const (
	StatusInactive Status = "inactive"
	StatusActive   Status = "active"
	StatusPending  Status = "pending"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInactive, StatusActive, StatusPending:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// Bonus defines the type for the "bonus" enum field.
type Bonus string

// BonusRejected is the default value of the Bonus enum.
const DefaultBonus = BonusRejected

// Bonus values.
const (
	BonusAccepted Bonus = "accepted"
	BonusRejected Bonus = "rejected"
)

func (b Bonus) String() string {
	return string(b)
}

// BonusValidator is a validator for the "bonus" field enum values. It is called by the builders before save.
func BonusValidator(b Bonus) error {
	switch b {
	case BonusAccepted, BonusRejected:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for bonus field: %q", b)
	}
}
