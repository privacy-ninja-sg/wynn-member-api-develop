// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wynn-member-api/ent/bank"
	"wynn-member-api/ent/bankaccount"
	"wynn-member-api/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BankAccount is the model entity for the BankAccount schema.
type BankAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// BankAccountID holds the value of the "bank_account_id" field.
	BankAccountID string `json:"bank_account_id,omitempty"`
	// BankAccountIDLast holds the value of the "bank_account_id_last" field.
	BankAccountIDLast string `json:"bank_account_id_last,omitempty"`
	// BankAccountName holds the value of the "bank_account_name" field.
	BankAccountName string `json:"bank_account_name,omitempty"`
	// Status holds the value of the "status" field.
	Status bankaccount.Status `json:"status,omitempty"`
	// BankCode holds the value of the "bank_code" field.
	BankCode string `json:"bank_code,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BankAccountQuery when eager-loading is set.
	Edges         BankAccountEdges `json:"edges"`
	bank_accounts *int
	user_banks    *int
}

// BankAccountEdges holds the relations/edges for other nodes in the graph.
type BankAccountEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Bank holds the value of the bank edge.
	Bank *Bank `json:"bank,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BankAccountEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BankOrErr returns the Bank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BankAccountEdges) BankOrErr() (*Bank, error) {
	if e.loadedTypes[1] {
		if e.Bank == nil {
			// The edge bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bank.Label}
		}
		return e.Bank, nil
	}
	return nil, &NotLoadedError{edge: "bank"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BankAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bankaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case bankaccount.FieldBankAccountID, bankaccount.FieldBankAccountIDLast, bankaccount.FieldBankAccountName, bankaccount.FieldStatus, bankaccount.FieldBankCode:
			values[i] = new(sql.NullString)
		case bankaccount.FieldCreatedAt, bankaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bankaccount.FieldUUID:
			values[i] = new(uuid.UUID)
		case bankaccount.ForeignKeys[0]: // bank_accounts
			values[i] = new(sql.NullInt64)
		case bankaccount.ForeignKeys[1]: // user_banks
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BankAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BankAccount fields.
func (ba *BankAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bankaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = int(value.Int64)
		case bankaccount.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				ba.UUID = *value
			}
		case bankaccount.FieldBankAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_account_id", values[i])
			} else if value.Valid {
				ba.BankAccountID = value.String
			}
		case bankaccount.FieldBankAccountIDLast:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_account_id_last", values[i])
			} else if value.Valid {
				ba.BankAccountIDLast = value.String
			}
		case bankaccount.FieldBankAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_account_name", values[i])
			} else if value.Valid {
				ba.BankAccountName = value.String
			}
		case bankaccount.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ba.Status = bankaccount.Status(value.String)
			}
		case bankaccount.FieldBankCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_code", values[i])
			} else if value.Valid {
				ba.BankCode = value.String
			}
		case bankaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ba.CreatedAt = value.Time
			}
		case bankaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ba.UpdatedAt = value.Time
			}
		case bankaccount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bank_accounts", value)
			} else if value.Valid {
				ba.bank_accounts = new(int)
				*ba.bank_accounts = int(value.Int64)
			}
		case bankaccount.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_banks", value)
			} else if value.Valid {
				ba.user_banks = new(int)
				*ba.user_banks = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the BankAccount entity.
func (ba *BankAccount) QueryOwner() *UserQuery {
	return (&BankAccountClient{config: ba.config}).QueryOwner(ba)
}

// QueryBank queries the "bank" edge of the BankAccount entity.
func (ba *BankAccount) QueryBank() *BankQuery {
	return (&BankAccountClient{config: ba.config}).QueryBank(ba)
}

// Update returns a builder for updating this BankAccount.
// Note that you need to call BankAccount.Unwrap() before calling this method if this BankAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BankAccount) Update() *BankAccountUpdateOne {
	return (&BankAccountClient{config: ba.config}).UpdateOne(ba)
}

// Unwrap unwraps the BankAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BankAccount) Unwrap() *BankAccount {
	tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BankAccount is not a transactional entity")
	}
	ba.config.driver = tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BankAccount) String() string {
	var builder strings.Builder
	builder.WriteString("BankAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", ba.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", ba.UUID))
	builder.WriteString(", bank_account_id=")
	builder.WriteString(ba.BankAccountID)
	builder.WriteString(", bank_account_id_last=")
	builder.WriteString(ba.BankAccountIDLast)
	builder.WriteString(", bank_account_name=")
	builder.WriteString(ba.BankAccountName)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ba.Status))
	builder.WriteString(", bank_code=")
	builder.WriteString(ba.BankCode)
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", ba.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ba.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// BankAccounts is a parsable slice of BankAccount.
type BankAccounts []*BankAccount

func (ba BankAccounts) config(cfg config) {
	for _i := range ba {
		ba[_i].config = cfg
	}
}
