// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wynn-member-api/ent/gameaccount"
	"wynn-member-api/ent/sagameaccount"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SAGameAccountCreate is the builder for creating a SAGameAccount entity.
type SAGameAccountCreate struct {
	config
	mutation *SAGameAccountMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (sgac *SAGameAccountCreate) SetUUID(u uuid.UUID) *SAGameAccountCreate {
	sgac.mutation.SetUUID(u)
	return sgac
}

// SetUsername sets the "username" field.
func (sgac *SAGameAccountCreate) SetUsername(s string) *SAGameAccountCreate {
	sgac.mutation.SetUsername(s)
	return sgac
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillableUsername(s *string) *SAGameAccountCreate {
	if s != nil {
		sgac.SetUsername(*s)
	}
	return sgac
}

// SetPassword sets the "password" field.
func (sgac *SAGameAccountCreate) SetPassword(s string) *SAGameAccountCreate {
	sgac.mutation.SetPassword(s)
	return sgac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillablePassword(s *string) *SAGameAccountCreate {
	if s != nil {
		sgac.SetPassword(*s)
	}
	return sgac
}

// SetDesktopURI sets the "desktop_uri" field.
func (sgac *SAGameAccountCreate) SetDesktopURI(s string) *SAGameAccountCreate {
	sgac.mutation.SetDesktopURI(s)
	return sgac
}

// SetNillableDesktopURI sets the "desktop_uri" field if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillableDesktopURI(s *string) *SAGameAccountCreate {
	if s != nil {
		sgac.SetDesktopURI(*s)
	}
	return sgac
}

// SetMobileURI sets the "mobile_uri" field.
func (sgac *SAGameAccountCreate) SetMobileURI(s string) *SAGameAccountCreate {
	sgac.mutation.SetMobileURI(s)
	return sgac
}

// SetNillableMobileURI sets the "mobile_uri" field if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillableMobileURI(s *string) *SAGameAccountCreate {
	if s != nil {
		sgac.SetMobileURI(*s)
	}
	return sgac
}

// SetCreatedAt sets the "created_at" field.
func (sgac *SAGameAccountCreate) SetCreatedAt(t time.Time) *SAGameAccountCreate {
	sgac.mutation.SetCreatedAt(t)
	return sgac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillableCreatedAt(t *time.Time) *SAGameAccountCreate {
	if t != nil {
		sgac.SetCreatedAt(*t)
	}
	return sgac
}

// SetUpdatedAt sets the "updated_at" field.
func (sgac *SAGameAccountCreate) SetUpdatedAt(t time.Time) *SAGameAccountCreate {
	sgac.mutation.SetUpdatedAt(t)
	return sgac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillableUpdatedAt(t *time.Time) *SAGameAccountCreate {
	if t != nil {
		sgac.SetUpdatedAt(*t)
	}
	return sgac
}

// SetRawData sets the "raw_data" field.
func (sgac *SAGameAccountCreate) SetRawData(s string) *SAGameAccountCreate {
	sgac.mutation.SetRawData(s)
	return sgac
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillableRawData(s *string) *SAGameAccountCreate {
	if s != nil {
		sgac.SetRawData(*s)
	}
	return sgac
}

// SetOwnerID sets the "owner" edge to the GameAccount entity by ID.
func (sgac *SAGameAccountCreate) SetOwnerID(id int) *SAGameAccountCreate {
	sgac.mutation.SetOwnerID(id)
	return sgac
}

// SetNillableOwnerID sets the "owner" edge to the GameAccount entity by ID if the given value is not nil.
func (sgac *SAGameAccountCreate) SetNillableOwnerID(id *int) *SAGameAccountCreate {
	if id != nil {
		sgac = sgac.SetOwnerID(*id)
	}
	return sgac
}

// SetOwner sets the "owner" edge to the GameAccount entity.
func (sgac *SAGameAccountCreate) SetOwner(g *GameAccount) *SAGameAccountCreate {
	return sgac.SetOwnerID(g.ID)
}

// Mutation returns the SAGameAccountMutation object of the builder.
func (sgac *SAGameAccountCreate) Mutation() *SAGameAccountMutation {
	return sgac.mutation
}

// Save creates the SAGameAccount in the database.
func (sgac *SAGameAccountCreate) Save(ctx context.Context) (*SAGameAccount, error) {
	var (
		err  error
		node *SAGameAccount
	)
	sgac.defaults()
	if len(sgac.hooks) == 0 {
		if err = sgac.check(); err != nil {
			return nil, err
		}
		node, err = sgac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SAGameAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgac.check(); err != nil {
				return nil, err
			}
			sgac.mutation = mutation
			if node, err = sgac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sgac.hooks) - 1; i >= 0; i-- {
			if sgac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sgac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sgac *SAGameAccountCreate) SaveX(ctx context.Context) *SAGameAccount {
	v, err := sgac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgac *SAGameAccountCreate) Exec(ctx context.Context) error {
	_, err := sgac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgac *SAGameAccountCreate) ExecX(ctx context.Context) {
	if err := sgac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgac *SAGameAccountCreate) defaults() {
	if _, ok := sgac.mutation.UUID(); !ok {
		v := sagameaccount.DefaultUUID()
		sgac.mutation.SetUUID(v)
	}
	if _, ok := sgac.mutation.CreatedAt(); !ok {
		v := sagameaccount.DefaultCreatedAt()
		sgac.mutation.SetCreatedAt(v)
	}
	if _, ok := sgac.mutation.UpdatedAt(); !ok {
		v := sagameaccount.DefaultUpdatedAt()
		sgac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgac *SAGameAccountCreate) check() error {
	if _, ok := sgac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if v, ok := sgac.mutation.DesktopURI(); ok {
		if err := sagameaccount.DesktopURIValidator(v); err != nil {
			return &ValidationError{Name: "desktop_uri", err: fmt.Errorf(`ent: validator failed for field "desktop_uri": %w`, err)}
		}
	}
	if v, ok := sgac.mutation.MobileURI(); ok {
		if err := sagameaccount.MobileURIValidator(v); err != nil {
			return &ValidationError{Name: "mobile_uri", err: fmt.Errorf(`ent: validator failed for field "mobile_uri": %w`, err)}
		}
	}
	if _, ok := sgac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sgac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (sgac *SAGameAccountCreate) sqlSave(ctx context.Context) (*SAGameAccount, error) {
	_node, _spec := sgac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sgac *SAGameAccountCreate) createSpec() (*SAGameAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &SAGameAccount{config: sgac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sagameaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sagameaccount.FieldID,
			},
		}
	)
	if value, ok := sgac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: sagameaccount.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := sgac.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := sgac.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := sgac.mutation.DesktopURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldDesktopURI,
		})
		_node.DesktopURI = value
	}
	if value, ok := sgac.mutation.MobileURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldMobileURI,
		})
		_node.MobileURI = value
	}
	if value, ok := sgac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sagameaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sgac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sagameaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sgac.mutation.RawData(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sagameaccount.FieldRawData,
		})
		_node.RawData = value
	}
	if nodes := sgac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagameaccount.OwnerTable,
			Columns: []string{sagameaccount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_account_sagame = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SAGameAccountCreateBulk is the builder for creating many SAGameAccount entities in bulk.
type SAGameAccountCreateBulk struct {
	config
	builders []*SAGameAccountCreate
}

// Save creates the SAGameAccount entities in the database.
func (sgacb *SAGameAccountCreateBulk) Save(ctx context.Context) ([]*SAGameAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sgacb.builders))
	nodes := make([]*SAGameAccount, len(sgacb.builders))
	mutators := make([]Mutator, len(sgacb.builders))
	for i := range sgacb.builders {
		func(i int, root context.Context) {
			builder := sgacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SAGameAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgacb *SAGameAccountCreateBulk) SaveX(ctx context.Context) []*SAGameAccount {
	v, err := sgacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgacb *SAGameAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := sgacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgacb *SAGameAccountCreateBulk) ExecX(ctx context.Context) {
	if err := sgacb.Exec(ctx); err != nil {
		panic(err)
	}
}
