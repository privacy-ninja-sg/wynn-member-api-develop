// Code generated by entc, DO NOT EDIT.

package game

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBanner holds the string denoting the banner field in the database.
	FieldBanner = "banner"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAccounts holds the string denoting the accounts edge name in mutations.
	EdgeAccounts = "accounts"
	// EdgeTransfers holds the string denoting the transfers edge name in mutations.
	EdgeTransfers = "transfers"
	// Table holds the table name of the game in the database.
	Table = "games"
	// AccountsTable is the table that holds the accounts relation/edge.
	AccountsTable = "game_accounts"
	// AccountsInverseTable is the table name for the GameAccount entity.
	// It exists in this package in order to avoid circular dependency with the "gameaccount" package.
	AccountsInverseTable = "game_accounts"
	// AccountsColumn is the table column denoting the accounts relation/edge.
	AccountsColumn = "game_accounts"
	// TransfersTable is the table that holds the transfers relation/edge.
	TransfersTable = "transfer_transactions"
	// TransfersInverseTable is the table name for the TransferTransaction entity.
	// It exists in this package in order to avoid circular dependency with the "transfertransaction" package.
	TransfersInverseTable = "transfer_transactions"
	// TransfersColumn is the table column denoting the transfers relation/edge.
	TransfersColumn = "game_transfers"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldName,
	FieldBanner,
	FieldDesc,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusOff is the default value of the Status enum.
const DefaultStatus = StatusOff

// Status values.
const (
	StatusOn  Status = "on"
	StatusOff Status = "off"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOn, StatusOff:
		return nil
	default:
		return fmt.Errorf("game: invalid enum value for status field: %q", s)
	}
}
